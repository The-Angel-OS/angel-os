/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  numeric,
  jsonb,
  integer,
  timestamp,
  boolean,
  type AnyPgColumn,
  text,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_tenants_business_type = pgEnum('enum_tenants_business_type', [
  'dumpster-rental',
  'bedbug-treatment',
  'salon',
  'cactus-farm',
  'retail',
  'service',
  'other',
])
export const enum_tenants_revenue_sharing_partnership_tier = pgEnum(
  'enum_tenants_revenue_sharing_partnership_tier',
  ['standard', 'preferred', 'strategic', 'enterprise', 'referral_source'],
)
export const enum_tenants_referral_program_referral_terms = pgEnum(
  'enum_tenants_referral_program_referral_terms',
  ['lifetime', '12_months', '24_months', 'first_year'],
)
export const enum_tenants_referral_program_referral_status = pgEnum(
  'enum_tenants_referral_program_referral_status',
  ['active', 'expired', 'suspended'],
)
export const enum_tenants_status = pgEnum('enum_tenants_status', [
  'active',
  'setup',
  'suspended',
  'archived',
])
export const enum_users_roles = pgEnum('enum_users_roles', [
  'admin',
  'editor',
  'contributor',
  'subscriber',
  'guardian_angel',
])
export const enum_users_karma_contribution_types = pgEnum('enum_users_karma_contribution_types', [
  'content_creation',
  'community_support',
  'technical_contribution',
  'mentorship',
  'justice_advocacy',
  'guardian_angel',
])
export const enum_users_karma_recognitions_type = pgEnum('enum_users_karma_recognitions_type', [
  'helpful_response',
  'quality_content',
  'community_leadership',
  'technical_excellence',
  'guardian_angel_action',
])
export const enum_users_preferences_privacy_profile_visibility = pgEnum(
  'enum_users_preferences_privacy_profile_visibility',
  ['public', 'members', 'private'],
)
export const enum_workflows_steps_type = pgEnum('enum_workflows_steps_type', [
  'create_record',
  'update_record',
  'send_email',
  'send_sms',
  'api_call',
  'ai_analysis',
  'conditional',
  'delay',
  'custom_function',
])
export const enum_workflows_steps_target_collection = pgEnum(
  'enum_workflows_steps_target_collection',
  ['posts', 'pages', 'products', 'messages', 'forms', 'users', 'orders'],
)
export const enum_workflows_steps_automation = pgEnum('enum_workflows_steps_automation', [
  'automated',
  'human_review',
  'ai_assisted',
  'manual',
])
export const enum_workflows_ethical_framework_value_alignment = pgEnum(
  'enum_workflows_ethical_framework_value_alignment',
  [
    'guardian_angel',
    'justice_advocacy',
    'economic_empowerment',
    'community_building',
    'transparency',
    'privacy_protection',
  ],
)
export const enum_workflows_status = pgEnum('enum_workflows_status', [
  'active',
  'paused',
  'draft',
  'archived',
])
export const enum_workflows_trigger_collection = pgEnum('enum_workflows_trigger_collection', [
  'posts',
  'pages',
  'products',
  'messages',
  'forms',
  'users',
  'orders',
])
export const enum_workflows_trigger_event = pgEnum('enum_workflows_trigger_event', [
  'created',
  'updated',
  'deleted',
  'published',
  'status_changed',
  'custom',
])
export const enum_workflows_business_context_department = pgEnum(
  'enum_workflows_business_context_department',
  ['sales', 'marketing', 'operations', 'support', 'finance', 'hr'],
)
export const enum_workflows_business_context_process = pgEnum(
  'enum_workflows_business_context_process',
  [
    'lead_generation',
    'customer_onboarding',
    'order_processing',
    'content_publishing',
    'customer_support',
    'project_management',
    'quality_assurance',
    'compliance',
  ],
)
export const enum_workflows_business_context_priority = pgEnum(
  'enum_workflows_business_context_priority',
  ['low', 'normal', 'high', 'critical'],
)
export const enum_workflows_scheduling_timezone = pgEnum('enum_workflows_scheduling_timezone', [
  'UTC',
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
])
export const enum_tenant_memberships_permissions = pgEnum('enum_tenant_memberships_permissions', [
  'manage_users',
  'manage_spaces',
  'manage_content',
  'manage_products',
  'manage_orders',
  'view_analytics',
  'manage_settings',
  'manage_billing',
  'export_data',
])
export const enum_tenant_memberships_role = pgEnum('enum_tenant_memberships_role', [
  'tenant_admin',
  'tenant_manager',
  'tenant_member',
])
export const enum_tenant_memberships_status = pgEnum('enum_tenant_memberships_status', [
  'active',
  'pending',
  'suspended',
  'revoked',
])
export const enum_space_memberships_custom_permissions = pgEnum(
  'enum_space_memberships_custom_permissions',
  [
    'post_messages',
    'upload_files',
    'create_events',
    'moderate_content',
    'manage_members',
    'view_analytics',
    'manage_bookings',
    'access_private',
  ],
)
export const enum_space_memberships_role = pgEnum('enum_space_memberships_role', [
  'space_admin',
  'moderator',
  'member',
  'guest',
])
export const enum_space_memberships_status = pgEnum('enum_space_memberships_status', [
  'active',
  'pending',
  'suspended',
  'left',
  'banned',
])
export const enum_space_memberships_crm_data_customer_tier = pgEnum(
  'enum_space_memberships_crm_data_customer_tier',
  ['prospect', 'lead', 'customer', 'vip'],
)
export const enum_appointments_timezone = pgEnum('enum_appointments_timezone', [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'UTC',
  'Europe/London',
  'Europe/Paris',
  'Asia/Tokyo',
])
export const enum_appointments_recurrence_type = pgEnum('enum_appointments_recurrence_type', [
  'daily',
  'weekly',
  'monthly',
])
export const enum_appointments_meeting_type = pgEnum('enum_appointments_meeting_type', [
  'in_person',
  'video_call',
  'phone_call',
  'hybrid',
])
export const enum_appointments_appointment_type = pgEnum('enum_appointments_appointment_type', [
  'standard_install',
  'custom_install',
  'quote_consultation',
  'mobile_service',
  'beauty_service',
  'barber_service',
  'auto_repair',
  'diagnostic',
  'general_meeting',
  'consultation',
])
export const enum_appointments_status = pgEnum('enum_appointments_status', [
  'scheduled',
  'confirmed',
  'cancelled',
  'completed',
  'no_show',
])
export const enum_appointments_revenue_tracking_source = pgEnum(
  'enum_appointments_revenue_tracking_source',
  ['system_generated', 'pickup_job', 'referral_source', 'repeat_customer'],
)
export const enum_appointments_payment_currency = pgEnum('enum_appointments_payment_currency', [
  'usd',
  'eur',
  'gbp',
  'cad',
])
export const enum_appointments_payment_payment_status = pgEnum(
  'enum_appointments_payment_payment_status',
  ['pending', 'paid', 'failed', 'refunded'],
)
export const enum_contacts_addresses_type = pgEnum('enum_contacts_addresses_type', [
  'billing',
  'shipping',
  'office',
  'home',
  'other',
])
export const enum_contacts_addresses_country = pgEnum('enum_contacts_addresses_country', [
  'US',
  'CA',
  'GB',
  'AU',
])
export const enum_contacts_type = pgEnum('enum_contacts_type', [
  'customer',
  'lead',
  'partner',
  'vendor',
  'team',
  'other',
])
export const enum_contacts_preferences_preferred_contact_time = pgEnum(
  'enum_contacts_preferences_preferred_contact_time',
  ['morning', 'afternoon', 'evening', 'anytime'],
)
export const enum_contacts_crm_status = pgEnum('enum_contacts_crm_status', [
  'cold',
  'warm',
  'hot',
  'customer',
  'inactive',
])
export const enum_contacts_crm_source = pgEnum('enum_contacts_crm_source', [
  'website',
  'referral',
  'social',
  'event',
  'advertisement',
  'direct',
  'other',
])
export const enum_messages_message_type = pgEnum('enum_messages_message_type', [
  'user',
  'leo',
  'system',
  'action',
  'intelligence',
])
export const enum_messages_priority = pgEnum('enum_messages_priority', [
  'low',
  'normal',
  'high',
  'urgent',
])
export const enum_spaces_commerce_settings_payment_methods = pgEnum(
  'enum_spaces_commerce_settings_payment_methods',
  ['credit_cards', 'paypal', 'bank_transfer', 'cod', 'crypto'],
)
export const enum_spaces_commerce_settings_shipping_zones = pgEnum(
  'enum_spaces_commerce_settings_shipping_zones',
  ['local', 'domestic', 'international', 'pickup'],
)
export const enum_sub_tiers_content_access = pgEnum('enum_sub_tiers_content_access', [
  'premium_posts',
  'exclusive_videos',
  'private_messages',
  'live_streams',
  'custom_content',
  'early_access',
])
export const enum_sub_tiers_currency = pgEnum('enum_sub_tiers_currency', ['usd', 'eur', 'gbp'])
export const enum_spaces_monetization_ai_opt_factors = pgEnum(
  'enum_spaces_monetization_ai_opt_factors',
  ['velocity', 'engagement', 'quality', 'platform-value', 'market', 'competitive'],
)
export const enum_spaces_integrations_print_partners_product_catalog = pgEnum(
  'enum_spaces_integrations_print_partners_product_catalog',
  ['tshirts', 'mugs', 'stickers', 'posters', 'hoodies'],
)
export const enum_spaces_integrations_social_bots_platforms = pgEnum(
  'enum_spaces_integrations_social_bots_platforms',
  [
    'facebook',
    'instagram',
    'twitter',
    'bluesky',
    'threads',
    'linkedin',
    'angellist',
    'crunchbase',
    'youtube',
    'tiktok',
    'snapchat',
    'pinterest',
    'patreon',
    'onlyfans',
    'substack',
    'whatsapp',
    'telegram',
    'discord',
    'slack',
    'mastodon',
    'bereal',
    'clubhouse',
    'twitch',
    'wechat',
    'line',
    'weibo',
    'vkontakte',
    'shopify_social',
    'etsy',
    'amazon_seller',
    'ebay',
    'medium',
    'dev_to',
    'hashnode',
    'reddit',
    'quora',
    'vimeo',
    'rumble',
    'odysee',
    'perplexity',
    'character_ai',
    'poe',
  ],
)
export const enum_spaces_business_identity_type = pgEnum('enum_spaces_business_identity_type', [
  'business',
  'creator',
  'service',
  'retail',
  'manufacturing',
])
export const enum_spaces_business_identity_industry = pgEnum(
  'enum_spaces_business_identity_industry',
  [
    'general',
    'content-creation',
    'automotive',
    'agriculture',
    'food-beverage',
    'professional-services',
    'retail',
    'technology',
    'healthcare',
    'education',
  ],
)
export const enum_spaces_business_identity_company_size = pgEnum(
  'enum_spaces_business_identity_company_size',
  ['solo', 'small', 'medium', 'large'],
)
export const enum_spaces_business_identity_target_market = pgEnum(
  'enum_spaces_business_identity_target_market',
  ['local', 'national', 'international', 'online'],
)
export const rev_type = pgEnum('rev_type', [
  'standard',
  'negotiated',
  'performance',
  'volume',
  'ai-optimized',
])
export const enum_spaces_integrations_scheduling_time_slots = pgEnum(
  'enum_spaces_integrations_scheduling_time_slots',
  ['30', '60', '120', '240'],
)
export const enum_spaces_visibility = pgEnum('enum_spaces_visibility', [
  'public',
  'invite_only',
  'private',
])
export const enum_spaces_member_approval = pgEnum('enum_spaces_member_approval', [
  'automatic',
  'manual',
  'disabled',
])
export const enum_web_chat_sessions_status = pgEnum('enum_web_chat_sessions_status', [
  'active',
  'waiting',
  'agent_connected',
  'resolved',
  'abandoned',
])
export const enum_channel_management_channel_type = pgEnum('enum_channel_management_channel_type', [
  'customer_support',
  'sales_inquiries',
  'technical_support',
  'billing',
  'general',
])
export const enum_channel_management_status = pgEnum('enum_channel_management_status', [
  'active',
  'inactive',
  'maintenance',
])
export const enum_channel_management_category = pgEnum('enum_channel_management_category', [
  'business',
  'customer_service',
  'collections',
  'logs',
  'system',
  'custom',
])
export const enum_channel_management_color = pgEnum('enum_channel_management_color', [
  'blue',
  'green',
  'orange',
  'purple',
  'red',
  'yellow',
  'gray',
])
export const enum_social_media_bots_status = pgEnum('enum_social_media_bots_status', [
  'active',
  'paused',
  'inactive',
  'error',
])
export const enum_linked_accounts_provider = pgEnum('enum_linked_accounts_provider', [
  'twitter',
  'linkedin',
  'facebook',
  'instagram',
  'youtube',
  'tiktok',
  'discord',
  'whatsapp',
  'telegram',
  'github',
])
export const enum_linked_accounts_status = pgEnum('enum_linked_accounts_status', [
  'active',
  'expired',
  'revoked',
  'error',
])
export const enum_invoices_payment_methods = pgEnum('enum_invoices_payment_methods', [
  'card',
  'bank_transfer',
  'paypal',
  'crypto',
])
export const enum_invoices_status = pgEnum('enum_invoices_status', [
  'draft',
  'sent',
  'paid',
  'overdue',
  'cancelled',
])
export const enum_documents_signers_role = pgEnum('enum_documents_signers_role', [
  'tenant',
  'landlord',
  'client',
  'contractor',
  'custom',
])
export const enum_documents_signers_status = pgEnum('enum_documents_signers_status', [
  'pending',
  'signed',
  'declined',
])
export const enum_documents_signers_signature_type = pgEnum(
  'enum_documents_signers_signature_type',
  ['drawn', 'typed', 'uploaded'],
)
export const enum_documents_type = pgEnum('enum_documents_type', [
  'rental_agreement',
  'service_contract',
  'nda',
  'custom',
])
export const enum_documents_status = pgEnum('enum_documents_status', [
  'draft',
  'sent',
  'partially_signed',
  'completed',
  'expired',
  'cancelled',
])
export const enum_donations_cause = pgEnum('enum_donations_cause', [
  'disaster_relief',
  'education',
  'healthcare',
  'environment',
  'community',
  'creator',
  'general',
])
export const enum_donations_payment_method = pgEnum('enum_donations_payment_method', [
  'card',
  'paypal',
  'bank_transfer',
  'crypto',
])
export const enum_donations_status = pgEnum('enum_donations_status', [
  'pending',
  'completed',
  'failed',
  'refunded',
])
export const enum_donations_recurring_frequency = pgEnum('enum_donations_recurring_frequency', [
  'monthly',
  'quarterly',
  'annually',
])
export const enum_products_hero_links_link_type = pgEnum('enum_products_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_products_hero_links_link_appearance = pgEnum(
  'enum_products_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum_products_blocks_cta_links_link_type = pgEnum(
  'enum_products_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_products_blocks_cta_links_link_appearance = pgEnum(
  'enum_products_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_products_blocks_content_columns_size = pgEnum(
  'enum_products_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_products_blocks_content_columns_link_type = pgEnum(
  'enum_products_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_products_blocks_content_columns_link_appearance = pgEnum(
  'enum_products_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_products_blocks_archive_populate_by = pgEnum(
  'enum_products_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_products_blocks_archive_relation_to = pgEnum(
  'enum_products_blocks_archive_relation_to',
  ['posts'],
)
export const enum_products_hero_type = pgEnum('enum_products_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum_products_product_type = pgEnum('enum_products_product_type', [
  'ai_print_demand',
  'consultation_solo',
  'group_event',
  'livekit_stream',
  'digital_download',
  'physical',
  'subscription',
  'course_training',
  'business_service',
  'automation',
])
export const enum_products_pricing_currency = pgEnum('enum_products_pricing_currency', [
  'USD',
  'EUR',
  'GBP',
  'CAD',
])
export const enum_products_details_dimensions_unit = pgEnum(
  'enum_products_details_dimensions_unit',
  ['in', 'cm', 'ft', 'm'],
)
export const enum_products_service_details_location = pgEnum(
  'enum_products_service_details_location',
  ['onsite', 'remote', 'customer', 'flexible'],
)
export const enum_products_shipping_shipping_class = pgEnum(
  'enum_products_shipping_shipping_class',
  ['standard', 'heavy', 'fragile', 'hazardous', 'cold'],
)
export const enum_products_status = pgEnum('enum_products_status', [
  'draft',
  'active',
  'archived',
  'out_of_stock',
])
export const enum__products_v_version_hero_links_link_type = pgEnum(
  'enum__products_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__products_v_version_hero_links_link_appearance = pgEnum(
  'enum__products_v_version_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum__products_v_blocks_cta_links_link_type = pgEnum(
  'enum__products_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__products_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__products_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__products_v_blocks_content_columns_size = pgEnum(
  'enum__products_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__products_v_blocks_content_columns_link_type = pgEnum(
  'enum__products_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__products_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__products_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__products_v_blocks_archive_populate_by = pgEnum(
  'enum__products_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__products_v_blocks_archive_relation_to = pgEnum(
  'enum__products_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__products_v_version_hero_type = pgEnum('enum__products_v_version_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum__products_v_version_product_type = pgEnum(
  'enum__products_v_version_product_type',
  [
    'ai_print_demand',
    'consultation_solo',
    'group_event',
    'livekit_stream',
    'digital_download',
    'physical',
    'subscription',
    'course_training',
    'business_service',
    'automation',
  ],
)
export const enum__products_v_version_pricing_currency = pgEnum(
  'enum__products_v_version_pricing_currency',
  ['USD', 'EUR', 'GBP', 'CAD'],
)
export const enum__products_v_version_details_dimensions_unit = pgEnum(
  'enum__products_v_version_details_dimensions_unit',
  ['in', 'cm', 'ft', 'm'],
)
export const enum__products_v_version_service_details_location = pgEnum(
  'enum__products_v_version_service_details_location',
  ['onsite', 'remote', 'customer', 'flexible'],
)
export const enum__products_v_version_shipping_shipping_class = pgEnum(
  'enum__products_v_version_shipping_shipping_class',
  ['standard', 'heavy', 'fragile', 'hazardous', 'cold'],
)
export const enum__products_v_version_status = pgEnum('enum__products_v_version_status', [
  'draft',
  'active',
  'archived',
  'out_of_stock',
])
export const enum_orders_status = pgEnum('enum_orders_status', [
  'pending',
  'processing',
  'shipped',
  'delivered',
  'completed',
  'cancelled',
  'refunded',
])
export const enum_orders_payment_status = pgEnum('enum_orders_payment_status', [
  'pending',
  'authorized',
  'captured',
  'partially_refunded',
  'refunded',
  'failed',
])
export const enum_orders_payment_details_payment_method = pgEnum(
  'enum_orders_payment_details_payment_method',
  ['credit_card', 'paypal', 'stripe', 'bank_transfer', 'crypto'],
)
export const enum_orders_fulfillment_method = pgEnum('enum_orders_fulfillment_method', [
  'digital',
  'physical',
  'service',
  'pickup',
])
export const enum_orders_fulfillment_status = pgEnum('enum_orders_fulfillment_status', [
  'pending',
  'processing',
  'shipped',
  'delivered',
  'completed',
])
export const enum_orders_fulfillment_carrier = pgEnum('enum_orders_fulfillment_carrier', [
  'ups',
  'fedex',
  'usps',
  'dhl',
  'other',
])
export const enum_pages_hero_links_link_type = pgEnum('enum_pages_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_pages_hero_links_link_appearance = pgEnum(
  'enum_pages_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
)
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  'enum__pages_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_organizations_members_role = pgEnum('enum_organizations_members_role', [
  'org_admin',
  'location_manager',
  'provider',
  'staff',
  'viewer',
])
export const enum_organizations_members_access_level = pgEnum(
  'enum_organizations_members_access_level',
  ['full', 'limited', 'readonly'],
)
export const enum_organizations_ops_settings_hours_schedule_day_of_week = pgEnum(
  'enum_organizations_ops_settings_hours_schedule_day_of_week',
  ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
)
export const enum_organizations_integration_websites_purpose = pgEnum(
  'enum_organizations_integration_websites_purpose',
  ['main', 'booking', 'directory', 'patient_portal', 'mobile', 'admin'],
)
export const enum_organizations_organization_type = pgEnum('enum_organizations_organization_type', [
  'medical_network',
  'franchise_system',
  'mobile_service',
  'multi_location',
  'service_marketplace',
  'professional_services',
])
export const enum_organizations_crm_integration_crm_type = pgEnum(
  'enum_organizations_crm_integration_crm_type',
  ['epic', 'salesforce', 'hubspot', 'custom', 'other'],
)
export const enum_organizations_crm_integration_sync_schedule = pgEnum(
  'enum_organizations_crm_integration_sync_schedule',
  ['realtime', 'hourly', 'daily', 'weekly', 'manual'],
)
export const enum_organizations_crm_integration_sync_status = pgEnum(
  'enum_organizations_crm_integration_sync_status',
  ['success', 'warning', 'error', 'never'],
)
export const enum_organizations_analytics_frequency = pgEnum(
  'enum_organizations_analytics_frequency',
  ['realtime', 'daily', 'weekly', 'monthly'],
)
export const enum_organizations_status = pgEnum('enum_organizations_status', [
  'active',
  'inactive',
  'suspended',
  'pending',
])
export const enum_venues_business_hours_schedule_day_of_week = pgEnum(
  'enum_venues_business_hours_schedule_day_of_week',
  ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
)
export const enum_venues_staff_schedule_availability_day_of_week = pgEnum(
  'enum_venues_staff_schedule_availability_day_of_week',
  ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
)
export const enum_venues_staff_role = pgEnum('enum_venues_staff_role', [
  'venue_manager',
  'car_audio_installer',
  'beauty_technician',
  'barber_stylist',
  'auto_mechanic',
  'medical_provider',
  'nurse',
  'admin_staff',
  'technician',
  'service_provider',
  'sales_rep',
  'customer_service',
])
export const enum_venues_services_service_type = pgEnum('enum_venues_services_service_type', [
  'standard_install',
  'custom_install',
  'quote_consultation',
  'mobile_service',
  'beauty_service',
  'barber_service',
  'auto_repair',
  'diagnostic',
  'general_service',
])
export const enum_venues_bay_management_bays_bay_type = pgEnum(
  'enum_venues_bay_management_bays_bay_type',
  [
    'install_bay',
    'service_bay',
    'beauty_chair',
    'barber_chair',
    'wash_station',
    'diagnostic_station',
    'general_workstation',
  ],
)
export const enum_venues_integrations_payment_methods_type = pgEnum(
  'enum_venues_integrations_payment_methods_type',
  ['credit_card', 'debit_card', 'ach', 'cash', 'check', 'insurance'],
)
export const enum_venues_venue_type = pgEnum('enum_venues_venue_type', [
  'car_audio_shop',
  'beauty_shop',
  'barber_shop',
  'auto_shop',
  'medical_practice',
  'franchise_location',
  'service_territory',
  'mobile_route',
  'corporate_office',
  'warehouse',
  'retail',
  'virtual',
])
export const enum_venues_integrations_booking_system_booking_system_type = pgEnum(
  'enum_venues_integrations_booking_system_booking_system_type',
  ['internal', 'epic', 'inquicker', 'acuity', 'calendly', 'custom'],
)
export const enum_venues_status = pgEnum('enum_venues_status', [
  'active',
  'inactive',
  'temp_closed',
  'under_construction',
  'pending',
  'suspended',
])
export const enum_business_agents_ops_hours_schedule_day = pgEnum(
  'enum_business_agents_ops_hours_schedule_day',
  ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
)
export const enum_business_agents_ops_handoff_triggers_trigger = pgEnum(
  'enum_business_agents_ops_handoff_triggers_trigger',
  [
    'human_request',
    'technical_issue',
    'complaint',
    'custom_order',
    'price_negotiation',
    'after_hours',
  ],
)
export const enum_business_agents_humanitarian_legal_databases = pgEnum(
  'enum_business_agents_humanitarian_legal_databases',
  ['court_records', 'precedents', 'appeals', 'innocence', 'reform'],
)
export const enum_business_agents_humanitarian_news_curation_content_filters = pgEnum(
  'enum_business_agents_humanitarian_news_curation_content_filters',
  ['legal_reform', 'success_stories', 'educational', 'mental_health', 'family', 'employment'],
)
export const enum_business_agents_humanitarian_resources_vendors_type = pgEnum(
  'enum_business_agents_humanitarian_resources_vendors_type',
  ['books', 'education', 'legal', 'care', 'communication'],
)
export const enum_business_agents_humanitarian_avatar_scope = pgEnum(
  'enum_business_agents_humanitarian_avatar_scope',
  ['family', 'legal', 'education', 'social', 'employment', 'housing'],
)
export const enum_business_agents_vapi_integration_allowed_actions = pgEnum(
  'enum_business_agents_vapi_integration_allowed_actions',
  [
    'book_appointments',
    'take_orders',
    'answer_questions',
    'transfer_human',
    'schedule_callbacks',
    'collect_leads',
  ],
)
export const enum_business_agents_spirit_type = pgEnum('enum_business_agents_spirit_type', [
  'primary',
  'service',
  'product',
  'creative',
  'community',
  'support',
])
export const enum_business_agents_personality_communication_style = pgEnum(
  'enum_business_agents_personality_communication_style',
  ['professional', 'friendly', 'nurturing', 'energetic', 'wise', 'creative', 'direct'],
)
export const enum_business_agents_ai_style_formality = pgEnum(
  'enum_business_agents_ai_style_formality',
  ['very_casual', 'casual', 'semi_formal', 'formal', 'very_formal'],
)
export const enum_business_agents_agent_type = pgEnum('enum_business_agents_agent_type', [
  'business',
  'customer_service',
  'sales',
  'content',
  'community',
  'legal_advocate',
  'incarcerated_angel',
  'displaced_support',
  'crisis',
  'guardian',
])
export const enum_business_agents_humanitarian_news_curation_positivity_bias = pgEnum(
  'enum_business_agents_humanitarian_news_curation_positivity_bias',
  ['balanced', 'hopeful', 'solutions', 'inspiring'],
)
export const enum_business_agents_vapi_integration_voice_id = pgEnum(
  'enum_business_agents_vapi_integration_voice_id',
  ['pNInz6obpgDQGcFmaJgB', 'EXAVITQu4vr4xnSDxMaL', 'ErXwobaYiN019PkySvjV', 'VR6AewLTigWG4xSOukaG'],
)
export const enum_business_agents_vapi_integration_status = pgEnum(
  'enum_business_agents_vapi_integration_status',
  ['active', 'inactive', 'acquiring', 'error'],
)
export const enum_humanitarian_agents_legal_advocacy_legal_databases = pgEnum(
  'enum_humanitarian_agents_legal_advocacy_legal_databases',
  ['court_records', 'appeals', 'innocence', 'legal_aid'],
)
export const enum_humanitarian_agents_spirit_type = pgEnum('enum_humanitarian_agents_spirit_type', [
  'incarcerated_angel',
  'displaced_support',
  'legal_advocate',
  'crisis',
  'guardian',
])
export const enum_humanitarian_agents_news_curation_hope_bias = pgEnum(
  'enum_humanitarian_agents_news_curation_hope_bias',
  ['maximum_hope', 'balanced_hope', 'solutions'],
)
export const enum_ai_generation_queue_parameters_text_elements_emphasis = pgEnum(
  'enum_ai_generation_queue_parameters_text_elements_emphasis',
  ['primary', 'secondary', 'accent'],
)
export const enum_ai_generation_queue_generation_type = pgEnum(
  'enum_ai_generation_queue_generation_type',
  ['merchandise_design', 'social_content', 'product_description', 'blog_post', 'marketing_copy'],
)
export const enum_ai_generation_queue_parameters_product_type = pgEnum(
  'enum_ai_generation_queue_parameters_product_type',
  ['coffee_mug', 't_shirt', 'sticker_pack', 'poster', 'hoodie', 'phone_case'],
)
export const enum_ai_generation_queue_parameters_style_guide = pgEnum(
  'enum_ai_generation_queue_parameters_style_guide',
  ['modern', 'vintage', 'bold', 'minimalist', 'handdrawn'],
)
export const enum_ai_generation_queue_status = pgEnum('enum_ai_generation_queue_status', [
  'queued',
  'processing',
  'completed',
  'failed',
  'cancelled',
])
export const enum_ai_generation_queue_approval_status = pgEnum(
  'enum_ai_generation_queue_approval_status',
  ['pending', 'approved', 'revision', 'rejected'],
)
export const enum_job_queue_status = pgEnum('enum_job_queue_status', [
  'pending',
  'processing',
  'completed',
  'failed',
])
export const enum_channels_channel_type = pgEnum('enum_channels_channel_type', [
  'photo_analysis',
  'document_processing',
  'data_collection',
  'monitoring',
  'intelligence_gathering',
  'economic_analysis',
])
export const enum_channels_report_type = pgEnum('enum_channels_report_type', [
  'mileage_log',
  'collection_inventory',
  'business_inventory',
  'equipment_status',
  'asset_tracking',
  'quality_control',
  'maintenance_log',
  'customer_interaction',
  'general',
])
export const enum_channels_feed_configuration_feed_source = pgEnum(
  'enum_channels_feed_configuration_feed_source',
  [
    'google_photos',
    'google_drive',
    'onedrive',
    'dropbox',
    'amazon_s3',
    'manual_upload',
    'api_webhook',
  ],
)
export const enum_channels_economics_phyle_affiliation = pgEnum(
  'enum_channels_economics_phyle_affiliation',
  [
    'collector_phyle',
    'logistics_phyle',
    'analyst_phyle',
    'maintenance_phyle',
    'quality_phyle',
    'customer_service_phyle',
    'independent_agent',
  ],
)
export const enum_channels_economics_model_sharing = pgEnum(
  'enum_channels_economics_model_sharing',
  ['fixed_fee', 'percentage_split', 'performance_based', 'subscription', 'phyle_collective'],
)
export const enum_channels_processing_rules_output_format = pgEnum(
  'enum_channels_processing_rules_output_format',
  ['json', 'csv', 'pdf', 'excel'],
)
export const enum_channels_status = pgEnum('enum_channels_status', [
  'active',
  'paused',
  'maintenance',
  'deprecated',
])
export const enum_phyles_membership_criteria_skill_requirements_level = pgEnum(
  'enum_phyles_membership_criteria_skill_requirements_level',
  ['beginner', 'intermediate', 'advanced', 'expert'],
)
export const enum_phyles_inter_phyle_relations_alliances_alliance_type = pgEnum(
  'enum_phyles_inter_phyle_relations_alliances_alliance_type',
  [
    'trade_partnership',
    'service_exchange',
    'information_sharing',
    'mutual_defense',
    'research_collaboration',
  ],
)
export const enum_phyles_phyle_type = pgEnum('enum_phyles_phyle_type', [
  'collector_phyle',
  'logistics_phyle',
  'analyst_phyle',
  'maintenance_phyle',
  'quality_phyle',
  'customer_service_phyle',
  'research_phyle',
  'security_phyle',
])
export const enum_phyles_economic_structure_taxation_model = pgEnum(
  'enum_phyles_economic_structure_taxation_model',
  ['flat_fee', 'percentage_tax', 'progressive_tax', 'contribution_based', 'collective_ownership'],
)
export const enum_phyles_economic_structure_wealth_distribution = pgEnum(
  'enum_phyles_economic_structure_wealth_distribution',
  [
    'merit_based',
    'equal_distribution',
    'rank_hierarchy',
    'contribution_weighted',
    'reputation_weighted',
  ],
)
export const enum_phyles_governance_governance_model = pgEnum(
  'enum_phyles_governance_governance_model',
  ['democratic', 'meritocratic', 'hierarchical', 'consensus', 'algorithmic'],
)
export const enum_phyles_status = pgEnum('enum_phyles_status', [
  'active',
  'forming',
  'restructuring',
  'dormant',
  'dissolved',
])
export const enum_agent_reputation_reputation_history_event_type = pgEnum(
  'enum_agent_reputation_reputation_history_event_type',
  [
    'quality_work',
    'fast_completion',
    'customer_satisfaction',
    'peer_recognition',
    'leadership',
    'innovation',
    'reliability',
    'collaboration',
  ],
)
export const enum_agent_reputation_achievements_achievement = pgEnum(
  'enum_agent_reputation_achievements_achievement',
  [
    'first_task',
    'hundred_tasks',
    'thousand_tasks',
    'perfect_week',
    'speed_demon',
    'customer_favorite',
    'mentor',
    'innovator',
    'phyle_champion',
  ],
)
export const enum_agent_reputation_specializations_proficiency_level = pgEnum(
  'enum_agent_reputation_specializations_proficiency_level',
  ['beginner', 'intermediate', 'advanced', 'expert'],
)
export const enum_agent_reputation_rank = pgEnum('enum_agent_reputation_rank', [
  'legendary',
  'master',
  'expert',
  'professional',
  'competent',
  'apprentice',
  'novice',
  'beginner',
])
export const enum_agent_reputation_status = pgEnum('enum_agent_reputation_status', [
  'active',
  'inactive',
  'probation',
  'suspended',
  'retired',
])
export const enum_inventory_messages_message_type = pgEnum('enum_inventory_messages_message_type', [
  'mileage_log',
  'collection_inventory',
  'business_inventory',
  'equipment_status',
  'asset_tracking',
  'quality_control',
  'maintenance_log',
  'customer_interaction',
  'general',
])
export const enum_inventory_messages_status = pgEnum('enum_inventory_messages_status', [
  'pending',
  'processed',
  'verified',
  'archived',
])
export const enum_inventory_messages_priority = pgEnum('enum_inventory_messages_priority', [
  'low',
  'normal',
  'high',
  'critical',
])
export const enum_photo_analysis_sequence_type = pgEnum('enum_photo_analysis_sequence_type', [
  'mileage_log',
  'collection_inventory',
  'business_inventory',
  'general',
])
export const enum_mileage_logs_type = pgEnum('enum_mileage_logs_type', ['business', 'personal'])
export const enum_quote_requests_service_type = pgEnum('enum_quote_requests_service_type', [
  'junk_removal',
  'handyman',
  'cleaning',
  'moving',
  'other',
])
export const enum_quote_requests_status = pgEnum('enum_quote_requests_status', [
  'pending',
  'quoted',
  'accepted',
  'declined',
  'expired',
])
export const enum_quote_requests_priority = pgEnum('enum_quote_requests_priority', [
  'low',
  'normal',
  'high',
  'urgent',
])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])

export const tenants: any = pgTable(
  'tenants',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    slug: varchar('slug').notNull(),
    domain: varchar('domain'),
    subdomain: varchar('subdomain'),
    businessType: enum_tenants_business_type('business_type').notNull().default('other'),
    revenueSharing_setupFee: numeric('revenue_sharing_setup_fee').default('299'),
    revenueSharing_revenueShareRate: numeric('revenue_sharing_revenue_share_rate').default('3'),
    revenueSharing_partnershipTier: enum_tenants_revenue_sharing_partnership_tier(
      'revenue_sharing_partnership_tier',
    ).default('standard'),
    revenueSharing_negotiatedTerms: varchar('revenue_sharing_negotiated_terms'),
    revenueSharing_minimumMonthlyRevenue: numeric('revenue_sharing_minimum_monthly_revenue'),
    revenueSharing_volumeDiscounts: jsonb('revenue_sharing_volume_discounts'),
    referralProgram_referredBy: integer('referral_program_referred_by_id').references(
      () => users.id,
      {
        onDelete: 'set null',
      },
    ),
    referralProgram_referralCode: varchar('referral_program_referral_code'),
    referralProgram_referralCommissionRate: numeric(
      'referral_program_referral_commission_rate',
    ).default('30'),
    referralProgram_referralTerms: enum_tenants_referral_program_referral_terms(
      'referral_program_referral_terms',
    ).default('lifetime'),
    referralProgram_referralStatus: enum_tenants_referral_program_referral_status(
      'referral_program_referral_status',
    ).default('active'),
    revenueTracking_monthlyRevenue: numeric('revenue_tracking_monthly_revenue'),
    revenueTracking_totalRevenue: numeric('revenue_tracking_total_revenue'),
    revenueTracking_lastRevenueCalculation: timestamp('revenue_tracking_last_revenue_calculation', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    revenueTracking_commissionsPaid: numeric('revenue_tracking_commissions_paid'),
    revenueTracking_currentEffectiveRate: numeric('revenue_tracking_current_effective_rate'),
    status: enum_tenants_status('status').notNull().default('setup'),
    configuration_primaryColor: varchar('configuration_primary_color').default('#3b82f6'),
    configuration_logo: integer('configuration_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    configuration_favicon: integer('configuration_favicon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    configuration_contactEmail: varchar('configuration_contact_email'),
    configuration_contactPhone: varchar('configuration_contact_phone'),
    configuration_address_street: varchar('configuration_address_street'),
    configuration_address_city: varchar('configuration_address_city'),
    configuration_address_state: varchar('configuration_address_state'),
    configuration_address_zipCode: varchar('configuration_address_zip_code'),
    configuration_address_country: varchar('configuration_address_country').default('US'),
    features_ecommerce: boolean('features_ecommerce').default(true),
    features_spaces: boolean('features_spaces').default(true),
    features_crm: boolean('features_crm').default(true),
    features_vapi: boolean('features_vapi').default(false),
    features_n8n: boolean('features_n8n').default(false),
    features_memberPortal: boolean('features_member_portal').default(false),
    limits_maxUsers: numeric('limits_max_users').default('10'),
    limits_maxProducts: numeric('limits_max_products').default('100'),
    limits_maxStorage: numeric('limits_max_storage').default('1000'),
    jsonData: jsonb('json_data'),
    _migrationStatus_jsonMigrated: boolean('_migrationstatus_json_migrated').default(false),
    _migrationStatus_migratedAt: timestamp('_migrationstatus_migrated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    _migrationStatus_migrationVersion: varchar('_migrationstatus_migration_version'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tenants_slug_idx: uniqueIndex('tenants_slug_idx').on(columns.slug),
    tenants_referral_program_referral_program_referred_by_idx: index(
      'tenants_referral_program_referral_program_referred_by_idx',
    ).on(columns.referralProgram_referredBy),
    tenants_configuration_configuration_logo_idx: index(
      'tenants_configuration_configuration_logo_idx',
    ).on(columns.configuration_logo),
    tenants_configuration_configuration_favicon_idx: index(
      'tenants_configuration_configuration_favicon_idx',
    ).on(columns.configuration_favicon),
    tenants_updated_at_idx: index('tenants_updated_at_idx').on(columns.updatedAt),
    tenants_created_at_idx: index('tenants_created_at_idx').on(columns.createdAt),
  }),
)

export const users_roles = pgTable(
  'users_roles',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_users_roles('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_roles_order_idx').on(columns.order),
    parentIdx: index('users_roles_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_roles_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const users_karma_contribution_types = pgTable(
  'users_karma_contribution_types',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_users_karma_contribution_types('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_karma_contribution_types_order_idx').on(columns.order),
    parentIdx: index('users_karma_contribution_types_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_karma_contribution_types_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const users_karma_recognitions = pgTable(
  'users_karma_recognitions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_users_karma_recognitions_type('type').notNull(),
    points: numeric('points').notNull(),
    reason: varchar('reason'),
    awardedBy: integer('awarded_by_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    awardedAt: timestamp('awarded_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('users_karma_recognitions_order_idx').on(columns._order),
    _parentIDIdx: index('users_karma_recognitions_parent_id_idx').on(columns._parentID),
    users_karma_recognitions_awarded_by_idx: index('users_karma_recognitions_awarded_by_idx').on(
      columns.awardedBy,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_karma_recognitions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users: any = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    profileImage: integer('profile_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    karma_score: numeric('karma_score').default('0'),
    karma_guardianAngelStatus: boolean('karma_guardian_angel_status').default(false),
    tenantMemberships: jsonb('tenant_memberships'),
    preferences_notifications_email: boolean('preferences_notifications_email').default(true),
    preferences_notifications_inApp: boolean('preferences_notifications_in_app').default(true),
    preferences_notifications_guardianAngelAlerts: boolean(
      'preferences_notifications_guardian_angel_alerts',
    ).default(false),
    preferences_privacy_profileVisibility: enum_users_preferences_privacy_profile_visibility(
      'preferences_privacy_profile_visibility',
    ).default('members'),
    preferences_privacy_karmaScoreVisible: boolean(
      'preferences_privacy_karma_score_visible',
    ).default(true),
    lastLoginAt: timestamp('last_login_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    _verified: boolean('_verified'),
    _verificationToken: varchar('_verificationtoken'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_profile_image_idx: index('users_profile_image_idx').on(columns.profileImage),
    users_tenant_idx: index('users_tenant_idx').on(columns.tenant),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const workflows_steps = pgTable(
  'workflows_steps',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    type: enum_workflows_steps_type('type').notNull(),
    config: jsonb('config').notNull(),
    targetCollection: enum_workflows_steps_target_collection('target_collection'),
    automation: enum_workflows_steps_automation('automation').notNull().default('human_review'),
    aiAssisted: boolean('ai_assisted').default(false),
    retryConfig_maxRetries: numeric('retry_config_max_retries').default('3'),
    retryConfig_retryDelay: numeric('retry_config_retry_delay').default('300'),
    order: numeric('order').notNull(),
  },
  (columns) => ({
    _orderIdx: index('workflows_steps_order_idx').on(columns._order),
    _parentIDIdx: index('workflows_steps_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [workflows.id],
      name: 'workflows_steps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const workflows_ethical_framework_bias_checkpoints = pgTable(
  'workflows_ethical_framework_bias_checkpoints',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    checkpoint: varchar('checkpoint').notNull(),
    stepNumber: numeric('step_number').notNull(),
  },
  (columns) => ({
    _orderIdx: index('workflows_ethical_framework_bias_checkpoints_order_idx').on(columns._order),
    _parentIDIdx: index('workflows_ethical_framework_bias_checkpoints_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [workflows.id],
      name: 'workflows_ethical_framework_bias_checkpoints_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const workflows_ethical_framework_value_alignment = pgTable(
  'workflows_ethical_framework_value_alignment',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_workflows_ethical_framework_value_alignment('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('workflows_ethical_framework_value_alignment_order_idx').on(columns.order),
    parentIdx: index('workflows_ethical_framework_value_alignment_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [workflows.id],
      name: 'workflows_ethical_framework_value_alignment_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const workflows_change_log = pgTable(
  'workflows_change_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    version: numeric('version').notNull(),
    changes: varchar('changes').notNull(),
    changedBy: integer('changed_by_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    changedAt: timestamp('changed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('workflows_change_log_order_idx').on(columns._order),
    _parentIDIdx: index('workflows_change_log_parent_id_idx').on(columns._parentID),
    workflows_change_log_changed_by_idx: index('workflows_change_log_changed_by_idx').on(
      columns.changedBy,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [workflows.id],
      name: 'workflows_change_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const workflows = pgTable(
  'workflows',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    status: enum_workflows_status('status').notNull().default('draft'),
    trigger_collection: enum_workflows_trigger_collection('trigger_collection').notNull(),
    trigger_event: enum_workflows_trigger_event('trigger_event').notNull(),
    trigger_conditions: jsonb('trigger_conditions'),
    trigger_customEventName: varchar('trigger_custom_event_name'),
    businessContext_department: enum_workflows_business_context_department(
      'business_context_department',
    ),
    businessContext_process: enum_workflows_business_context_process('business_context_process'),
    businessContext_priority: enum_workflows_business_context_priority('business_context_priority')
      .notNull()
      .default('normal'),
    ethicalFramework_humanApprovalRequired: boolean(
      'ethical_framework_human_approval_required',
    ).default(false),
    ethicalFramework_guardianAngelTrigger: boolean(
      'ethical_framework_guardian_angel_trigger',
    ).default(false),
    performance_executionCount: numeric('performance_execution_count').default('0'),
    performance_successCount: numeric('performance_success_count').default('0'),
    performance_failureCount: numeric('performance_failure_count').default('0'),
    performance_averageExecutionTime: numeric('performance_average_execution_time').default('0'),
    performance_lastExecutedAt: timestamp('performance_last_executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    notifications_notifyOnSuccess: boolean('notifications_notify_on_success').default(false),
    notifications_notifyOnFailure: boolean('notifications_notify_on_failure').default(true),
    notifications_slackWebhook: varchar('notifications_slack_webhook'),
    scheduling_isScheduled: boolean('scheduling_is_scheduled').default(false),
    scheduling_cronExpression: varchar('scheduling_cron_expression'),
    scheduling_timezone: enum_workflows_scheduling_timezone('scheduling_timezone').default('UTC'),
    version: numeric('version').default('1'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    workflows_tenant_idx: index('workflows_tenant_idx').on(columns.tenant),
    workflows_updated_at_idx: index('workflows_updated_at_idx').on(columns.updatedAt),
    workflows_created_at_idx: index('workflows_created_at_idx').on(columns.createdAt),
  }),
)

export const workflows_rels = pgTable(
  'workflows_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('workflows_rels_order_idx').on(columns.order),
    parentIdx: index('workflows_rels_parent_idx').on(columns.parent),
    pathIdx: index('workflows_rels_path_idx').on(columns.path),
    workflows_rels_users_id_idx: index('workflows_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [workflows.id],
      name: 'workflows_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'workflows_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const tenant_memberships_permissions = pgTable(
  'tenant_memberships_permissions',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_tenant_memberships_permissions('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('tenant_memberships_permissions_order_idx').on(columns.order),
    parentIdx: index('tenant_memberships_permissions_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [tenant_memberships.id],
      name: 'tenant_memberships_permissions_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const tenant_memberships = pgTable(
  'tenant_memberships',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    role: enum_tenant_memberships_role('role').notNull().default('tenant_member'),
    joinedAt: timestamp('joined_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    invitedBy: integer('invited_by_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    status: enum_tenant_memberships_status('status').notNull().default('pending'),
    tenantProfile_displayName: varchar('tenant_profile_display_name'),
    tenantProfile_tenantBio: varchar('tenant_profile_tenant_bio'),
    tenantProfile_department: varchar('tenant_profile_department'),
    tenantProfile_position: varchar('tenant_profile_position'),
    invitationDetails_invitationToken: varchar('invitation_details_invitation_token'),
    invitationDetails_invitationExpiresAt: timestamp('invitation_details_invitation_expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    invitationDetails_invitationMessage: varchar('invitation_details_invitation_message'),
    lastActiveAt: timestamp('last_active_at', { mode: 'string', withTimezone: true, precision: 3 }),
    activityMetrics_loginCount: numeric('activity_metrics_login_count').default('0'),
    activityMetrics_spacesJoined: numeric('activity_metrics_spaces_joined').default('0'),
    activityMetrics_contentCreated: numeric('activity_metrics_content_created').default('0'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tenant_memberships_user_idx: index('tenant_memberships_user_idx').on(columns.user),
    tenant_memberships_tenant_idx: index('tenant_memberships_tenant_idx').on(columns.tenant),
    tenant_memberships_invited_by_idx: index('tenant_memberships_invited_by_idx').on(
      columns.invitedBy,
    ),
    tenant_memberships_updated_at_idx: index('tenant_memberships_updated_at_idx').on(
      columns.updatedAt,
    ),
    tenant_memberships_created_at_idx: index('tenant_memberships_created_at_idx').on(
      columns.createdAt,
    ),
    user_tenant_idx: uniqueIndex('user_tenant_idx').on(columns.user, columns.tenant),
    tenant_role_idx: index('tenant_role_idx').on(columns.tenant, columns.role),
    status_idx: index('status_idx').on(columns.status),
  }),
)

export const space_memberships_custom_permissions = pgTable(
  'space_memberships_custom_permissions',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_space_memberships_custom_permissions('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('space_memberships_custom_permissions_order_idx').on(columns.order),
    parentIdx: index('space_memberships_custom_permissions_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [space_memberships.id],
      name: 'space_memberships_custom_permissions_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const space_memberships_crm_data_conversion_events = pgTable(
  'space_memberships_crm_data_conversion_events',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    event: varchar('event').notNull(),
    timestamp: timestamp('timestamp', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    value: numeric('value'),
  },
  (columns) => ({
    _orderIdx: index('space_memberships_crm_data_conversion_events_order_idx').on(columns._order),
    _parentIDIdx: index('space_memberships_crm_data_conversion_events_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [space_memberships.id],
      name: 'space_memberships_crm_data_conversion_events_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const space_memberships = pgTable(
  'space_memberships',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    tenantMembership: integer('tenant_membership_id').references(() => tenant_memberships.id, {
      onDelete: 'set null',
    }),
    role: enum_space_memberships_role('role').notNull().default('member'),
    status: enum_space_memberships_status('status').notNull().default('pending'),
    joinedAt: timestamp('joined_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    crmData_leadScore: numeric('crm_data_lead_score'),
    crmData_customerTier: enum_space_memberships_crm_data_customer_tier('crm_data_customer_tier'),
    crmData_notes: varchar('crm_data_notes'),
    crmData_lastInteraction: timestamp('crm_data_last_interaction', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    engagementMetrics_messagesCount: numeric('engagement_metrics_messages_count').default('0'),
    engagementMetrics_lastActive: timestamp('engagement_metrics_last_active', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    engagementMetrics_totalTimeSpent: numeric('engagement_metrics_total_time_spent').default('0'),
    engagementMetrics_contentCreated: numeric('engagement_metrics_content_created').default('0'),
    engagementMetrics_eventsAttended: numeric('engagement_metrics_events_attended').default('0'),
    engagementMetrics_engagementScore: numeric('engagement_metrics_engagement_score'),
    notificationSettings_mentions: boolean('notification_settings_mentions').default(true),
    notificationSettings_directMessages: boolean('notification_settings_direct_messages').default(
      true,
    ),
    notificationSettings_announcements: boolean('notification_settings_announcements').default(
      true,
    ),
    notificationSettings_events: boolean('notification_settings_events').default(true),
    spaceProfile_displayName: varchar('space_profile_display_name'),
    spaceProfile_spaceBio: varchar('space_profile_space_bio'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    space_memberships_user_idx: index('space_memberships_user_idx').on(columns.user),
    space_memberships_space_idx: index('space_memberships_space_idx').on(columns.space),
    space_memberships_tenant_membership_idx: index('space_memberships_tenant_membership_idx').on(
      columns.tenantMembership,
    ),
    space_memberships_updated_at_idx: index('space_memberships_updated_at_idx').on(
      columns.updatedAt,
    ),
    space_memberships_created_at_idx: index('space_memberships_created_at_idx').on(
      columns.createdAt,
    ),
    user_space_idx: uniqueIndex('user_space_idx').on(columns.user, columns.space),
    space_role_idx: index('space_role_idx').on(columns.space, columns.role),
    status_1_idx: index('status_1_idx').on(columns.status),
  }),
)

export const space_memberships_texts = pgTable(
  'space_memberships_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('space_memberships_texts_order_parent_idx').on(
      columns.order,
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [space_memberships.id],
      name: 'space_memberships_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const appointments_reminders_sent = pgTable(
  'appointments_reminders_sent',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    sentAt: timestamp('sent_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('appointments_reminders_sent_order_idx').on(columns._order),
    _parentIDIdx: index('appointments_reminders_sent_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [appointments.id],
      name: 'appointments_reminders_sent_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const appointments = pgTable(
  'appointments',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    organizer: integer('organizer_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    space: integer('space_id').references(() => spaces.id, {
      onDelete: 'set null',
    }),
    venue: integer('venue_id').references(() => venues.id, {
      onDelete: 'set null',
    }),
    bayAssignment_assignedBay: varchar('bay_assignment_assigned_bay'),
    bayAssignment_bayRequired: boolean('bay_assignment_bay_required').default(false),
    bayAssignment_canFloatBays: boolean('bay_assignment_can_float_bays').default(true),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    startTime: timestamp('start_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    endTime: timestamp('end_time', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    timezone: enum_appointments_timezone('timezone').notNull().default('America/New_York'),
    recurrence_enabled: boolean('recurrence_enabled').default(false),
    recurrence_type: enum_appointments_recurrence_type('recurrence_type'),
    recurrence_interval: numeric('recurrence_interval').default('1'),
    recurrence_endDate: timestamp('recurrence_end_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    location: varchar('location'),
    meetingLink: varchar('meeting_link'),
    meetingType: enum_appointments_meeting_type('meeting_type').notNull().default('video_call'),
    appointmentType: enum_appointments_appointment_type('appointment_type')
      .notNull()
      .default('general_meeting'),
    bookingSettings_allowRescheduling: boolean('booking_settings_allow_rescheduling').default(true),
    bookingSettings_allowCancellation: boolean('booking_settings_allow_cancellation').default(true),
    bookingSettings_requireConfirmation: boolean('booking_settings_require_confirmation').default(
      false,
    ),
    bookingSettings_bufferTime: numeric('booking_settings_buffer_time').default('15'),
    bookingSettings_maxAttendees: numeric('booking_settings_max_attendees'),
    status: enum_appointments_status('status').notNull().default('scheduled'),
    notes: varchar('notes'),
    calendarEventId: varchar('calendar_event_id'),
    revenueTracking_source: enum_appointments_revenue_tracking_source('revenue_tracking_source')
      .notNull()
      .default('system_generated'),
    revenueTracking_commissionRate: numeric('revenue_tracking_commission_rate'),
    revenueTracking_commissionAmount: numeric('revenue_tracking_commission_amount'),
    payment_required: boolean('payment_required').default(false),
    payment_amount: numeric('payment_amount'),
    payment_currency: enum_appointments_payment_currency('payment_currency').default('usd'),
    payment_stripePaymentIntentId: varchar('payment_stripe_payment_intent_id'),
    payment_paymentStatus: enum_appointments_payment_payment_status('payment_payment_status'),
    feedback_organizerRating: numeric('feedback_organizer_rating'),
    feedback_attendeeRating: numeric('feedback_attendee_rating'),
    feedback_organizerNotes: varchar('feedback_organizer_notes'),
    feedback_followUpRequired: boolean('feedback_follow_up_required').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    appointments_organizer_idx: index('appointments_organizer_idx').on(columns.organizer),
    appointments_space_idx: index('appointments_space_idx').on(columns.space),
    appointments_venue_idx: index('appointments_venue_idx').on(columns.venue),
    appointments_tenant_idx: index('appointments_tenant_idx').on(columns.tenant),
    appointments_updated_at_idx: index('appointments_updated_at_idx').on(columns.updatedAt),
    appointments_created_at_idx: index('appointments_created_at_idx').on(columns.createdAt),
    tenant_organizer_idx: index('tenant_organizer_idx').on(columns.tenant, columns.organizer),
    tenant_startTime_idx: index('tenant_startTime_idx').on(columns.tenant, columns.startTime),
    status_2_idx: index('status_2_idx').on(columns.status),
    startTime_idx: index('startTime_idx').on(columns.startTime),
    space_idx: index('space_idx').on(columns.space),
  }),
)

export const appointments_rels = pgTable(
  'appointments_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('appointments_rels_order_idx').on(columns.order),
    parentIdx: index('appointments_rels_parent_idx').on(columns.parent),
    pathIdx: index('appointments_rels_path_idx').on(columns.path),
    appointments_rels_users_id_idx: index('appointments_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [appointments.id],
      name: 'appointments_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'appointments_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const contacts_addresses = pgTable(
  'contacts_addresses',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_contacts_addresses_type('type').notNull().default('billing'),
    street: varchar('street').notNull(),
    street2: varchar('street2'),
    city: varchar('city').notNull(),
    state: varchar('state').notNull(),
    zipCode: varchar('zip_code').notNull(),
    country: enum_contacts_addresses_country('country').notNull().default('US'),
    isDefault: boolean('is_default').default(false),
  },
  (columns) => ({
    _orderIdx: index('contacts_addresses_order_idx').on(columns._order),
    _parentIDIdx: index('contacts_addresses_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [contacts.id],
      name: 'contacts_addresses_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const contacts = pgTable(
  'contacts',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    firstName: varchar('first_name'),
    lastName: varchar('last_name'),
    displayName: varchar('display_name'),
    phone: varchar('phone'),
    company: varchar('company'),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    type: enum_contacts_type('type').notNull().default('customer'),
    preferences_allowEmail: boolean('preferences_allow_email').default(true),
    preferences_allowSMS: boolean('preferences_allow_s_m_s').default(false),
    preferences_allowCalls: boolean('preferences_allow_calls').default(true),
    preferences_preferredContactTime: enum_contacts_preferences_preferred_contact_time(
      'preferences_preferred_contact_time',
    ).default('anytime'),
    crm_status: enum_contacts_crm_status('crm_status').default('cold'),
    crm_leadScore: numeric('crm_lead_score').default('0'),
    crm_source: enum_contacts_crm_source('crm_source').default('website'),
    crm_assignedTo: integer('crm_assigned_to_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    crm_dealValue: numeric('crm_deal_value'),
    activity_firstContactDate: timestamp('activity_first_contact_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    activity_lastContactDate: timestamp('activity_last_contact_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    activity_totalOrders: numeric('activity_total_orders').default('0'),
    activity_totalSpent: numeric('activity_total_spent').default('0'),
    activity_totalInteractions: numeric('activity_total_interactions').default('0'),
    customFields: jsonb('custom_fields'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    contacts_email_idx: uniqueIndex('contacts_email_idx').on(columns.email),
    contacts_tenant_idx: index('contacts_tenant_idx').on(columns.tenant),
    contacts_user_idx: index('contacts_user_idx').on(columns.user),
    contacts_crm_crm_assigned_to_idx: index('contacts_crm_crm_assigned_to_idx').on(
      columns.crm_assignedTo,
    ),
    contacts_updated_at_idx: index('contacts_updated_at_idx').on(columns.updatedAt),
    contacts_created_at_idx: index('contacts_created_at_idx').on(columns.createdAt),
    email_idx: uniqueIndex('email_idx').on(columns.email),
    tenant_type_idx: index('tenant_type_idx').on(columns.tenant, columns.type),
    tenant_crm_status_idx: index('tenant_crm_status_idx').on(columns.tenant, columns.crm_status),
  }),
)

export const contacts_texts = pgTable(
  'contacts_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('contacts_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [contacts.id],
      name: 'contacts_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const messages = pgTable(
  'messages',
  {
    id: serial('id').primaryKey(),
    content: jsonb('content').notNull(),
    conversationContext: jsonb('conversation_context'),
    businessIntelligence: jsonb('business_intelligence'),
    sender: integer('sender_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    channel: integer('channel_id').references(() => channels.id, {
      onDelete: 'set null',
    }),
    messageType: enum_messages_message_type('message_type').notNull().default('user'),
    priority: enum_messages_priority('priority').default('normal'),
    reactions: jsonb('reactions'),
    threadId: varchar('thread_id'),
    replyToId: integer('reply_to_id_id').references((): AnyPgColumn => messages.id, {
      onDelete: 'set null',
    }),
    atProtocol_type: varchar('at_protocol_type').default('co.kendev.spaces.message'),
    atProtocol_did: varchar('at_protocol_did'),
    atProtocol_uri: varchar('at_protocol_uri'),
    atProtocol_cid: varchar('at_protocol_cid'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    messages_sender_idx: index('messages_sender_idx').on(columns.sender),
    messages_space_idx: index('messages_space_idx').on(columns.space),
    messages_channel_idx: index('messages_channel_idx').on(columns.channel),
    messages_thread_id_idx: index('messages_thread_id_idx').on(columns.threadId),
    messages_reply_to_id_idx: index('messages_reply_to_id_idx').on(columns.replyToId),
    messages_updated_at_idx: index('messages_updated_at_idx').on(columns.updatedAt),
    messages_created_at_idx: index('messages_created_at_idx').on(columns.createdAt),
  }),
)

export const messages_rels = pgTable(
  'messages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('messages_rels_order_idx').on(columns.order),
    parentIdx: index('messages_rels_parent_idx').on(columns.parent),
    pathIdx: index('messages_rels_path_idx').on(columns.path),
    messages_rels_users_id_idx: index('messages_rels_users_id_idx').on(columns.usersID),
    messages_rels_media_id_idx: index('messages_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [messages.id],
      name: 'messages_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'messages_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'messages_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces_commerce_settings_payment_methods = pgTable(
  'spaces_commerce_settings_payment_methods',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_spaces_commerce_settings_payment_methods('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('spaces_commerce_settings_payment_methods_order_idx').on(columns.order),
    parentIdx: index('spaces_commerce_settings_payment_methods_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [spaces.id],
      name: 'spaces_commerce_settings_payment_methods_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces_commerce_settings_shipping_zones = pgTable(
  'spaces_commerce_settings_shipping_zones',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_spaces_commerce_settings_shipping_zones('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('spaces_commerce_settings_shipping_zones_order_idx').on(columns.order),
    parentIdx: index('spaces_commerce_settings_shipping_zones_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [spaces.id],
      name: 'spaces_commerce_settings_shipping_zones_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const sub_tiers_content_access = pgTable(
  'sub_tiers_content_access',
  {
    order: integer('order').notNull(),
    parent: varchar('parent_id').notNull(),
    value: enum_sub_tiers_content_access('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('sub_tiers_content_access_order_idx').on(columns.order),
    parentIdx: index('sub_tiers_content_access_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [sub_tiers.id],
      name: 'sub_tiers_content_access_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const sub_tiers = pgTable(
  'sub_tiers',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    description: varchar('description'),
    price: numeric('price'),
    currency: enum_sub_tiers_currency('currency').default('usd'),
    stripePriceId: varchar('stripe_price_id'),
  },
  (columns) => ({
    _orderIdx: index('sub_tiers_order_idx').on(columns._order),
    _parentIDIdx: index('sub_tiers_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [spaces.id],
      name: 'sub_tiers_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces_monetization_ai_opt_factors = pgTable(
  'spaces_monetization_ai_opt_factors',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_spaces_monetization_ai_opt_factors('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('spaces_monetization_ai_opt_factors_order_idx').on(columns.order),
    parentIdx: index('spaces_monetization_ai_opt_factors_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [spaces.id],
      name: 'spaces_monetization_ai_opt_factors_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces_integrations_print_partners_product_catalog = pgTable(
  'spaces_integrations_print_partners_product_catalog',
  {
    order: integer('order').notNull(),
    parent: varchar('parent_id').notNull(),
    value: enum_spaces_integrations_print_partners_product_catalog('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('spaces_integrations_print_partners_product_catalog_order_idx').on(
      columns.order,
    ),
    parentIdx: index('spaces_integrations_print_partners_product_catalog_parent_idx').on(
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [spaces_integrations_print_partners.id],
      name: 'spaces_integrations_print_partners_product_catalog_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces_integrations_print_partners = pgTable(
  'spaces_integrations_print_partners',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    apiEndpoint: varchar('api_endpoint'),
  },
  (columns) => ({
    _orderIdx: index('spaces_integrations_print_partners_order_idx').on(columns._order),
    _parentIDIdx: index('spaces_integrations_print_partners_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [spaces.id],
      name: 'spaces_integrations_print_partners_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces_integrations_social_bots_platforms = pgTable(
  'spaces_integrations_social_bots_platforms',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_spaces_integrations_social_bots_platforms('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('spaces_integrations_social_bots_platforms_order_idx').on(columns.order),
    parentIdx: index('spaces_integrations_social_bots_platforms_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [spaces.id],
      name: 'spaces_integrations_social_bots_platforms_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces = pgTable(
  'spaces',
  {
    id: serial('id').primaryKey(),
    atProtocol_did: varchar('at_protocol_did'),
    atProtocol_handle: varchar('at_protocol_handle'),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    name: varchar('name').notNull(),
    slug: varchar('slug').notNull(),
    description: varchar('description'),
    businessIdentity_type: enum_spaces_business_identity_type('business_identity_type')
      .notNull()
      .default('business'),
    businessIdentity_industry: enum_spaces_business_identity_industry('business_identity_industry')
      .notNull()
      .default('general'),
    businessIdentity_companySize: enum_spaces_business_identity_company_size(
      'business_identity_company_size',
    ).default('small'),
    businessIdentity_targetMarket: enum_spaces_business_identity_target_market(
      'business_identity_target_market',
    ).default('local'),
    commerceSettings_enableEcommerce: boolean('commerce_settings_enable_ecommerce').default(false),
    commerceSettings_enableServices: boolean('commerce_settings_enable_services').default(false),
    commerceSettings_enableMerchandise: boolean('commerce_settings_enable_merchandise').default(
      false,
    ),
    commerceSettings_enableSubscriptions: boolean('commerce_settings_enable_subscriptions').default(
      false,
    ),
    monetization_enabled: boolean('monetization_enabled').default(false),
    monetization_donationsEnabled: boolean('monetization_donations_enabled').default(false),
    monetization_customPricing_enabled: boolean('monetization_custom_pricing_enabled').default(
      false,
    ),
    monetization_customPricing_defaultPrice: numeric('monetization_custom_pricing_default_price'),
    monetization_customPricing_minimumTip: numeric('monetization_custom_pricing_minimum_tip'),
    monetization_merchantAccount: varchar('monetization_merchant_account'),
    monetization_revenueAgreementType: rev_type('monetization_revenue_agreement_type').default(
      'standard',
    ),
    monetization_revenuePlatformFee: numeric('monetization_revenue_platform_fee').default('20'),
    monetization_revenueContractId: varchar('monetization_revenue_contract_id'),
    monetization_revenueEffectiveDate: timestamp('monetization_revenue_effective_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    monetization_revenueReviewDate: timestamp('monetization_revenue_review_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    monetization_aiOptEnabled: boolean('monetization_ai_opt_enabled').default(false),
    monetization_aiOptVersion: varchar('monetization_ai_opt_version'),
    monetization_aiOptFeeMin: numeric('monetization_ai_opt_fee_min').default('8'),
    monetization_aiOptFeeMax: numeric('monetization_ai_opt_fee_max').default('25'),
    monetization_aiOptParams: varchar('monetization_ai_opt_params'),
    monetization_revenueProcessingFee: numeric('monetization_revenue_processing_fee').default(
      '2.9',
    ),
    monetization_revenueCalculatedFee: numeric('monetization_revenue_calculated_fee'),
    integrations_youtube_channelId: varchar('integrations_youtube_channel_id'),
    integrations_youtube_apiKey: varchar('integrations_youtube_api_key'),
    integrations_youtube_autoSync: boolean('integrations_youtube_auto_sync').default(false),
    integrations_scheduling_enabled: boolean('integrations_scheduling_enabled').default(false),
    integrations_scheduling_resourceCount: numeric(
      'integrations_scheduling_resource_count',
    ).default('1'),
    integrations_scheduling_timeSlots: enum_spaces_integrations_scheduling_time_slots(
      'integrations_scheduling_time_slots',
    ).default('60'),
    integrations_socialBots_autoPost: boolean('integrations_social_bots_auto_post').default(false),
    theme_logo: integer('theme_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    theme_banner: integer('theme_banner_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    theme_primaryColor: varchar('theme_primary_color').default('#3b82f6'),
    theme_secondaryColor: varchar('theme_secondary_color'),
    theme_customCSS: varchar('theme_custom_c_s_s'),
    visibility: enum_spaces_visibility('visibility').notNull().default('invite_only'),
    memberApproval: enum_spaces_member_approval('member_approval').notNull().default('manual'),
    inviteSettings_membersCanInvite: boolean('invite_settings_members_can_invite').default(true),
    inviteSettings_requireInviteCode: boolean('invite_settings_require_invite_code').default(false),
    inviteSettings_inviteCode: varchar('invite_settings_invite_code'),
    stats_memberCount: numeric('stats_member_count').default('0'),
    stats_messageCount: numeric('stats_message_count').default('0'),
    stats_lastActivity: timestamp('stats_last_activity', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    stats_engagementScore: numeric('stats_engagement_score'),
    data: jsonb('data'),
    _migrationStatus_jsonMigrated: boolean('_migrationstatus_json_migrated').default(false),
    _migrationStatus_migratedAt: timestamp('_migrationstatus_migrated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    _migrationStatus_migrationVersion: varchar('_migrationstatus_migration_version'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    spaces_tenant_idx: index('spaces_tenant_idx').on(columns.tenant),
    spaces_theme_theme_logo_idx: index('spaces_theme_theme_logo_idx').on(columns.theme_logo),
    spaces_theme_theme_banner_idx: index('spaces_theme_theme_banner_idx').on(columns.theme_banner),
    spaces_updated_at_idx: index('spaces_updated_at_idx').on(columns.updatedAt),
    spaces_created_at_idx: index('spaces_created_at_idx').on(columns.createdAt),
  }),
)

export const spaces_texts = pgTable(
  'spaces_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('spaces_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [spaces.id],
      name: 'spaces_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const web_chat_sessions = pgTable(
  'web_chat_sessions',
  {
    id: serial('id').primaryKey(),
    sessionId: varchar('session_id').notNull(),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    visitorInfo_ipAddress: varchar('visitor_info_ip_address'),
    visitorInfo_userAgent: varchar('visitor_info_user_agent'),
    visitorInfo_referrer: varchar('visitor_info_referrer'),
    visitorInfo_pageUrl: varchar('visitor_info_page_url'),
    visitorInfo_country: varchar('visitor_info_country'),
    visitorInfo_city: varchar('visitor_info_city'),
    customer: integer('customer_id').references(() => contacts.id, {
      onDelete: 'set null',
    }),
    status: enum_web_chat_sessions_status('status').notNull().default('active'),
    assignedAgent: integer('assigned_agent_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    analytics_startTime: timestamp('analytics_start_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    analytics_endTime: timestamp('analytics_end_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    analytics_duration: numeric('analytics_duration'),
    analytics_messageCount: numeric('analytics_message_count').default('0'),
    analytics_responseTime: numeric('analytics_response_time'),
    analytics_satisfactionScore: numeric('analytics_satisfaction_score'),
    analytics_leadQualified: boolean('analytics_lead_qualified').default(false),
    analytics_appointmentBooked: boolean('analytics_appointment_booked').default(false),
    analytics_saleGenerated: numeric('analytics_sale_generated'),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    web_chat_sessions_session_id_idx: uniqueIndex('web_chat_sessions_session_id_idx').on(
      columns.sessionId,
    ),
    web_chat_sessions_space_idx: index('web_chat_sessions_space_idx').on(columns.space),
    web_chat_sessions_customer_idx: index('web_chat_sessions_customer_idx').on(columns.customer),
    web_chat_sessions_assigned_agent_idx: index('web_chat_sessions_assigned_agent_idx').on(
      columns.assignedAgent,
    ),
    web_chat_sessions_tenant_idx: index('web_chat_sessions_tenant_idx').on(columns.tenant),
    web_chat_sessions_updated_at_idx: index('web_chat_sessions_updated_at_idx').on(
      columns.updatedAt,
    ),
    web_chat_sessions_created_at_idx: index('web_chat_sessions_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const web_chat_sessions_rels = pgTable(
  'web_chat_sessions_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    messagesID: integer('messages_id'),
  },
  (columns) => ({
    order: index('web_chat_sessions_rels_order_idx').on(columns.order),
    parentIdx: index('web_chat_sessions_rels_parent_idx').on(columns.parent),
    pathIdx: index('web_chat_sessions_rels_path_idx').on(columns.path),
    web_chat_sessions_rels_messages_id_idx: index('web_chat_sessions_rels_messages_id_idx').on(
      columns.messagesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [web_chat_sessions.id],
      name: 'web_chat_sessions_rels_parent_fk',
    }).onDelete('cascade'),
    messagesIdFk: foreignKey({
      columns: [columns['messagesID']],
      foreignColumns: [messages.id],
      name: 'web_chat_sessions_rels_messages_fk',
    }).onDelete('cascade'),
  }),
)

export const channel_management = pgTable(
  'channel_management',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    channelType: enum_channel_management_channel_type('channel_type').notNull(),
    status: enum_channel_management_status('status').notNull().default('active'),
    autoAssignment: boolean('auto_assignment').default(true),
    n8nWorkflowId: varchar('n8n_workflow_id'),
    vapiEnabled: boolean('vapi_enabled').default(false),
    webChatEnabled: boolean('web_chat_enabled').default(true),
    metadata: jsonb('metadata'),
    category: enum_channel_management_category('category').default('business'),
    sortOrder: numeric('sort_order').default('0'),
    icon: varchar('icon'),
    color: enum_channel_management_color('color').default('blue'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    channel_management_space_idx: index('channel_management_space_idx').on(columns.space),
    channel_management_slug_idx: index('channel_management_slug_idx').on(columns.slug),
    channel_management_updated_at_idx: index('channel_management_updated_at_idx').on(
      columns.updatedAt,
    ),
    channel_management_created_at_idx: index('channel_management_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const channel_management_rels = pgTable(
  'channel_management_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('channel_management_rels_order_idx').on(columns.order),
    parentIdx: index('channel_management_rels_parent_idx').on(columns.parent),
    pathIdx: index('channel_management_rels_path_idx').on(columns.path),
    channel_management_rels_users_id_idx: index('channel_management_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [channel_management.id],
      name: 'channel_management_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'channel_management_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const social_media_bots = pgTable(
  'social_media_bots',
  {
    id: serial('id').primaryKey(),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    name: varchar('name').notNull(),
    description: varchar('description'),
    status: enum_social_media_bots_status('status').notNull().default('active'),
    platforms_facebook_enabled: boolean('platforms_facebook_enabled').default(false),
    platforms_facebook_pageId: varchar('platforms_facebook_page_id'),
    platforms_facebook_accessToken: varchar('platforms_facebook_access_token'),
    platforms_instagram_enabled: boolean('platforms_instagram_enabled').default(false),
    platforms_instagram_accountId: varchar('platforms_instagram_account_id'),
    platforms_instagram_accessToken: varchar('platforms_instagram_access_token'),
    analytics_trackingEnabled: boolean('analytics_tracking_enabled').default(true),
    analytics_metrics: jsonb('analytics_metrics'),
    space: integer('space_id').references(() => spaces.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    social_media_bots_tenant_idx: index('social_media_bots_tenant_idx').on(columns.tenant),
    social_media_bots_space_idx: index('social_media_bots_space_idx').on(columns.space),
    social_media_bots_updated_at_idx: index('social_media_bots_updated_at_idx').on(
      columns.updatedAt,
    ),
    social_media_bots_created_at_idx: index('social_media_bots_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const linked_accounts = pgTable(
  'linked_accounts',
  {
    id: serial('id').primaryKey(),
    provider: enum_linked_accounts_provider('provider').notNull(),
    accessToken: varchar('access_token').notNull(),
    refreshToken: varchar('refresh_token'),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }),
    scope: varchar('scope'),
    providerAccountId: varchar('provider_account_id'),
    providerAccountData: jsonb('provider_account_data'),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    status: enum_linked_accounts_status('status').notNull().default('active'),
    lastUsed: timestamp('last_used', { mode: 'string', withTimezone: true, precision: 3 }),
    errorMessage: varchar('error_message'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    linked_accounts_provider_idx: index('linked_accounts_provider_idx').on(columns.provider),
    linked_accounts_user_idx: index('linked_accounts_user_idx').on(columns.user),
    linked_accounts_tenant_idx: index('linked_accounts_tenant_idx').on(columns.tenant),
    linked_accounts_updated_at_idx: index('linked_accounts_updated_at_idx').on(columns.updatedAt),
    linked_accounts_created_at_idx: index('linked_accounts_created_at_idx').on(columns.createdAt),
  }),
)

export const invoices_itemized_list = pgTable(
  'invoices_itemized_list',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    description: varchar('description').notNull(),
    quantity: numeric('quantity').notNull(),
    rate: numeric('rate').notNull(),
    amount: numeric('amount').notNull(),
  },
  (columns) => ({
    _orderIdx: index('invoices_itemized_list_order_idx').on(columns._order),
    _parentIDIdx: index('invoices_itemized_list_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [invoices.id],
      name: 'invoices_itemized_list_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const invoices_payment_methods = pgTable(
  'invoices_payment_methods',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_invoices_payment_methods('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('invoices_payment_methods_order_idx').on(columns.order),
    parentIdx: index('invoices_payment_methods_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [invoices.id],
      name: 'invoices_payment_methods_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const invoices = pgTable(
  'invoices',
  {
    id: serial('id').primaryKey(),
    invoiceNumber: varchar('invoice_number').notNull(),
    recipientName: varchar('recipient_name').notNull(),
    recipientEmail: varchar('recipient_email').notNull(),
    amount: numeric('amount').notNull(),
    currency: varchar('currency').default('USD'),
    description: varchar('description').notNull(),
    businessName: varchar('business_name'),
    businessAddress: varchar('business_address'),
    notes: varchar('notes'),
    status: enum_invoices_status('status').notNull().default('draft'),
    dueDate: timestamp('due_date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    sentAt: timestamp('sent_at', { mode: 'string', withTimezone: true, precision: 3 }),
    paidAt: timestamp('paid_at', { mode: 'string', withTimezone: true, precision: 3 }),
    paymentMethod: varchar('payment_method'),
    paymentId: varchar('payment_id'),
    paymentLink: varchar('payment_link'),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    invoices_invoice_number_idx: uniqueIndex('invoices_invoice_number_idx').on(
      columns.invoiceNumber,
    ),
    invoices_tenant_idx: index('invoices_tenant_idx').on(columns.tenant),
    invoices_updated_at_idx: index('invoices_updated_at_idx').on(columns.updatedAt),
    invoices_created_at_idx: index('invoices_created_at_idx').on(columns.createdAt),
  }),
)

export const documents_signers = pgTable(
  'documents_signers',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    email: varchar('email').notNull(),
    role: enum_documents_signers_role('role').notNull(),
    signatureRequired: boolean('signature_required').default(true),
    status: enum_documents_signers_status('status').notNull().default('pending'),
    signedAt: timestamp('signed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    signature: varchar('signature'),
    signatureType: enum_documents_signers_signature_type('signature_type'),
    ipAddress: varchar('ip_address'),
  },
  (columns) => ({
    _orderIdx: index('documents_signers_order_idx').on(columns._order),
    _parentIDIdx: index('documents_signers_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [documents.id],
      name: 'documents_signers_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const documents = pgTable(
  'documents',
  {
    id: serial('id').primaryKey(),
    documentId: varchar('document_id').notNull(),
    title: varchar('title').notNull(),
    type: enum_documents_type('type').notNull(),
    content: varchar('content').notNull(),
    status: enum_documents_status('status').notNull().default('draft'),
    expirationDate: timestamp('expiration_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    securityHash: varchar('security_hash'),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    documents_document_id_idx: uniqueIndex('documents_document_id_idx').on(columns.documentId),
    documents_tenant_idx: index('documents_tenant_idx').on(columns.tenant),
    documents_updated_at_idx: index('documents_updated_at_idx').on(columns.updatedAt),
    documents_created_at_idx: index('documents_created_at_idx').on(columns.createdAt),
  }),
)

export const donations = pgTable(
  'donations',
  {
    id: serial('id').primaryKey(),
    donationId: varchar('donation_id').notNull(),
    amount: numeric('amount').notNull(),
    currency: varchar('currency').default('USD'),
    donorName: varchar('donor_name').default('Anonymous'),
    donorEmail: varchar('donor_email'),
    isAnonymous: boolean('is_anonymous').default(false),
    campaign: varchar('campaign'),
    cause: enum_donations_cause('cause'),
    message: varchar('message'),
    paymentMethod: enum_donations_payment_method('payment_method').notNull(),
    paymentId: varchar('payment_id'),
    transactionId: varchar('transaction_id'),
    status: enum_donations_status('status').notNull().default('pending'),
    isRecurring: boolean('is_recurring').default(false),
    recurringFrequency: enum_donations_recurring_frequency('recurring_frequency'),
    donatedAt: timestamp('donated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    space: integer('space_id').references(() => spaces.id, {
      onDelete: 'set null',
    }),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    donations_donation_id_idx: uniqueIndex('donations_donation_id_idx').on(columns.donationId),
    donations_tenant_idx: index('donations_tenant_idx').on(columns.tenant),
    donations_space_idx: index('donations_space_idx').on(columns.space),
    donations_updated_at_idx: index('donations_updated_at_idx').on(columns.updatedAt),
    donations_created_at_idx: index('donations_created_at_idx').on(columns.createdAt),
  }),
)

export const products_hero_links = pgTable(
  'products_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_products_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_products_hero_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('products_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('products_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_gallery = pgTable(
  'products_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    alt: varchar('alt'),
    caption: varchar('caption'),
  },
  (columns) => ({
    _orderIdx: index('products_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('products_gallery_parent_id_idx').on(columns._parentID),
    products_gallery_image_idx: index('products_gallery_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_blocks_cta_links = pgTable(
  'products_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_products_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_products_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('products_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('products_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products_blocks_cta.id],
      name: 'products_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_blocks_cta = pgTable(
  'products_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('products_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('products_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('products_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_blocks_content_columns = pgTable(
  'products_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_products_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_products_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_products_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('products_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('products_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products_blocks_content.id],
      name: 'products_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_blocks_content = pgTable(
  'products_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('products_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('products_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('products_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_blocks_media_block = pgTable(
  'products_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('products_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('products_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('products_blocks_media_block_path_idx').on(columns._path),
    products_blocks_media_block_media_idx: index('products_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_blocks_archive = pgTable(
  'products_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_products_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_products_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('products_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('products_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('products_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_blocks_form_block = pgTable(
  'products_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('products_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('products_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('products_blocks_form_block_path_idx').on(columns._path),
    products_blocks_form_block_form_idx: index('products_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_digital_assets = pgTable(
  'products_digital_assets',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    file: integer('file_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    name: varchar('name'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('products_digital_assets_order_idx').on(columns._order),
    _parentIDIdx: index('products_digital_assets_parent_id_idx').on(columns._parentID),
    products_digital_assets_file_idx: index('products_digital_assets_file_idx').on(columns.file),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_digital_assets_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_tags = pgTable(
  'products_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag'),
  },
  (columns) => ({
    _orderIdx: index('products_tags_order_idx').on(columns._order),
    _parentIDIdx: index('products_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products = pgTable(
  'products',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    hero_type: enum_products_hero_type('hero_type').default('lowImpact'),
    hero_richText: jsonb('hero_rich_text'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: varchar('description'),
    productType: enum_products_product_type('product_type').default('business_service'),
    pricing_basePrice: numeric('pricing_base_price'),
    pricing_salePrice: numeric('pricing_sale_price'),
    pricing_compareAtPrice: numeric('pricing_compare_at_price'),
    pricing_currency: enum_products_pricing_currency('pricing_currency').default('USD'),
    inventory_trackQuantity: boolean('inventory_track_quantity').default(true),
    inventory_quantity: numeric('inventory_quantity').default('0'),
    inventory_lowStockThreshold: numeric('inventory_low_stock_threshold').default('5'),
    inventory_allowBackorder: boolean('inventory_allow_backorder').default(false),
    sku: varchar('sku'),
    commissionTemplate_defaultRate: numeric('commission_template_default_rate'),
    commissionTemplate_rationale: varchar('commission_template_rationale'),
    commission_useCustomRate: boolean('commission_use_custom_rate').default(false),
    commission_customCommissionRate: numeric('commission_custom_commission_rate'),
    commission_sourceMultipliers_systemGenerated: numeric(
      'commission_source_multipliers_system_generated',
    ).default('1'),
    commission_sourceMultipliers_pickupJob: numeric(
      'commission_source_multipliers_pickup_job',
    ).default('0.5'),
    commission_sourceMultipliers_referralSource: numeric(
      'commission_source_multipliers_referral_source',
    ).default('1.5'),
    details_weight: numeric('details_weight'),
    details_dimensions_length: numeric('details_dimensions_length'),
    details_dimensions_width: numeric('details_dimensions_width'),
    details_dimensions_height: numeric('details_dimensions_height'),
    details_dimensions_unit:
      enum_products_details_dimensions_unit('details_dimensions_unit').default('in'),
    serviceDetails_duration: numeric('service_details_duration'),
    serviceDetails_location: enum_products_service_details_location('service_details_location'),
    serviceDetails_maxParticipants: numeric('service_details_max_participants'),
    serviceDetails_bookingRequired: boolean('service_details_booking_required').default(true),
    shipping_requiresShipping: boolean('shipping_requires_shipping').default(true),
    shipping_freeShipping: boolean('shipping_free_shipping').default(false),
    shipping_shippingClass: enum_products_shipping_shipping_class('shipping_shipping_class'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    meta_keywords: varchar('meta_keywords'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    status: enum_products_status('status').default('draft'),
    featured: boolean('featured').default(false),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    hasVariants: boolean('has_variants').default(false),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_products_status('_status').default('draft'),
  },
  (columns) => ({
    products_hero_hero_media_idx: index('products_hero_hero_media_idx').on(columns.hero_media),
    products_sku_idx: uniqueIndex('products_sku_idx').on(columns.sku),
    products_meta_meta_image_idx: index('products_meta_meta_image_idx').on(columns.meta_image),
    products_tenant_idx: index('products_tenant_idx').on(columns.tenant),
    products_slug_idx: index('products_slug_idx').on(columns.slug),
    products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
    products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
    products__status_idx: index('products__status_idx').on(columns._status),
  }),
)

export const products_rels = pgTable(
  'products_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('products_rels_order_idx').on(columns.order),
    parentIdx: index('products_rels_parent_idx').on(columns.parent),
    pathIdx: index('products_rels_path_idx').on(columns.path),
    products_rels_pages_id_idx: index('products_rels_pages_id_idx').on(columns.pagesID),
    products_rels_posts_id_idx: index('products_rels_posts_id_idx').on(columns.postsID),
    products_rels_products_id_idx: index('products_rels_products_id_idx').on(columns.productsID),
    products_rels_categories_id_idx: index('products_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'products_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'products_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'products_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'products_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_hero_links = pgTable(
  '_products_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__products_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__products_v_version_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_gallery = pgTable(
  '_products_v_version_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    alt: varchar('alt'),
    caption: varchar('caption'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_gallery_parent_id_idx').on(columns._parentID),
    _products_v_version_gallery_image_idx: index('_products_v_version_gallery_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_blocks_cta_links = pgTable(
  '_products_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__products_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__products_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v_blocks_cta.id],
      name: '_products_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_blocks_cta = pgTable(
  '_products_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_products_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_blocks_content_columns = pgTable(
  '_products_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__products_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__products_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__products_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v_blocks_content.id],
      name: '_products_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_blocks_content = pgTable(
  '_products_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_products_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_blocks_media_block = pgTable(
  '_products_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_products_v_blocks_media_block_path_idx').on(columns._path),
    _products_v_blocks_media_block_media_idx: index('_products_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_blocks_archive = pgTable(
  '_products_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__products_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__products_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_products_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_blocks_form_block = pgTable(
  '_products_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_products_v_blocks_form_block_path_idx').on(columns._path),
    _products_v_blocks_form_block_form_idx: index('_products_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_digital_assets = pgTable(
  '_products_v_version_digital_assets',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    file: integer('file_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    name: varchar('name'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_digital_assets_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_digital_assets_parent_id_idx').on(columns._parentID),
    _products_v_version_digital_assets_file_idx: index(
      '_products_v_version_digital_assets_file_idx',
    ).on(columns.file),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_digital_assets_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_tags = pgTable(
  '_products_v_version_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    tag: varchar('tag'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_tags_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v = pgTable(
  '_products_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_hero_type: enum__products_v_version_hero_type('version_hero_type').default('lowImpact'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_description: varchar('version_description'),
    version_productType:
      enum__products_v_version_product_type('version_product_type').default('business_service'),
    version_pricing_basePrice: numeric('version_pricing_base_price'),
    version_pricing_salePrice: numeric('version_pricing_sale_price'),
    version_pricing_compareAtPrice: numeric('version_pricing_compare_at_price'),
    version_pricing_currency: enum__products_v_version_pricing_currency(
      'version_pricing_currency',
    ).default('USD'),
    version_inventory_trackQuantity: boolean('version_inventory_track_quantity').default(true),
    version_inventory_quantity: numeric('version_inventory_quantity').default('0'),
    version_inventory_lowStockThreshold: numeric('version_inventory_low_stock_threshold').default(
      '5',
    ),
    version_inventory_allowBackorder: boolean('version_inventory_allow_backorder').default(false),
    version_sku: varchar('version_sku'),
    version_commissionTemplate_defaultRate: numeric('version_commission_template_default_rate'),
    version_commissionTemplate_rationale: varchar('version_commission_template_rationale'),
    version_commission_useCustomRate: boolean('version_commission_use_custom_rate').default(false),
    version_commission_customCommissionRate: numeric('version_commission_custom_commission_rate'),
    version_commission_sourceMultipliers_systemGenerated: numeric(
      'version_commission_source_multipliers_system_generated',
    ).default('1'),
    version_commission_sourceMultipliers_pickupJob: numeric(
      'version_commission_source_multipliers_pickup_job',
    ).default('0.5'),
    version_commission_sourceMultipliers_referralSource: numeric(
      'version_commission_source_multipliers_referral_source',
    ).default('1.5'),
    version_details_weight: numeric('version_details_weight'),
    version_details_dimensions_length: numeric('version_details_dimensions_length'),
    version_details_dimensions_width: numeric('version_details_dimensions_width'),
    version_details_dimensions_height: numeric('version_details_dimensions_height'),
    version_details_dimensions_unit: enum__products_v_version_details_dimensions_unit(
      'version_details_dimensions_unit',
    ).default('in'),
    version_serviceDetails_duration: numeric('version_service_details_duration'),
    version_serviceDetails_location: enum__products_v_version_service_details_location(
      'version_service_details_location',
    ),
    version_serviceDetails_maxParticipants: numeric('version_service_details_max_participants'),
    version_serviceDetails_bookingRequired: boolean(
      'version_service_details_booking_required',
    ).default(true),
    version_shipping_requiresShipping: boolean('version_shipping_requires_shipping').default(true),
    version_shipping_freeShipping: boolean('version_shipping_free_shipping').default(false),
    version_shipping_shippingClass: enum__products_v_version_shipping_shipping_class(
      'version_shipping_shipping_class',
    ),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_meta_keywords: varchar('version_meta_keywords'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_status: enum__products_v_version_status('version_status').default('draft'),
    version_featured: boolean('version_featured').default(false),
    version_tenant: integer('version_tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    version_hasVariants: boolean('version_has_variants').default(false),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__products_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _products_v_parent_idx: index('_products_v_parent_idx').on(columns.parent),
    _products_v_version_hero_version_hero_media_idx: index(
      '_products_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _products_v_version_version_sku_idx: index('_products_v_version_version_sku_idx').on(
      columns.version_sku,
    ),
    _products_v_version_meta_version_meta_image_idx: index(
      '_products_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _products_v_version_version_tenant_idx: index('_products_v_version_version_tenant_idx').on(
      columns.version_tenant,
    ),
    _products_v_version_version_slug_idx: index('_products_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _products_v_version_version_updated_at_idx: index(
      '_products_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _products_v_version_version_created_at_idx: index(
      '_products_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _products_v_version_version__status_idx: index('_products_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _products_v_created_at_idx: index('_products_v_created_at_idx').on(columns.createdAt),
    _products_v_updated_at_idx: index('_products_v_updated_at_idx').on(columns.updatedAt),
    _products_v_latest_idx: index('_products_v_latest_idx').on(columns.latest),
    _products_v_autosave_idx: index('_products_v_autosave_idx').on(columns.autosave),
  }),
)

export const _products_v_rels = pgTable(
  '_products_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_products_v_rels_order_idx').on(columns.order),
    parentIdx: index('_products_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_products_v_rels_path_idx').on(columns.path),
    _products_v_rels_pages_id_idx: index('_products_v_rels_pages_id_idx').on(columns.pagesID),
    _products_v_rels_posts_id_idx: index('_products_v_rels_posts_id_idx').on(columns.postsID),
    _products_v_rels_products_id_idx: index('_products_v_rels_products_id_idx').on(
      columns.productsID,
    ),
    _products_v_rels_categories_id_idx: index('_products_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_products_v.id],
      name: '_products_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_products_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_products_v_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_products_v_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_products_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const orders_line_items = pgTable(
  'orders_line_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    product: integer('product_id')
      .notNull()
      .references(() => products.id, {
        onDelete: 'set null',
      }),
    quantity: numeric('quantity').notNull(),
    unitPrice: numeric('unit_price').notNull(),
    totalPrice: numeric('total_price').notNull(),
    productSnapshot: jsonb('product_snapshot'),
  },
  (columns) => ({
    _orderIdx: index('orders_line_items_order_idx').on(columns._order),
    _parentIDIdx: index('orders_line_items_parent_id_idx').on(columns._parentID),
    orders_line_items_product_idx: index('orders_line_items_product_idx').on(columns.product),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders.id],
      name: 'orders_line_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const orders = pgTable(
  'orders',
  {
    id: serial('id').primaryKey(),
    orderNumber: varchar('order_number').notNull(),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    customer: integer('customer_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    status: enum_orders_status('status').notNull().default('pending'),
    subtotal: numeric('subtotal').notNull(),
    taxAmount: numeric('tax_amount').default('0'),
    shippingAmount: numeric('shipping_amount').default('0'),
    discountAmount: numeric('discount_amount').default('0'),
    totalAmount: numeric('total_amount').notNull(),
    currency: varchar('currency').notNull().default('USD'),
    revenueDistribution_aiPartner: numeric('revenue_distribution_ai_partner').notNull(),
    revenueDistribution_humanPartner: numeric('revenue_distribution_human_partner').notNull(),
    revenueDistribution_platformOperations: numeric(
      'revenue_distribution_platform_operations',
    ).notNull(),
    revenueDistribution_justiceRund: numeric('revenue_distribution_justice_rund').notNull(),
    revenueDistribution_calculatedAt: timestamp('revenue_distribution_calculated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    paymentStatus: enum_orders_payment_status('payment_status').notNull().default('pending'),
    paymentDetails_paymentMethod: enum_orders_payment_details_payment_method(
      'payment_details_payment_method',
    ),
    paymentDetails_transactionId: varchar('payment_details_transaction_id'),
    paymentDetails_last4: varchar('payment_details_last4'),
    paymentDetails_paymentProcessedAt: timestamp('payment_details_payment_processed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    fulfillment_method: enum_orders_fulfillment_method('fulfillment_method').notNull(),
    fulfillment_status: enum_orders_fulfillment_status('fulfillment_status').default('pending'),
    fulfillment_trackingNumber: varchar('fulfillment_tracking_number'),
    fulfillment_carrier: enum_orders_fulfillment_carrier('fulfillment_carrier'),
    fulfillment_shippedAt: timestamp('fulfillment_shipped_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    fulfillment_deliveredAt: timestamp('fulfillment_delivered_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    fulfillment_estimatedDelivery: timestamp('fulfillment_estimated_delivery', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    shippingAddress_name: varchar('shipping_address_name'),
    shippingAddress_company: varchar('shipping_address_company'),
    shippingAddress_address1: varchar('shipping_address_address1'),
    shippingAddress_address2: varchar('shipping_address_address2'),
    shippingAddress_city: varchar('shipping_address_city'),
    shippingAddress_state: varchar('shipping_address_state'),
    shippingAddress_postalCode: varchar('shipping_address_postal_code'),
    shippingAddress_country: varchar('shipping_address_country').default('US'),
    shippingAddress_phone: varchar('shipping_address_phone'),
    billingAddress_sameAsShipping: boolean('billing_address_same_as_shipping').default(true),
    billingAddress_name: varchar('billing_address_name'),
    billingAddress_company: varchar('billing_address_company'),
    billingAddress_address1: varchar('billing_address_address1'),
    billingAddress_address2: varchar('billing_address_address2'),
    billingAddress_city: varchar('billing_address_city'),
    billingAddress_state: varchar('billing_address_state'),
    billingAddress_postalCode: varchar('billing_address_postal_code'),
    billingAddress_country: varchar('billing_address_country').default('US'),
    customerNotes: varchar('customer_notes'),
    internalNotes: varchar('internal_notes'),
    metadata: jsonb('metadata'),
    placedAt: timestamp('placed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    cancelledAt: timestamp('cancelled_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    orders_order_number_idx: uniqueIndex('orders_order_number_idx').on(columns.orderNumber),
    orders_tenant_idx: index('orders_tenant_idx').on(columns.tenant),
    orders_customer_idx: index('orders_customer_idx').on(columns.customer),
    orders_updated_at_idx: index('orders_updated_at_idx').on(columns.updatedAt),
    orders_created_at_idx: index('orders_created_at_idx').on(columns.createdAt),
  }),
)

export const pages_hero_links = pgTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_hero_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    hero_type: enum_pages_hero_type('hero_type').default('lowImpact'),
    hero_richText: jsonb('hero_rich_text'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(columns.hero_media),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
    pages_rels_products_id_idx: index('pages_rels_products_id_idx').on(columns.productsID),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'pages_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_links = pgTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('lowImpact'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
    _pages_v_rels_products_id_idx: index('_pages_v_rels_products_id_idx').on(columns.productsID),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_pages_v_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(
      columns.version_heroImage,
    ),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    slug: varchar('slug'),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const organizations_members = pgTable(
  'organizations_members',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    role: enum_organizations_members_role('role').default('viewer'),
    accessLevel: enum_organizations_members_access_level('access_level').default('limited'),
  },
  (columns) => ({
    _orderIdx: index('organizations_members_order_idx').on(columns._order),
    _parentIDIdx: index('organizations_members_parent_id_idx').on(columns._parentID),
    organizations_members_user_idx: index('organizations_members_user_idx').on(columns.user),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [organizations.id],
      name: 'organizations_members_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const organizations_billing_settings_sharing_discounts = pgTable(
  'organizations_billing_settings_sharing_discounts',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    minLocs: numeric('min_locs').notNull(),
    percent: numeric('percent').notNull(),
  },
  (columns) => ({
    _orderIdx: index('organizations_billing_settings_sharing_discounts_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('organizations_billing_settings_sharing_discounts_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [organizations.id],
      name: 'organizations_billing_settings_sharing_discounts_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const organizations_ops_settings_hours_schedule = pgTable(
  'organizations_ops_settings_hours_schedule',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    dayOfWeek: enum_organizations_ops_settings_hours_schedule_day_of_week('day_of_week'),
    openTime: varchar('open_time'),
    closeTime: varchar('close_time'),
    isClosed: boolean('is_closed').default(false),
  },
  (columns) => ({
    _orderIdx: index('organizations_ops_settings_hours_schedule_order_idx').on(columns._order),
    _parentIDIdx: index('organizations_ops_settings_hours_schedule_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [organizations.id],
      name: 'organizations_ops_settings_hours_schedule_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const organizations_integration_websites = pgTable(
  'organizations_integration_websites',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    domain: varchar('domain').notNull(),
    purpose: enum_organizations_integration_websites_purpose('purpose').default('main'),
    isActive: boolean('is_active').default(true),
    integrationNotes: varchar('integration_notes'),
  },
  (columns) => ({
    _orderIdx: index('organizations_integration_websites_order_idx').on(columns._order),
    _parentIDIdx: index('organizations_integration_websites_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [organizations.id],
      name: 'organizations_integration_websites_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const organizations_analytics_recipients = pgTable(
  'organizations_analytics_recipients',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    email: varchar('email').notNull(),
    role: varchar('role'),
  },
  (columns) => ({
    _orderIdx: index('organizations_analytics_recipients_order_idx').on(columns._order),
    _parentIDIdx: index('organizations_analytics_recipients_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [organizations.id],
      name: 'organizations_analytics_recipients_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const organizations = pgTable(
  'organizations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    organizationType: enum_organizations_organization_type('organization_type')
      .notNull()
      .default('multi_location'),
    primaryDomain: varchar('primary_domain'),
    description: varchar('description'),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    crmIntegration_enabled: boolean('crm_integration_enabled').default(false),
    crmIntegration_crmType: enum_organizations_crm_integration_crm_type('crm_integration_crm_type'),
    crmIntegration_syncSchedule: enum_organizations_crm_integration_sync_schedule(
      'crm_integration_sync_schedule',
    ).default('daily'),
    crmIntegration_apiEndpoint: varchar('crm_integration_api_endpoint'),
    crmIntegration_lastSync: timestamp('crm_integration_last_sync', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    crmIntegration_syncStatus: enum_organizations_crm_integration_sync_status(
      'crm_integration_sync_status',
    ).default('never'),
    billingSettings_consolidatedBilling: boolean('billing_settings_consolidated_billing').default(
      true,
    ),
    billingSettings_billingContact_name: varchar('billing_settings_billing_contact_name'),
    billingSettings_billingContact_email: varchar('billing_settings_billing_contact_email'),
    billingSettings_billingContact_phone: varchar('billing_settings_billing_contact_phone'),
    billingSettings_sharing_orgRate: numeric('billing_settings_sharing_org_rate').default('2'),
    billingSettings_sharing_locRate: numeric('billing_settings_sharing_loc_rate').default('1'),
    opsSettings_timezone: varchar('ops_settings_timezone').default('America/New_York'),
    opsSettings_contactInfo_mainPhone: varchar('ops_settings_contact_info_main_phone'),
    opsSettings_contactInfo_mainEmail: varchar('ops_settings_contact_info_main_email'),
    opsSettings_contactInfo_supportEmail: varchar('ops_settings_contact_info_support_email'),
    opsSettings_contactInfo_emergencyContact: varchar(
      'ops_settings_contact_info_emergency_contact',
    ),
    integration_apiAccess_hasApiKey: boolean('integration_api_access_has_api_key').default(false),
    integration_apiAccess_apiKeyCreatedAt: timestamp('integration_api_access_api_key_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    integration_apiAccess_webhookUrl: varchar('integration_api_access_webhook_url'),
    analytics_enabled: boolean('analytics_enabled').default(true),
    analytics_frequency:
      enum_organizations_analytics_frequency('analytics_frequency').default('weekly'),
    status: enum_organizations_status('status').notNull().default('active'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    organizations_logo_idx: index('organizations_logo_idx').on(columns.logo),
    organizations_updated_at_idx: index('organizations_updated_at_idx').on(columns.updatedAt),
    organizations_created_at_idx: index('organizations_created_at_idx').on(columns.createdAt),
  }),
)

export const venues_business_hours_schedule = pgTable(
  'venues_business_hours_schedule',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    dayOfWeek: enum_venues_business_hours_schedule_day_of_week('day_of_week'),
    openTime: varchar('open_time'),
    closeTime: varchar('close_time'),
    isClosed: boolean('is_closed').default(false),
    isEmergencyOnly: boolean('is_emergency_only').default(false),
  },
  (columns) => ({
    _orderIdx: index('venues_business_hours_schedule_order_idx').on(columns._order),
    _parentIDIdx: index('venues_business_hours_schedule_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues.id],
      name: 'venues_business_hours_schedule_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_business_hours_special_hours = pgTable(
  'venues_business_hours_special_hours',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    description: varchar('description'),
    openTime: varchar('open_time'),
    closeTime: varchar('close_time'),
    isClosed: boolean('is_closed').default(false),
  },
  (columns) => ({
    _orderIdx: index('venues_business_hours_special_hours_order_idx').on(columns._order),
    _parentIDIdx: index('venues_business_hours_special_hours_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues.id],
      name: 'venues_business_hours_special_hours_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_staff_specialties = pgTable(
  'venues_staff_specialties',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    specialty: varchar('specialty'),
  },
  (columns) => ({
    _orderIdx: index('venues_staff_specialties_order_idx').on(columns._order),
    _parentIDIdx: index('venues_staff_specialties_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues_staff.id],
      name: 'venues_staff_specialties_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_staff_schedule_availability = pgTable(
  'venues_staff_schedule_availability',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    dayOfWeek: enum_venues_staff_schedule_availability_day_of_week('day_of_week'),
    startTime: varchar('start_time'),
    endTime: varchar('end_time'),
    isAvailable: boolean('is_available').default(true),
  },
  (columns) => ({
    _orderIdx: index('venues_staff_schedule_availability_order_idx').on(columns._order),
    _parentIDIdx: index('venues_staff_schedule_availability_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues_staff.id],
      name: 'venues_staff_schedule_availability_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_staff = pgTable(
  'venues_staff',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    role: enum_venues_staff_role('role').default('admin_staff'),
    title: varchar('title'),
    contactInfo_directPhone: varchar('contact_info_direct_phone'),
    contactInfo_directEmail: varchar('contact_info_direct_email'),
    contactInfo_pager: varchar('contact_info_pager'),
    workStation_assignedBay: varchar('work_station_assigned_bay'),
    workStation_canFloatBays: boolean('work_station_can_float_bays').default(false),
    workStation_primaryBay: boolean('work_station_primary_bay').default(true),
    freelanceSettings_canFreelance: boolean('freelance_settings_can_freelance').default(false),
    freelanceSettings_freelanceBookingUrl: varchar('freelance_settings_freelance_booking_url'),
    freelanceSettings_freelanceCommissionRate: numeric(
      'freelance_settings_freelance_commission_rate',
    ),
    freelanceSettings_onClockPriority: boolean('freelance_settings_on_clock_priority').default(
      true,
    ),
    isActive: boolean('is_active').default(true),
  },
  (columns) => ({
    _orderIdx: index('venues_staff_order_idx').on(columns._order),
    _parentIDIdx: index('venues_staff_parent_id_idx').on(columns._parentID),
    venues_staff_user_idx: index('venues_staff_user_idx').on(columns.user),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues.id],
      name: 'venues_staff_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_services = pgTable(
  'venues_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    serviceName: varchar('service_name').notNull(),
    description: varchar('description'),
    duration: numeric('duration'),
    price: numeric('price'),
    isActive: boolean('is_active').default(true),
    requiresAppointment: boolean('requires_appointment').default(true),
    category: varchar('category'),
    serviceType: enum_venues_services_service_type('service_type'),
    requiresBay: boolean('requires_bay').default(false),
  },
  (columns) => ({
    _orderIdx: index('venues_services_order_idx').on(columns._order),
    _parentIDIdx: index('venues_services_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues.id],
      name: 'venues_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_bay_management_bays = pgTable(
  'venues_bay_management_bays',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    bayName: varchar('bay_name'),
    bayType: enum_venues_bay_management_bays_bay_type('bay_type').default('general_workstation'),
    isActive: boolean('is_active').default(true),
    equipment: varchar('equipment'),
    notes: varchar('notes'),
  },
  (columns) => ({
    _orderIdx: index('venues_bay_management_bays_order_idx').on(columns._order),
    _parentIDIdx: index('venues_bay_management_bays_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues.id],
      name: 'venues_bay_management_bays_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_integrations_payment_methods = pgTable(
  'venues_integrations_payment_methods',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_venues_integrations_payment_methods_type('type'),
  },
  (columns) => ({
    _orderIdx: index('venues_integrations_payment_methods_order_idx').on(columns._order),
    _parentIDIdx: index('venues_integrations_payment_methods_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues.id],
      name: 'venues_integrations_payment_methods_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues_guardian_angel_custom_services = pgTable(
  'venues_guardian_angel_custom_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    service: varchar('service'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('venues_guardian_angel_custom_services_order_idx').on(columns._order),
    _parentIDIdx: index('venues_guardian_angel_custom_services_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [venues.id],
      name: 'venues_guardian_angel_custom_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const venues = pgTable(
  'venues',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    organization: integer('organization_id')
      .notNull()
      .references(() => organizations.id, {
        onDelete: 'set null',
      }),
    venueType: enum_venues_venue_type('venue_type').notNull().default('franchise_location'),
    displayName: varchar('display_name'),
    description: varchar('description'),
    website: varchar('website'),
    location_address_street: varchar('location_address_street').notNull(),
    location_address_suite: varchar('location_address_suite'),
    location_address_city: varchar('location_address_city').notNull(),
    location_address_state: varchar('location_address_state').notNull(),
    location_address_zipCode: varchar('location_address_zip_code').notNull(),
    location_address_country: varchar('location_address_country').default('USA'),
    location_coordinates_latitude: numeric('location_coordinates_latitude'),
    location_coordinates_longitude: numeric('location_coordinates_longitude'),
    location_serviceRadius: numeric('location_service_radius'),
    location_timezone: varchar('location_timezone').default('America/New_York'),
    contactInfo_phone: varchar('contact_info_phone'),
    contactInfo_fax: varchar('contact_info_fax'),
    contactInfo_email: varchar('contact_info_email'),
    contactInfo_emergencyContact: varchar('contact_info_emergency_contact'),
    contactInfo_afterHoursContact: varchar('contact_info_after_hours_contact'),
    bayManagement_totalBays: numeric('bay_management_total_bays').default('1'),
    bayManagement_allowMultipleBays: boolean('bay_management_allow_multiple_bays').default(true),
    bayManagement_bayBookingBuffer: numeric('bay_management_bay_booking_buffer').default('15'),
    integrations_crmSettings_crmLocationId: varchar('integrations_crm_settings_crm_location_id'),
    integrations_crmSettings_syncEnabled: boolean('integrations_crm_settings_sync_enabled').default(
      true,
    ),
    integrations_crmSettings_lastSync: timestamp('integrations_crm_settings_last_sync', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    integrations_bookingSystem_externalBookingUrl: varchar(
      'integrations_booking_system_external_booking_url',
    ),
    integrations_bookingSystem_bookingSystemType:
      enum_venues_integrations_booking_system_booking_system_type(
        'integrations_booking_system_booking_system_type',
      ).default('internal'),
    integrations_bookingSystem_inquicker_locationId: varchar(
      'integrations_booking_system_inquicker_location_id',
    ),
    integrations_bookingSystem_inquicker_apiEndpoint: varchar(
      'integrations_booking_system_inquicker_api_endpoint',
    ),
    integrations_bookingSystem_inquicker_realTimeSync: boolean(
      'integrations_booking_system_inquicker_real_time_sync',
    ).default(true),
    integrations_bookingSystem_inquicker_angelBooking: boolean(
      'integrations_booking_system_inquicker_angel_booking',
    ).default(true),
    integrations_bookingSystem_inquicker_waitlist: boolean(
      'integrations_booking_system_inquicker_waitlist',
    ).default(true),
    integrations_bookingSystem_inquicker_cancelPolicy: varchar(
      'integrations_booking_system_inquicker_cancel_policy',
    ),
    integrations_payment_accepts: boolean('integrations_payment_accepts').default(true),
    integrations_payment_stripeAccountId: varchar('integrations_payment_stripe_account_id'),
    analytics_enableAnalytics: boolean('analytics_enable_analytics').default(true),
    analytics_metrics_avgRating: numeric('analytics_metrics_avg_rating'),
    analytics_metrics_totalReviews: numeric('analytics_metrics_total_reviews'),
    analytics_metrics_monthlyRevenue: numeric('analytics_metrics_monthly_revenue'),
    analytics_metrics_appointments: numeric('analytics_metrics_appointments'),
    guardianAngel_assignedAngel: integer('guardian_angel_assigned_angel_id').references(
      () => business_agents.id,
      {
        onDelete: 'set null',
      },
    ),
    guardianAngel_custom_greeting: varchar('guardian_angel_custom_greeting'),
    isActive: boolean('is_active').default(true),
    status: enum_venues_status('status').notNull().default('active'),
    notes: varchar('notes'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    venues_organization_idx: index('venues_organization_idx').on(columns.organization),
    venues_guardian_angel_guardian_angel_assigned_angel_idx: index(
      'venues_guardian_angel_guardian_angel_assigned_angel_idx',
    ).on(columns.guardianAngel_assignedAngel),
    venues_updated_at_idx: index('venues_updated_at_idx').on(columns.updatedAt),
    venues_created_at_idx: index('venues_created_at_idx').on(columns.createdAt),
  }),
)

export const business_agents_business_knowledge_services = pgTable(
  'business_agents_business_knowledge_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    description: varchar('description'),
    pricing: varchar('pricing'),
    duration: varchar('duration'),
    spiritNotes: varchar('spirit_notes'),
  },
  (columns) => ({
    _orderIdx: index('business_agents_business_knowledge_services_order_idx').on(columns._order),
    _parentIDIdx: index('business_agents_business_knowledge_services_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_business_knowledge_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_business_knowledge_customer_stories = pgTable(
  'business_agents_business_knowledge_customer_stories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    scenario: varchar('scenario').notNull(),
    approach: varchar('approach'),
    outcome: varchar('outcome'),
  },
  (columns) => ({
    _orderIdx: index('business_agents_business_knowledge_customer_stories_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('business_agents_business_knowledge_customer_stories_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_business_knowledge_customer_stories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_business_knowledge_frequent_questions = pgTable(
  'business_agents_business_knowledge_frequent_questions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    question: varchar('question').notNull(),
    spiritResponse: varchar('spirit_response').notNull(),
    followUpActions: varchar('follow_up_actions'),
  },
  (columns) => ({
    _orderIdx: index('business_agents_business_knowledge_frequent_questions_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('business_agents_business_knowledge_frequent_questions_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_business_knowledge_frequent_questions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_ops_hours_schedule = pgTable(
  'business_agents_ops_hours_schedule',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    day: enum_business_agents_ops_hours_schedule_day('day'),
    startTime: varchar('start_time'),
    endTime: varchar('end_time'),
  },
  (columns) => ({
    _orderIdx: index('business_agents_ops_hours_schedule_order_idx').on(columns._order),
    _parentIDIdx: index('business_agents_ops_hours_schedule_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_ops_hours_schedule_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_ops_handoff_triggers = pgTable(
  'business_agents_ops_handoff_triggers',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    trigger: enum_business_agents_ops_handoff_triggers_trigger('trigger'),
    handoffMessage: varchar('handoff_message'),
  },
  (columns) => ({
    _orderIdx: index('business_agents_ops_handoff_triggers_order_idx').on(columns._order),
    _parentIDIdx: index('business_agents_ops_handoff_triggers_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_ops_handoff_triggers_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_humanitarian_legal_databases = pgTable(
  'business_agents_humanitarian_legal_databases',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_business_agents_humanitarian_legal_databases('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('business_agents_humanitarian_legal_databases_order_idx').on(columns.order),
    parentIdx: index('business_agents_humanitarian_legal_databases_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_humanitarian_legal_databases_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_humanitarian_news_curation_content_filters = pgTable(
  'business_agents_humanitarian_news_curation_content_filters',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_business_agents_humanitarian_news_curation_content_filters('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('business_agents_humanitarian_news_curation_content_filters_order_idx').on(
      columns.order,
    ),
    parentIdx: index('business_agents_humanitarian_news_curation_content_filters_parent_idx').on(
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_humanitarian_news_curation_content_filters_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_humanitarian_resources_vendors = pgTable(
  'business_agents_humanitarian_resources_vendors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    type: enum_business_agents_humanitarian_resources_vendors_type('type'),
    monthlyBudget: numeric('monthly_budget'),
  },
  (columns) => ({
    _orderIdx: index('business_agents_humanitarian_resources_vendors_order_idx').on(columns._order),
    _parentIDIdx: index('business_agents_humanitarian_resources_vendors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_humanitarian_resources_vendors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_humanitarian_avatar_scope = pgTable(
  'business_agents_humanitarian_avatar_scope',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_business_agents_humanitarian_avatar_scope('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('business_agents_humanitarian_avatar_scope_order_idx').on(columns.order),
    parentIdx: index('business_agents_humanitarian_avatar_scope_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_humanitarian_avatar_scope_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents_vapi_integration_allowed_actions = pgTable(
  'business_agents_vapi_integration_allowed_actions',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_business_agents_vapi_integration_allowed_actions('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('business_agents_vapi_integration_allowed_actions_order_idx').on(columns.order),
    parentIdx: index('business_agents_vapi_integration_allowed_actions_parent_idx').on(
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [business_agents.id],
      name: 'business_agents_vapi_integration_allowed_actions_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const business_agents = pgTable(
  'business_agents',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    avatar: integer('avatar_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    spiritType: enum_business_agents_spirit_type('spirit_type').notNull().default('primary'),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    space: integer('space_id').references(() => spaces.id, {
      onDelete: 'set null',
    }),
    humanPartner: integer('human_partner_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    personality_coreValues: varchar('personality_core_values'),
    personality_communicationStyle: enum_business_agents_personality_communication_style(
      'personality_communication_style',
    ).default('friendly'),
    personality_specialExpertise: varchar('personality_special_expertise'),
    personality_brandVoice: varchar('personality_brand_voice'),
    ops_isActive: boolean('ops_is_active').default(true),
    ops_hours_timezone: varchar('ops_hours_timezone').default('America/New_York'),
    ai_systemPrompt: varchar('ai_system_prompt'),
    ai_contextInstructions: varchar('ai_context_instructions'),
    ai_style_maxResponseLength: numeric('ai_style_max_response_length').default('500'),
    ai_style_includeEmojis: boolean('ai_style_include_emojis').default(true),
    ai_style_formality:
      enum_business_agents_ai_style_formality('ai_style_formality').default('casual'),
    analytics_totalInteractions: numeric('analytics_total_interactions').default('0'),
    analytics_successfulHandoffs: numeric('analytics_successful_handoffs').default('0'),
    analytics_customerSatisfactionScore: numeric('analytics_customer_satisfaction_score'),
    analytics_lastInteraction: timestamp('analytics_last_interaction', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    agentType: enum_business_agents_agent_type('agent_type').default('business'),
    humanitarian_legal_enabled: boolean('humanitarian_legal_enabled').default(false),
    humanitarian_legal_ethicalGuidelines: varchar('humanitarian_legal_ethical_guidelines'),
    humanitarian_newsCuration_enabled: boolean('humanitarian_news_curation_enabled').default(false),
    humanitarian_newsCuration_positivityBias:
      enum_business_agents_humanitarian_news_curation_positivity_bias(
        'humanitarian_news_curation_positivity_bias',
      ).default('hopeful'),
    humanitarian_resources_enabled: boolean('humanitarian_resources_enabled').default(false),
    humanitarian_resources_autoApprovalLimit: numeric(
      'humanitarian_resources_auto_approval_limit',
    ).default('25'),
    humanitarian_avatar_enabled: boolean('humanitarian_avatar_enabled').default(false),
    humanitarian_avatar_communicationStyle: varchar('humanitarian_avatar_communication_style'),
    humanitarian_avatar_consentBoundaries: varchar('humanitarian_avatar_consent_boundaries'),
    vapiIntegration_phoneNumber: varchar('vapi_integration_phone_number'),
    vapiIntegration_assistantId: varchar('vapi_integration_assistant_id'),
    vapiIntegration_voiceId: enum_business_agents_vapi_integration_voice_id(
      'vapi_integration_voice_id',
    ).default('EXAVITQu4vr4xnSDxMaL'),
    vapiIntegration_status:
      enum_business_agents_vapi_integration_status('vapi_integration_status').default('inactive'),
    vapiIntegration_callStats_totalCalls: numeric(
      'vapi_integration_call_stats_total_calls',
    ).default('0'),
    vapiIntegration_callStats_totalMinutes: numeric(
      'vapi_integration_call_stats_total_minutes',
    ).default('0'),
    vapiIntegration_callStats_lastCallDate: timestamp(
      'vapi_integration_call_stats_last_call_date',
      { mode: 'string', withTimezone: true, precision: 3 },
    ),
    vapiIntegration_callStats_successRate: numeric(
      'vapi_integration_call_stats_success_rate',
    ).default('0'),
    vapiIntegration_voicePrompt: varchar('vapi_integration_voice_prompt'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    business_agents_avatar_idx: index('business_agents_avatar_idx').on(columns.avatar),
    business_agents_tenant_idx: index('business_agents_tenant_idx').on(columns.tenant),
    business_agents_space_idx: index('business_agents_space_idx').on(columns.space),
    business_agents_human_partner_idx: index('business_agents_human_partner_idx').on(
      columns.humanPartner,
    ),
    business_agents_updated_at_idx: index('business_agents_updated_at_idx').on(columns.updatedAt),
    business_agents_created_at_idx: index('business_agents_created_at_idx').on(columns.createdAt),
  }),
)

export const humanitarian_agents_legal_advocacy_legal_databases = pgTable(
  'humanitarian_agents_legal_advocacy_legal_databases',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_humanitarian_agents_legal_advocacy_legal_databases('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('humanitarian_agents_legal_advocacy_legal_databases_order_idx').on(
      columns.order,
    ),
    parentIdx: index('humanitarian_agents_legal_advocacy_legal_databases_parent_idx').on(
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [humanitarian_agents.id],
      name: 'humanitarian_agents_legal_advocacy_legal_databases_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const humanitarian_agents = pgTable(
  'humanitarian_agents',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    spiritType: enum_humanitarian_agents_spirit_type('spirit_type').notNull(),
    legalAdvocacy_caseResearch: boolean('legal_advocacy_case_research').default(true),
    resourceOrdering_canOrderBooks: boolean('resource_ordering_can_order_books').default(true),
    resourceOrdering_monthlyBudget: numeric('resource_ordering_monthly_budget').default('100'),
    newsCuration_providesNews: boolean('news_curation_provides_news').default(true),
    newsCuration_hopeBias:
      enum_humanitarian_agents_news_curation_hope_bias('news_curation_hope_bias').default(
        'maximum_hope',
      ),
    avatarPowers_canRepresent: boolean('avatar_powers_can_represent').default(true),
    avatarPowers_voiceStyle: varchar('avatar_powers_voice_style'),
    systemPrompt: varchar('system_prompt'),
    isActive: boolean('is_active').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    humanitarian_agents_updated_at_idx: index('humanitarian_agents_updated_at_idx').on(
      columns.updatedAt,
    ),
    humanitarian_agents_created_at_idx: index('humanitarian_agents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const ai_generation_queue_source_data_content_themes = pgTable(
  'ai_generation_queue_source_data_content_themes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    theme: varchar('theme').notNull(),
  },
  (columns) => ({
    _orderIdx: index('ai_generation_queue_source_data_content_themes_order_idx').on(columns._order),
    _parentIDIdx: index('ai_generation_queue_source_data_content_themes_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ai_generation_queue.id],
      name: 'ai_generation_queue_source_data_content_themes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const ai_generation_queue_parameters_color_scheme = pgTable(
  'ai_generation_queue_parameters_color_scheme',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    color: varchar('color').notNull(),
  },
  (columns) => ({
    _orderIdx: index('ai_generation_queue_parameters_color_scheme_order_idx').on(columns._order),
    _parentIDIdx: index('ai_generation_queue_parameters_color_scheme_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ai_generation_queue.id],
      name: 'ai_generation_queue_parameters_color_scheme_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const ai_generation_queue_parameters_text_elements = pgTable(
  'ai_generation_queue_parameters_text_elements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    text: varchar('text').notNull(),
    emphasis:
      enum_ai_generation_queue_parameters_text_elements_emphasis('emphasis').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('ai_generation_queue_parameters_text_elements_order_idx').on(columns._order),
    _parentIDIdx: index('ai_generation_queue_parameters_text_elements_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ai_generation_queue.id],
      name: 'ai_generation_queue_parameters_text_elements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const ai_generation_queue = pgTable(
  'ai_generation_queue',
  {
    id: serial('id').primaryKey(),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    generationType: enum_ai_generation_queue_generation_type('generation_type').notNull(),
    sourceData_youtubeChannelId: varchar('source_data_youtube_channel_id'),
    sourceData_brandingGuidelines: varchar('source_data_branding_guidelines'),
    sourceData_targetAudience: varchar('source_data_target_audience'),
    parameters_productType:
      enum_ai_generation_queue_parameters_product_type('parameters_product_type'),
    parameters_styleGuide:
      enum_ai_generation_queue_parameters_style_guide('parameters_style_guide').default('modern'),
    parameters_customPrompt: varchar('parameters_custom_prompt'),
    status: enum_ai_generation_queue_status('status').notNull().default('queued'),
    progress: numeric('progress').default('0'),
    generatedText: varchar('generated_text'),
    approvalStatus: enum_ai_generation_queue_approval_status('approval_status').default('pending'),
    reviewNotes: varchar('review_notes'),
    qualityScore: numeric('quality_score'),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    processingMetadata_modelUsed: varchar('processing_metadata_model_used'),
    processingMetadata_processingTime: numeric('processing_metadata_processing_time'),
    processingMetadata_tokensUsed: numeric('processing_metadata_tokens_used'),
    processingMetadata_errorMessage: varchar('processing_metadata_error_message'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    ai_generation_queue_space_idx: index('ai_generation_queue_space_idx').on(columns.space),
    ai_generation_queue_tenant_idx: index('ai_generation_queue_tenant_idx').on(columns.tenant),
    ai_generation_queue_updated_at_idx: index('ai_generation_queue_updated_at_idx').on(
      columns.updatedAt,
    ),
    ai_generation_queue_created_at_idx: index('ai_generation_queue_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const ai_generation_queue_rels = pgTable(
  'ai_generation_queue_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    pagesID: integer('pages_id'),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('ai_generation_queue_rels_order_idx').on(columns.order),
    parentIdx: index('ai_generation_queue_rels_parent_idx').on(columns.parent),
    pathIdx: index('ai_generation_queue_rels_path_idx').on(columns.path),
    ai_generation_queue_rels_posts_id_idx: index('ai_generation_queue_rels_posts_id_idx').on(
      columns.postsID,
    ),
    ai_generation_queue_rels_pages_id_idx: index('ai_generation_queue_rels_pages_id_idx').on(
      columns.pagesID,
    ),
    ai_generation_queue_rels_media_id_idx: index('ai_generation_queue_rels_media_id_idx').on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [ai_generation_queue.id],
      name: 'ai_generation_queue_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'ai_generation_queue_rels_posts_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'ai_generation_queue_rels_pages_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'ai_generation_queue_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const job_queue = pgTable(
  'job_queue',
  {
    id: serial('id').primaryKey(),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    jobType: varchar('job_type').notNull(),
    data: jsonb('data').notNull(),
    status: enum_job_queue_status('status').notNull().default('pending'),
    priority: numeric('priority').default('0'),
    maxAttempts: numeric('max_attempts').default('3'),
    scheduledFor: timestamp('scheduled_for', { mode: 'string', withTimezone: true, precision: 3 }),
    attempts: numeric('attempts').default('0'),
    startedAt: timestamp('started_at', { mode: 'string', withTimezone: true, precision: 3 }),
    processedAt: timestamp('processed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    result: jsonb('result'),
    error: varchar('error'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    job_queue_tenant_idx: index('job_queue_tenant_idx').on(columns.tenant),
    job_queue_updated_at_idx: index('job_queue_updated_at_idx').on(columns.updatedAt),
    job_queue_created_at_idx: index('job_queue_created_at_idx').on(columns.createdAt),
  }),
)

export const channels_feed_configuration_filters_file_types = pgTable(
  'channels_feed_configuration_filters_file_types',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: varchar('type'),
  },
  (columns) => ({
    _orderIdx: index('channels_feed_configuration_filters_file_types_order_idx').on(columns._order),
    _parentIDIdx: index('channels_feed_configuration_filters_file_types_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [channels.id],
      name: 'channels_feed_configuration_filters_file_types_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const channels_feed_configuration_filters_keywords = pgTable(
  'channels_feed_configuration_filters_keywords',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    keyword: varchar('keyword'),
  },
  (columns) => ({
    _orderIdx: index('channels_feed_configuration_filters_keywords_order_idx').on(columns._order),
    _parentIDIdx: index('channels_feed_configuration_filters_keywords_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [channels.id],
      name: 'channels_feed_configuration_filters_keywords_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const channels_economics_model_volume_discounts = pgTable(
  'channels_economics_model_volume_discounts',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    threshold: numeric('threshold'),
    discount: numeric('discount'),
  },
  (columns) => ({
    _orderIdx: index('channels_economics_model_volume_discounts_order_idx').on(columns._order),
    _parentIDIdx: index('channels_economics_model_volume_discounts_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [channels.id],
      name: 'channels_economics_model_volume_discounts_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const channels_processing_rules_custom_prompts = pgTable(
  'channels_processing_rules_custom_prompts',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    trigger: varchar('trigger'),
    prompt: varchar('prompt'),
  },
  (columns) => ({
    _orderIdx: index('channels_processing_rules_custom_prompts_order_idx').on(columns._order),
    _parentIDIdx: index('channels_processing_rules_custom_prompts_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [channels.id],
      name: 'channels_processing_rules_custom_prompts_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const channels = pgTable(
  'channels',
  {
    id: serial('id').primaryKey(),
    tenantId: varchar('tenant_id').notNull(),
    guardianAngelId: varchar('guardian_angel_id'),
    name: varchar('name').notNull(),
    description: varchar('description'),
    channelType: enum_channels_channel_type('channel_type').notNull(),
    reportType: enum_channels_report_type('report_type').notNull(),
    feedConfiguration_feedSource: enum_channels_feed_configuration_feed_source(
      'feed_configuration_feed_source',
    ),
    feedConfiguration_feedSettings: jsonb('feed_configuration_feed_settings'),
    feedConfiguration_pollingInterval: numeric('feed_configuration_polling_interval').default('60'),
    feedConfiguration_filters_dateRange_from: timestamp(
      'feed_configuration_filters_date_range_from',
      { mode: 'string', withTimezone: true, precision: 3 },
    ),
    feedConfiguration_filters_dateRange_to: timestamp('feed_configuration_filters_date_range_to', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    economics_phyleAffiliation: enum_channels_economics_phyle_affiliation(
      'economics_phyle_affiliation',
    ),
    economics_model_processingFee: numeric('economics_model_processing_fee'),
    economics_model_accuracyBonus: numeric('economics_model_accuracy_bonus'),
    economics_model_speedBonus: numeric('economics_model_speed_bonus'),
    economics_model_sharing: enum_channels_economics_model_sharing('economics_model_sharing'),
    economics_stats_totalEarned: numeric('economics_stats_total_earned'),
    economics_stats_itemsProcessed: numeric('economics_stats_items_processed'),
    economics_stats_accuracyScore: numeric('economics_stats_accuracy_score'),
    economics_stats_phyleRank: numeric('economics_stats_phyle_rank'),
    economics_stats_reputation: numeric('economics_stats_reputation'),
    processingRules_autoProcessing: boolean('processing_rules_auto_processing').default(true),
    processingRules_requiresHumanReview: boolean('processing_rules_requires_human_review').default(
      false,
    ),
    processingRules_confidenceThreshold: numeric('processing_rules_confidence_threshold').default(
      '0.8',
    ),
    processingRules_outputFormat: enum_channels_processing_rules_output_format(
      'processing_rules_output_format',
    ),
    status: enum_channels_status('status').default('active'),
    lastProcessed: timestamp('last_processed', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    channels_tenant_id_idx: index('channels_tenant_id_idx').on(columns.tenantId),
    channels_guardian_angel_id_idx: index('channels_guardian_angel_id_idx').on(
      columns.guardianAngelId,
    ),
  }),
)

export const phyles_charter_specializations = pgTable(
  'phyles_charter_specializations',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    specialization: varchar('specialization'),
  },
  (columns) => ({
    _orderIdx: index('phyles_charter_specializations_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_charter_specializations_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_charter_specializations_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_charter_core_values = pgTable(
  'phyles_charter_core_values',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('phyles_charter_core_values_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_charter_core_values_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_charter_core_values_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_governance_leadership_structure = pgTable(
  'phyles_governance_leadership_structure',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    role: varchar('role'),
    responsibilities: varchar('responsibilities'),
    selectionMethod: varchar('selection_method'),
  },
  (columns) => ({
    _orderIdx: index('phyles_governance_leadership_structure_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_governance_leadership_structure_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_governance_leadership_structure_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_membership_criteria_admission_requirements = pgTable(
  'phyles_membership_criteria_admission_requirements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    requirement: varchar('requirement'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('phyles_membership_criteria_admission_requirements_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('phyles_membership_criteria_admission_requirements_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_membership_criteria_admission_requirements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_membership_criteria_skill_requirements = pgTable(
  'phyles_membership_criteria_skill_requirements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    skill: varchar('skill'),
    level: enum_phyles_membership_criteria_skill_requirements_level('level'),
  },
  (columns) => ({
    _orderIdx: index('phyles_membership_criteria_skill_requirements_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_membership_criteria_skill_requirements_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_membership_criteria_skill_requirements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_services_offered_services = pgTable(
  'phyles_services_offered_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    service: varchar('service'),
    pricing: jsonb('pricing'),
  },
  (columns) => ({
    _orderIdx: index('phyles_services_offered_services_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_services_offered_services_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_services_offered_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_services_service_guarantees = pgTable(
  'phyles_services_service_guarantees',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    guarantee: varchar('guarantee'),
  },
  (columns) => ({
    _orderIdx: index('phyles_services_service_guarantees_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_services_service_guarantees_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_services_service_guarantees_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_inter_phyle_relations_alliances = pgTable(
  'phyles_inter_phyle_relations_alliances',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    phyleId: varchar('phyle_id'),
    allianceType: enum_phyles_inter_phyle_relations_alliances_alliance_type('alliance_type'),
    terms: jsonb('terms'),
  },
  (columns) => ({
    _orderIdx: index('phyles_inter_phyle_relations_alliances_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_inter_phyle_relations_alliances_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_inter_phyle_relations_alliances_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_inter_phyle_relations_competitors = pgTable(
  'phyles_inter_phyle_relations_competitors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    phyleId: varchar('phyle_id'),
    competitionType: varchar('competition_type'),
  },
  (columns) => ({
    _orderIdx: index('phyles_inter_phyle_relations_competitors_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_inter_phyle_relations_competitors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_inter_phyle_relations_competitors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_cultural_aspects_traditions = pgTable(
  'phyles_cultural_aspects_traditions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tradition: varchar('tradition'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('phyles_cultural_aspects_traditions_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_cultural_aspects_traditions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_cultural_aspects_traditions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_cultural_aspects_celebrations = pgTable(
  'phyles_cultural_aspects_celebrations',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    celebration: varchar('celebration'),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('phyles_cultural_aspects_celebrations_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_cultural_aspects_celebrations_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_cultural_aspects_celebrations_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles_cultural_aspects_symbolism_colors = pgTable(
  'phyles_cultural_aspects_symbolism_colors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    color: varchar('color'),
  },
  (columns) => ({
    _orderIdx: index('phyles_cultural_aspects_symbolism_colors_order_idx').on(columns._order),
    _parentIDIdx: index('phyles_cultural_aspects_symbolism_colors_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [phyles.id],
      name: 'phyles_cultural_aspects_symbolism_colors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const phyles = pgTable(
  'phyles',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    description: jsonb('description'),
    phyleType: enum_phyles_phyle_type('phyle_type').notNull(),
    charter_mission: varchar('charter_mission').notNull(),
    charter_operatingPrinciples: jsonb('charter_operating_principles'),
    economicStructure_currency: varchar('economic_structure_currency').default('KenDevCoin'),
    economicStructure_taxationModel: enum_phyles_economic_structure_taxation_model(
      'economic_structure_taxation_model',
    ),
    economicStructure_wealthDistribution: enum_phyles_economic_structure_wealth_distribution(
      'economic_structure_wealth_distribution',
    ),
    economicStructure_minimumBasicIncome: numeric('economic_structure_minimum_basic_income'),
    economicStructure_profitSharingRatio: numeric('economic_structure_profit_sharing_ratio'),
    governance_governanceModel: enum_phyles_governance_governance_model(
      'governance_governance_model',
    ),
    governance_decisionMakingProcess: jsonb('governance_decision_making_process'),
    governance_votingRights: jsonb('governance_voting_rights'),
    membershipCriteria_probationPeriod: numeric('membership_criteria_probation_period'),
    membershipCriteria_membershipFees_initiation: numeric(
      'membership_criteria_membership_fees_initiation',
    ),
    membershipCriteria_membershipFees_monthly: numeric(
      'membership_criteria_membership_fees_monthly',
    ),
    membershipCriteria_membershipFees_annual: numeric('membership_criteria_membership_fees_annual'),
    services_qualityStandards: jsonb('services_quality_standards'),
    metrics_memberCount: numeric('metrics_member_count'),
    metrics_totalEarnings: numeric('metrics_total_earnings'),
    metrics_averageEarningsPerMember: numeric('metrics_average_earnings_per_member'),
    metrics_reputationScore: numeric('metrics_reputation_score'),
    metrics_completionRate: numeric('metrics_completion_rate'),
    metrics_customerSatisfaction: numeric('metrics_customer_satisfaction'),
    metrics_growthRate: numeric('metrics_growth_rate'),
    culturalAspects_symbolism_motto: varchar('cultural_aspects_symbolism_motto'),
    culturalAspects_symbolism_emblem: varchar('cultural_aspects_symbolism_emblem'),
    status: enum_phyles_status('status').default('active'),
    founded: timestamp('founded', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    lastActivity: timestamp('last_activity', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    phyles_updated_at_idx: index('phyles_updated_at_idx').on(columns.updatedAt),
    phyles_created_at_idx: index('phyles_created_at_idx').on(columns.createdAt),
  }),
)

export const agent_reputation_reputation_history = pgTable(
  'agent_reputation_reputation_history',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    eventType: enum_agent_reputation_reputation_history_event_type('event_type'),
    impact: numeric('impact'),
    description: varchar('description'),
    timestamp: timestamp('timestamp', { mode: 'string', withTimezone: true, precision: 3 }),
    verifiedBy: varchar('verified_by'),
  },
  (columns) => ({
    _orderIdx: index('agent_reputation_reputation_history_order_idx').on(columns._order),
    _parentIDIdx: index('agent_reputation_reputation_history_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [agent_reputation.id],
      name: 'agent_reputation_reputation_history_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const agent_reputation_achievements = pgTable(
  'agent_reputation_achievements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    achievement: enum_agent_reputation_achievements_achievement('achievement'),
    earnedAt: timestamp('earned_at', { mode: 'string', withTimezone: true, precision: 3 }),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('agent_reputation_achievements_order_idx').on(columns._order),
    _parentIDIdx: index('agent_reputation_achievements_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [agent_reputation.id],
      name: 'agent_reputation_achievements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const agent_reputation_specializations = pgTable(
  'agent_reputation_specializations',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    specialization: varchar('specialization'),
    proficiencyLevel: enum_agent_reputation_specializations_proficiency_level('proficiency_level'),
    certifiedBy: varchar('certified_by'),
  },
  (columns) => ({
    _orderIdx: index('agent_reputation_specializations_order_idx').on(columns._order),
    _parentIDIdx: index('agent_reputation_specializations_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [agent_reputation.id],
      name: 'agent_reputation_specializations_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const agent_reputation_social_network_mentor_of = pgTable(
  'agent_reputation_social_network_mentor_of',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    agentId: varchar('agent_id'),
  },
  (columns) => ({
    _orderIdx: index('agent_reputation_social_network_mentor_of_order_idx').on(columns._order),
    _parentIDIdx: index('agent_reputation_social_network_mentor_of_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [agent_reputation.id],
      name: 'agent_reputation_social_network_mentor_of_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const agent_reputation_social_network_mentored_by = pgTable(
  'agent_reputation_social_network_mentored_by',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    agentId: varchar('agent_id'),
  },
  (columns) => ({
    _orderIdx: index('agent_reputation_social_network_mentored_by_order_idx').on(columns._order),
    _parentIDIdx: index('agent_reputation_social_network_mentored_by_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [agent_reputation.id],
      name: 'agent_reputation_social_network_mentored_by_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const agent_reputation_social_network_collaborators = pgTable(
  'agent_reputation_social_network_collaborators',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    agentId: varchar('agent_id'),
    collaborationType: varchar('collaboration_type'),
  },
  (columns) => ({
    _orderIdx: index('agent_reputation_social_network_collaborators_order_idx').on(columns._order),
    _parentIDIdx: index('agent_reputation_social_network_collaborators_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [agent_reputation.id],
      name: 'agent_reputation_social_network_collaborators_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const agent_reputation_social_network_endorsements = pgTable(
  'agent_reputation_social_network_endorsements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    fromAgentId: varchar('from_agent_id'),
    skill: varchar('skill'),
    endorsementText: varchar('endorsement_text'),
    timestamp: timestamp('timestamp', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('agent_reputation_social_network_endorsements_order_idx').on(columns._order),
    _parentIDIdx: index('agent_reputation_social_network_endorsements_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [agent_reputation.id],
      name: 'agent_reputation_social_network_endorsements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const agent_reputation = pgTable(
  'agent_reputation',
  {
    id: serial('id').primaryKey(),
    agentId: varchar('agent_id').notNull(),
    phyleId: varchar('phyle_id').notNull(),
    displayName: varchar('display_name'),
    score: numeric('score').notNull().default('500'),
    rank: enum_agent_reputation_rank('rank'),
    performanceMetrics_totalTasksCompleted: numeric(
      'performance_metrics_total_tasks_completed',
    ).default('0'),
    performanceMetrics_averageQualityScore: numeric('performance_metrics_average_quality_score'),
    performanceMetrics_averageCompletionTime: numeric(
      'performance_metrics_average_completion_time',
    ),
    performanceMetrics_customerSatisfactionScore: numeric(
      'performance_metrics_customer_satisfaction_score',
    ),
    performanceMetrics_reliabilityScore: numeric('performance_metrics_reliability_score'),
    performanceMetrics_collaborationScore: numeric('performance_metrics_collaboration_score'),
    economicImpact_totalEarned: numeric('economic_impact_total_earned').default('0'),
    economicImpact_totalContributed: numeric('economic_impact_total_contributed').default('0'),
    economicImpact_phyleRank: numeric('economic_impact_phyle_rank'),
    economicImpact_economicEfficiency: numeric('economic_impact_economic_efficiency'),
    status: enum_agent_reputation_status('status').default('active'),
    joinedPhyleAt: timestamp('joined_phyle_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    lastActivity: timestamp('last_activity', { mode: 'string', withTimezone: true, precision: 3 }),
    lastUpdated: timestamp('last_updated', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    agent_reputation_agent_id_idx: index('agent_reputation_agent_id_idx').on(columns.agentId),
    agent_reputation_phyle_id_idx: index('agent_reputation_phyle_id_idx').on(columns.phyleId),
    agent_reputation_updated_at_idx: index('agent_reputation_updated_at_idx').on(columns.updatedAt),
    agent_reputation_created_at_idx: index('agent_reputation_created_at_idx').on(columns.createdAt),
    agentId_phyleId_idx: uniqueIndex('agentId_phyleId_idx').on(columns.agentId, columns.phyleId),
    score_idx: index('score_idx').on(columns.score),
    rank_idx: index('rank_idx').on(columns.rank),
  }),
)

export const inventory_messages_photos = pgTable(
  'inventory_messages_photos',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    filename: varchar('filename'),
    url: varchar('url'),
    googlePhotosId: varchar('google_photos_id'),
    timestamp: timestamp('timestamp', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('inventory_messages_photos_order_idx').on(columns._order),
    _parentIDIdx: index('inventory_messages_photos_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [inventory_messages.id],
      name: 'inventory_messages_photos_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const inventory_messages_tags = pgTable(
  'inventory_messages_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag'),
  },
  (columns) => ({
    _orderIdx: index('inventory_messages_tags_order_idx').on(columns._order),
    _parentIDIdx: index('inventory_messages_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [inventory_messages.id],
      name: 'inventory_messages_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const inventory_messages = pgTable(
  'inventory_messages',
  {
    id: serial('id').primaryKey(),
    tenantId: varchar('tenant_id').notNull(),
    guardianAngelId: varchar('guardian_angel_id'),
    userId: varchar('user_id'),
    title: varchar('title').notNull(),
    description: varchar('description'),
    messageType: enum_inventory_messages_message_type('message_type').notNull(),
    category: varchar('category'),
    location: varchar('location'),
    geoCoordinates_latitude: numeric('geo_coordinates_latitude'),
    geoCoordinates_longitude: numeric('geo_coordinates_longitude'),
    meta: jsonb('meta').notNull(),
    analysis: jsonb('analysis'),
    confidence: numeric('confidence'),
    status: enum_inventory_messages_status('status').default('pending'),
    priority: enum_inventory_messages_priority('priority').default('normal'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    inventory_messages_tenant_id_idx: index('inventory_messages_tenant_id_idx').on(
      columns.tenantId,
    ),
    inventory_messages_guardian_angel_id_idx: index('inventory_messages_guardian_angel_id_idx').on(
      columns.guardianAngelId,
    ),
    inventory_messages_user_id_idx: index('inventory_messages_user_id_idx').on(columns.userId),
    inventory_messages_message_type_idx: index('inventory_messages_message_type_idx').on(
      columns.messageType,
    ),
    inventory_messages_category_idx: index('inventory_messages_category_idx').on(columns.category),
    inventory_messages_location_idx: index('inventory_messages_location_idx').on(columns.location),
    inventory_messages_created_at_idx: index('inventory_messages_created_at_idx').on(
      columns.createdAt,
    ),
    inventory_messages_updated_at_idx: index('inventory_messages_updated_at_idx').on(
      columns.updatedAt,
    ),
  }),
)

export const photo_analysis = pgTable(
  'photo_analysis',
  {
    id: serial('id').primaryKey(),
    tenantId: varchar('tenant_id').notNull(),
    guardianAngelId: varchar('guardian_angel_id'),
    sequenceType: enum_photo_analysis_sequence_type('sequence_type').notNull(),
    location: varchar('location'),
    description: varchar('description'),
    photoCount: numeric('photo_count').notNull(),
    analysis: jsonb('analysis').notNull(),
    confidence: numeric('confidence'),
    category: varchar('category'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    photo_analysis_updated_at_idx: index('photo_analysis_updated_at_idx').on(columns.updatedAt),
  }),
)

export const mileage_logs_photos = pgTable(
  'mileage_logs_photos',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    filename: varchar('filename'),
  },
  (columns) => ({
    _orderIdx: index('mileage_logs_photos_order_idx').on(columns._order),
    _parentIDIdx: index('mileage_logs_photos_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [mileage_logs.id],
      name: 'mileage_logs_photos_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const mileage_logs = pgTable(
  'mileage_logs',
  {
    id: serial('id').primaryKey(),
    tenantId: varchar('tenant_id').notNull(),
    odometerReading: numeric('odometer_reading').notNull(),
    vehicle: varchar('vehicle').notNull(),
    location: varchar('location').notNull(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    type: enum_mileage_logs_type('type').notNull(),
    purpose: varchar('purpose'),
    miles: numeric('miles'),
    rate: numeric('rate'),
    deduction: numeric('deduction'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    mileage_logs_updated_at_idx: index('mileage_logs_updated_at_idx').on(columns.updatedAt),
    mileage_logs_created_at_idx: index('mileage_logs_created_at_idx').on(columns.createdAt),
  }),
)

export const quote_requests = pgTable(
  'quote_requests',
  {
    id: serial('id').primaryKey(),
    submissionId: varchar('submission_id').notNull(),
    customerName: varchar('customer_name').notNull(),
    customerEmail: varchar('customer_email').notNull(),
    customerPhone: varchar('customer_phone').notNull(),
    serviceAddress: varchar('service_address').notNull(),
    serviceDescription: varchar('service_description').notNull(),
    serviceType: enum_quote_requests_service_type('service_type'),
    estimatedValue: numeric('estimated_value'),
    status: enum_quote_requests_status('status').notNull().default('pending'),
    priority: enum_quote_requests_priority('priority').default('normal'),
    assignedTo: varchar('assigned_to'),
    notes: varchar('notes'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    quotedAt: timestamp('quoted_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    quote_requests_updated_at_idx: index('quote_requests_updated_at_idx').on(columns.updatedAt),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    categoryID: varchar('category_i_d'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    tenantsID: integer('tenants_id'),
    usersID: integer('users_id'),
    workflowsID: integer('workflows_id'),
    'tenant-membershipsID': integer('tenant_memberships_id'),
    'space-membershipsID': integer('space_memberships_id'),
    appointmentsID: integer('appointments_id'),
    contactsID: integer('contacts_id'),
    messagesID: integer('messages_id'),
    spacesID: integer('spaces_id'),
    'web-chat-sessionsID': integer('web_chat_sessions_id'),
    'channel-managementID': integer('channel_management_id'),
    'social-media-botsID': integer('social_media_bots_id'),
    'linked-accountsID': integer('linked_accounts_id'),
    invoicesID: integer('invoices_id'),
    documentsID: integer('documents_id'),
    donationsID: integer('donations_id'),
    productsID: integer('products_id'),
    ordersID: integer('orders_id'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    organizationsID: integer('organizations_id'),
    venuesID: integer('venues_id'),
    'business-agentsID': integer('business_agents_id'),
    'humanitarian-agentsID': integer('humanitarian_agents_id'),
    'ai-generation-queueID': integer('ai_generation_queue_id'),
    'job-queueID': integer('job_queue_id'),
    channelsID: integer('channels_id'),
    phylesID: integer('phyles_id'),
    'agent-reputationID': integer('agent_reputation_id'),
    'inventory-messagesID': integer('inventory_messages_id'),
    'photo-analysisID': integer('photo_analysis_id'),
    'mileage-logsID': integer('mileage_logs_id'),
    'quote-requestsID': integer('quote_requests_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_tenants_id_idx: index(
      'payload_locked_documents_rels_tenants_id_idx',
    ).on(columns.tenantsID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_workflows_id_idx: index(
      'payload_locked_documents_rels_workflows_id_idx',
    ).on(columns.workflowsID),
    payload_locked_documents_rels_tenant_memberships_id_idx: index(
      'payload_locked_documents_rels_tenant_memberships_id_idx',
    ).on(columns['tenant-membershipsID']),
    payload_locked_documents_rels_space_memberships_id_idx: index(
      'payload_locked_documents_rels_space_memberships_id_idx',
    ).on(columns['space-membershipsID']),
    payload_locked_documents_rels_appointments_id_idx: index(
      'payload_locked_documents_rels_appointments_id_idx',
    ).on(columns.appointmentsID),
    payload_locked_documents_rels_contacts_id_idx: index(
      'payload_locked_documents_rels_contacts_id_idx',
    ).on(columns.contactsID),
    payload_locked_documents_rels_messages_id_idx: index(
      'payload_locked_documents_rels_messages_id_idx',
    ).on(columns.messagesID),
    payload_locked_documents_rels_spaces_id_idx: index(
      'payload_locked_documents_rels_spaces_id_idx',
    ).on(columns.spacesID),
    payload_locked_documents_rels_web_chat_sessions_id_idx: index(
      'payload_locked_documents_rels_web_chat_sessions_id_idx',
    ).on(columns['web-chat-sessionsID']),
    payload_locked_documents_rels_channel_management_id_idx: index(
      'payload_locked_documents_rels_channel_management_id_idx',
    ).on(columns['channel-managementID']),
    payload_locked_documents_rels_social_media_bots_id_idx: index(
      'payload_locked_documents_rels_social_media_bots_id_idx',
    ).on(columns['social-media-botsID']),
    payload_locked_documents_rels_linked_accounts_id_idx: index(
      'payload_locked_documents_rels_linked_accounts_id_idx',
    ).on(columns['linked-accountsID']),
    payload_locked_documents_rels_invoices_id_idx: index(
      'payload_locked_documents_rels_invoices_id_idx',
    ).on(columns.invoicesID),
    payload_locked_documents_rels_documents_id_idx: index(
      'payload_locked_documents_rels_documents_id_idx',
    ).on(columns.documentsID),
    payload_locked_documents_rels_donations_id_idx: index(
      'payload_locked_documents_rels_donations_id_idx',
    ).on(columns.donationsID),
    payload_locked_documents_rels_products_id_idx: index(
      'payload_locked_documents_rels_products_id_idx',
    ).on(columns.productsID),
    payload_locked_documents_rels_orders_id_idx: index(
      'payload_locked_documents_rels_orders_id_idx',
    ).on(columns.ordersID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_organizations_id_idx: index(
      'payload_locked_documents_rels_organizations_id_idx',
    ).on(columns.organizationsID),
    payload_locked_documents_rels_venues_id_idx: index(
      'payload_locked_documents_rels_venues_id_idx',
    ).on(columns.venuesID),
    payload_locked_documents_rels_business_agents_id_idx: index(
      'payload_locked_documents_rels_business_agents_id_idx',
    ).on(columns['business-agentsID']),
    payload_locked_documents_rels_humanitarian_agents_id_idx: index(
      'payload_locked_documents_rels_humanitarian_agents_id_idx',
    ).on(columns['humanitarian-agentsID']),
    payload_locked_documents_rels_ai_generation_queue_id_idx: index(
      'payload_locked_documents_rels_ai_generation_queue_id_idx',
    ).on(columns['ai-generation-queueID']),
    payload_locked_documents_rels_job_queue_id_idx: index(
      'payload_locked_documents_rels_job_queue_id_idx',
    ).on(columns['job-queueID']),
    payload_locked_documents_rels_channels_id_idx: index(
      'payload_locked_documents_rels_channels_id_idx',
    ).on(columns.channelsID),
    payload_locked_documents_rels_phyles_id_idx: index(
      'payload_locked_documents_rels_phyles_id_idx',
    ).on(columns.phylesID),
    payload_locked_documents_rels_agent_reputation_id_idx: index(
      'payload_locked_documents_rels_agent_reputation_id_idx',
    ).on(columns['agent-reputationID']),
    payload_locked_documents_rels_inventory_messages_id_idx: index(
      'payload_locked_documents_rels_inventory_messages_id_idx',
    ).on(columns['inventory-messagesID']),
    payload_locked_documents_rels_photo_analysis_id_idx: index(
      'payload_locked_documents_rels_photo_analysis_id_idx',
    ).on(columns['photo-analysisID']),
    payload_locked_documents_rels_mileage_logs_id_idx: index(
      'payload_locked_documents_rels_mileage_logs_id_idx',
    ).on(columns['mileage-logsID']),
    payload_locked_documents_rels_quote_requests_id_idx: index(
      'payload_locked_documents_rels_quote_requests_id_idx',
    ).on(columns['quote-requestsID']),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    tenantsIdFk: foreignKey({
      columns: [columns['tenantsID']],
      foreignColumns: [tenants.id],
      name: 'payload_locked_documents_rels_tenants_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    workflowsIdFk: foreignKey({
      columns: [columns['workflowsID']],
      foreignColumns: [workflows.id],
      name: 'payload_locked_documents_rels_workflows_fk',
    }).onDelete('cascade'),
    'tenant-membershipsIdFk': foreignKey({
      columns: [columns['tenant-membershipsID']],
      foreignColumns: [tenant_memberships.id],
      name: 'payload_locked_documents_rels_tenant_memberships_fk',
    }).onDelete('cascade'),
    'space-membershipsIdFk': foreignKey({
      columns: [columns['space-membershipsID']],
      foreignColumns: [space_memberships.id],
      name: 'payload_locked_documents_rels_space_memberships_fk',
    }).onDelete('cascade'),
    appointmentsIdFk: foreignKey({
      columns: [columns['appointmentsID']],
      foreignColumns: [appointments.id],
      name: 'payload_locked_documents_rels_appointments_fk',
    }).onDelete('cascade'),
    contactsIdFk: foreignKey({
      columns: [columns['contactsID']],
      foreignColumns: [contacts.id],
      name: 'payload_locked_documents_rels_contacts_fk',
    }).onDelete('cascade'),
    messagesIdFk: foreignKey({
      columns: [columns['messagesID']],
      foreignColumns: [messages.id],
      name: 'payload_locked_documents_rels_messages_fk',
    }).onDelete('cascade'),
    spacesIdFk: foreignKey({
      columns: [columns['spacesID']],
      foreignColumns: [spaces.id],
      name: 'payload_locked_documents_rels_spaces_fk',
    }).onDelete('cascade'),
    'web-chat-sessionsIdFk': foreignKey({
      columns: [columns['web-chat-sessionsID']],
      foreignColumns: [web_chat_sessions.id],
      name: 'payload_locked_documents_rels_web_chat_sessions_fk',
    }).onDelete('cascade'),
    'channel-managementIdFk': foreignKey({
      columns: [columns['channel-managementID']],
      foreignColumns: [channel_management.id],
      name: 'payload_locked_documents_rels_channel_management_fk',
    }).onDelete('cascade'),
    'social-media-botsIdFk': foreignKey({
      columns: [columns['social-media-botsID']],
      foreignColumns: [social_media_bots.id],
      name: 'payload_locked_documents_rels_social_media_bots_fk',
    }).onDelete('cascade'),
    'linked-accountsIdFk': foreignKey({
      columns: [columns['linked-accountsID']],
      foreignColumns: [linked_accounts.id],
      name: 'payload_locked_documents_rels_linked_accounts_fk',
    }).onDelete('cascade'),
    invoicesIdFk: foreignKey({
      columns: [columns['invoicesID']],
      foreignColumns: [invoices.id],
      name: 'payload_locked_documents_rels_invoices_fk',
    }).onDelete('cascade'),
    documentsIdFk: foreignKey({
      columns: [columns['documentsID']],
      foreignColumns: [documents.id],
      name: 'payload_locked_documents_rels_documents_fk',
    }).onDelete('cascade'),
    donationsIdFk: foreignKey({
      columns: [columns['donationsID']],
      foreignColumns: [donations.id],
      name: 'payload_locked_documents_rels_donations_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    ordersIdFk: foreignKey({
      columns: [columns['ordersID']],
      foreignColumns: [orders.id],
      name: 'payload_locked_documents_rels_orders_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    organizationsIdFk: foreignKey({
      columns: [columns['organizationsID']],
      foreignColumns: [organizations.id],
      name: 'payload_locked_documents_rels_organizations_fk',
    }).onDelete('cascade'),
    venuesIdFk: foreignKey({
      columns: [columns['venuesID']],
      foreignColumns: [venues.id],
      name: 'payload_locked_documents_rels_venues_fk',
    }).onDelete('cascade'),
    'business-agentsIdFk': foreignKey({
      columns: [columns['business-agentsID']],
      foreignColumns: [business_agents.id],
      name: 'payload_locked_documents_rels_business_agents_fk',
    }).onDelete('cascade'),
    'humanitarian-agentsIdFk': foreignKey({
      columns: [columns['humanitarian-agentsID']],
      foreignColumns: [humanitarian_agents.id],
      name: 'payload_locked_documents_rels_humanitarian_agents_fk',
    }).onDelete('cascade'),
    'ai-generation-queueIdFk': foreignKey({
      columns: [columns['ai-generation-queueID']],
      foreignColumns: [ai_generation_queue.id],
      name: 'payload_locked_documents_rels_ai_generation_queue_fk',
    }).onDelete('cascade'),
    'job-queueIdFk': foreignKey({
      columns: [columns['job-queueID']],
      foreignColumns: [job_queue.id],
      name: 'payload_locked_documents_rels_job_queue_fk',
    }).onDelete('cascade'),
    channelsIdFk: foreignKey({
      columns: [columns['channelsID']],
      foreignColumns: [channels.id],
      name: 'payload_locked_documents_rels_channels_fk',
    }).onDelete('cascade'),
    phylesIdFk: foreignKey({
      columns: [columns['phylesID']],
      foreignColumns: [phyles.id],
      name: 'payload_locked_documents_rels_phyles_fk',
    }).onDelete('cascade'),
    'agent-reputationIdFk': foreignKey({
      columns: [columns['agent-reputationID']],
      foreignColumns: [agent_reputation.id],
      name: 'payload_locked_documents_rels_agent_reputation_fk',
    }).onDelete('cascade'),
    'inventory-messagesIdFk': foreignKey({
      columns: [columns['inventory-messagesID']],
      foreignColumns: [inventory_messages.id],
      name: 'payload_locked_documents_rels_inventory_messages_fk',
    }).onDelete('cascade'),
    'photo-analysisIdFk': foreignKey({
      columns: [columns['photo-analysisID']],
      foreignColumns: [photo_analysis.id],
      name: 'payload_locked_documents_rels_photo_analysis_fk',
    }).onDelete('cascade'),
    'mileage-logsIdFk': foreignKey({
      columns: [columns['mileage-logsID']],
      foreignColumns: [mileage_logs.id],
      name: 'payload_locked_documents_rels_mileage_logs_fk',
    }).onDelete('cascade'),
    'quote-requestsIdFk': foreignKey({
      columns: [columns['quote-requestsID']],
      foreignColumns: [quote_requests.id],
      name: 'payload_locked_documents_rels_quote_requests_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    header_rels_products_id_idx: index('header_rels_products_id_idx').on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'header_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    footer_rels_posts_id_idx: index('footer_rels_posts_id_idx').on(columns.postsID),
    footer_rels_products_id_idx: index('footer_rels_products_id_idx').on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'footer_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'footer_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_tenants = relations(tenants, ({ one }) => ({
  referralProgram_referredBy: one(users, {
    fields: [tenants.referralProgram_referredBy],
    references: [users.id],
    relationName: 'referralProgram_referredBy',
  }),
  configuration_logo: one(media, {
    fields: [tenants.configuration_logo],
    references: [media.id],
    relationName: 'configuration_logo',
  }),
  configuration_favicon: one(media, {
    fields: [tenants.configuration_favicon],
    references: [media.id],
    relationName: 'configuration_favicon',
  }),
}))
export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: 'roles',
  }),
}))
export const relations_users_karma_contribution_types = relations(
  users_karma_contribution_types,
  ({ one }) => ({
    parent: one(users, {
      fields: [users_karma_contribution_types.parent],
      references: [users.id],
      relationName: 'karma_contributionTypes',
    }),
  }),
)
export const relations_users_karma_recognitions = relations(
  users_karma_recognitions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_karma_recognitions._parentID],
      references: [users.id],
      relationName: 'karma_recognitions',
    }),
    awardedBy: one(users, {
      fields: [users_karma_recognitions.awardedBy],
      references: [users.id],
      relationName: 'awardedBy',
    }),
  }),
)
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ one, many }) => ({
  profileImage: one(media, {
    fields: [users.profileImage],
    references: [media.id],
    relationName: 'profileImage',
  }),
  tenant: one(tenants, {
    fields: [users.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  roles: many(users_roles, {
    relationName: 'roles',
  }),
  karma_contributionTypes: many(users_karma_contribution_types, {
    relationName: 'karma_contributionTypes',
  }),
  karma_recognitions: many(users_karma_recognitions, {
    relationName: 'karma_recognitions',
  }),
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_workflows_steps = relations(workflows_steps, ({ one }) => ({
  _parentID: one(workflows, {
    fields: [workflows_steps._parentID],
    references: [workflows.id],
    relationName: 'steps',
  }),
}))
export const relations_workflows_ethical_framework_bias_checkpoints = relations(
  workflows_ethical_framework_bias_checkpoints,
  ({ one }) => ({
    _parentID: one(workflows, {
      fields: [workflows_ethical_framework_bias_checkpoints._parentID],
      references: [workflows.id],
      relationName: 'ethicalFramework_biasCheckpoints',
    }),
  }),
)
export const relations_workflows_ethical_framework_value_alignment = relations(
  workflows_ethical_framework_value_alignment,
  ({ one }) => ({
    parent: one(workflows, {
      fields: [workflows_ethical_framework_value_alignment.parent],
      references: [workflows.id],
      relationName: 'ethicalFramework_valueAlignment',
    }),
  }),
)
export const relations_workflows_change_log = relations(workflows_change_log, ({ one }) => ({
  _parentID: one(workflows, {
    fields: [workflows_change_log._parentID],
    references: [workflows.id],
    relationName: 'changeLog',
  }),
  changedBy: one(users, {
    fields: [workflows_change_log.changedBy],
    references: [users.id],
    relationName: 'changedBy',
  }),
}))
export const relations_workflows_rels = relations(workflows_rels, ({ one }) => ({
  parent: one(workflows, {
    fields: [workflows_rels.parent],
    references: [workflows.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [workflows_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_workflows = relations(workflows, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [workflows.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  steps: many(workflows_steps, {
    relationName: 'steps',
  }),
  ethicalFramework_biasCheckpoints: many(workflows_ethical_framework_bias_checkpoints, {
    relationName: 'ethicalFramework_biasCheckpoints',
  }),
  ethicalFramework_valueAlignment: many(workflows_ethical_framework_value_alignment, {
    relationName: 'ethicalFramework_valueAlignment',
  }),
  changeLog: many(workflows_change_log, {
    relationName: 'changeLog',
  }),
  _rels: many(workflows_rels, {
    relationName: '_rels',
  }),
}))
export const relations_tenant_memberships_permissions = relations(
  tenant_memberships_permissions,
  ({ one }) => ({
    parent: one(tenant_memberships, {
      fields: [tenant_memberships_permissions.parent],
      references: [tenant_memberships.id],
      relationName: 'permissions',
    }),
  }),
)
export const relations_tenant_memberships = relations(tenant_memberships, ({ one, many }) => ({
  user: one(users, {
    fields: [tenant_memberships.user],
    references: [users.id],
    relationName: 'user',
  }),
  tenant: one(tenants, {
    fields: [tenant_memberships.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  permissions: many(tenant_memberships_permissions, {
    relationName: 'permissions',
  }),
  invitedBy: one(users, {
    fields: [tenant_memberships.invitedBy],
    references: [users.id],
    relationName: 'invitedBy',
  }),
}))
export const relations_space_memberships_custom_permissions = relations(
  space_memberships_custom_permissions,
  ({ one }) => ({
    parent: one(space_memberships, {
      fields: [space_memberships_custom_permissions.parent],
      references: [space_memberships.id],
      relationName: 'customPermissions',
    }),
  }),
)
export const relations_space_memberships_crm_data_conversion_events = relations(
  space_memberships_crm_data_conversion_events,
  ({ one }) => ({
    _parentID: one(space_memberships, {
      fields: [space_memberships_crm_data_conversion_events._parentID],
      references: [space_memberships.id],
      relationName: 'crmData_conversionEvents',
    }),
  }),
)
export const relations_space_memberships_texts = relations(space_memberships_texts, ({ one }) => ({
  parent: one(space_memberships, {
    fields: [space_memberships_texts.parent],
    references: [space_memberships.id],
    relationName: '_texts',
  }),
}))
export const relations_space_memberships = relations(space_memberships, ({ one, many }) => ({
  user: one(users, {
    fields: [space_memberships.user],
    references: [users.id],
    relationName: 'user',
  }),
  space: one(spaces, {
    fields: [space_memberships.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  tenantMembership: one(tenant_memberships, {
    fields: [space_memberships.tenantMembership],
    references: [tenant_memberships.id],
    relationName: 'tenantMembership',
  }),
  customPermissions: many(space_memberships_custom_permissions, {
    relationName: 'customPermissions',
  }),
  crmData_conversionEvents: many(space_memberships_crm_data_conversion_events, {
    relationName: 'crmData_conversionEvents',
  }),
  _texts: many(space_memberships_texts, {
    relationName: '_texts',
  }),
}))
export const relations_appointments_reminders_sent = relations(
  appointments_reminders_sent,
  ({ one }) => ({
    _parentID: one(appointments, {
      fields: [appointments_reminders_sent._parentID],
      references: [appointments.id],
      relationName: 'remindersSent',
    }),
  }),
)
export const relations_appointments_rels = relations(appointments_rels, ({ one }) => ({
  parent: one(appointments, {
    fields: [appointments_rels.parent],
    references: [appointments.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [appointments_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_appointments = relations(appointments, ({ one, many }) => ({
  organizer: one(users, {
    fields: [appointments.organizer],
    references: [users.id],
    relationName: 'organizer',
  }),
  space: one(spaces, {
    fields: [appointments.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  venue: one(venues, {
    fields: [appointments.venue],
    references: [venues.id],
    relationName: 'venue',
  }),
  tenant: one(tenants, {
    fields: [appointments.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  remindersSent: many(appointments_reminders_sent, {
    relationName: 'remindersSent',
  }),
  _rels: many(appointments_rels, {
    relationName: '_rels',
  }),
}))
export const relations_contacts_addresses = relations(contacts_addresses, ({ one }) => ({
  _parentID: one(contacts, {
    fields: [contacts_addresses._parentID],
    references: [contacts.id],
    relationName: 'addresses',
  }),
}))
export const relations_contacts_texts = relations(contacts_texts, ({ one }) => ({
  parent: one(contacts, {
    fields: [contacts_texts.parent],
    references: [contacts.id],
    relationName: '_texts',
  }),
}))
export const relations_contacts = relations(contacts, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [contacts.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  user: one(users, {
    fields: [contacts.user],
    references: [users.id],
    relationName: 'user',
  }),
  crm_assignedTo: one(users, {
    fields: [contacts.crm_assignedTo],
    references: [users.id],
    relationName: 'crm_assignedTo',
  }),
  addresses: many(contacts_addresses, {
    relationName: 'addresses',
  }),
  _texts: many(contacts_texts, {
    relationName: '_texts',
  }),
}))
export const relations_messages_rels = relations(messages_rels, ({ one }) => ({
  parent: one(messages, {
    fields: [messages_rels.parent],
    references: [messages.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [messages_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  mediaID: one(media, {
    fields: [messages_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_messages = relations(messages, ({ one, many }) => ({
  sender: one(users, {
    fields: [messages.sender],
    references: [users.id],
    relationName: 'sender',
  }),
  space: one(spaces, {
    fields: [messages.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  channel: one(channels, {
    fields: [messages.channel],
    references: [channels.id],
    relationName: 'channel',
  }),
  replyToId: one(messages, {
    fields: [messages.replyToId],
    references: [messages.id],
    relationName: 'replyToId',
  }),
  _rels: many(messages_rels, {
    relationName: '_rels',
  }),
}))
export const relations_spaces_commerce_settings_payment_methods = relations(
  spaces_commerce_settings_payment_methods,
  ({ one }) => ({
    parent: one(spaces, {
      fields: [spaces_commerce_settings_payment_methods.parent],
      references: [spaces.id],
      relationName: 'commerceSettings_paymentMethods',
    }),
  }),
)
export const relations_spaces_commerce_settings_shipping_zones = relations(
  spaces_commerce_settings_shipping_zones,
  ({ one }) => ({
    parent: one(spaces, {
      fields: [spaces_commerce_settings_shipping_zones.parent],
      references: [spaces.id],
      relationName: 'commerceSettings_shippingZones',
    }),
  }),
)
export const relations_sub_tiers_content_access = relations(
  sub_tiers_content_access,
  ({ one }) => ({
    parent: one(sub_tiers, {
      fields: [sub_tiers_content_access.parent],
      references: [sub_tiers.id],
      relationName: 'contentAccess',
    }),
  }),
)
export const relations_sub_tiers = relations(sub_tiers, ({ one, many }) => ({
  _parentID: one(spaces, {
    fields: [sub_tiers._parentID],
    references: [spaces.id],
    relationName: 'monetization_subscriptionTiers',
  }),
  contentAccess: many(sub_tiers_content_access, {
    relationName: 'contentAccess',
  }),
}))
export const relations_spaces_monetization_ai_opt_factors = relations(
  spaces_monetization_ai_opt_factors,
  ({ one }) => ({
    parent: one(spaces, {
      fields: [spaces_monetization_ai_opt_factors.parent],
      references: [spaces.id],
      relationName: 'monetization_aiOptFactors',
    }),
  }),
)
export const relations_spaces_integrations_print_partners_product_catalog = relations(
  spaces_integrations_print_partners_product_catalog,
  ({ one }) => ({
    parent: one(spaces_integrations_print_partners, {
      fields: [spaces_integrations_print_partners_product_catalog.parent],
      references: [spaces_integrations_print_partners.id],
      relationName: 'productCatalog',
    }),
  }),
)
export const relations_spaces_integrations_print_partners = relations(
  spaces_integrations_print_partners,
  ({ one, many }) => ({
    _parentID: one(spaces, {
      fields: [spaces_integrations_print_partners._parentID],
      references: [spaces.id],
      relationName: 'integrations_printPartners',
    }),
    productCatalog: many(spaces_integrations_print_partners_product_catalog, {
      relationName: 'productCatalog',
    }),
  }),
)
export const relations_spaces_integrations_social_bots_platforms = relations(
  spaces_integrations_social_bots_platforms,
  ({ one }) => ({
    parent: one(spaces, {
      fields: [spaces_integrations_social_bots_platforms.parent],
      references: [spaces.id],
      relationName: 'integrations_socialBots_platforms',
    }),
  }),
)
export const relations_spaces_texts = relations(spaces_texts, ({ one }) => ({
  parent: one(spaces, {
    fields: [spaces_texts.parent],
    references: [spaces.id],
    relationName: '_texts',
  }),
}))
export const relations_spaces = relations(spaces, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [spaces.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  commerceSettings_paymentMethods: many(spaces_commerce_settings_payment_methods, {
    relationName: 'commerceSettings_paymentMethods',
  }),
  commerceSettings_shippingZones: many(spaces_commerce_settings_shipping_zones, {
    relationName: 'commerceSettings_shippingZones',
  }),
  monetization_subscriptionTiers: many(sub_tiers, {
    relationName: 'monetization_subscriptionTiers',
  }),
  monetization_aiOptFactors: many(spaces_monetization_ai_opt_factors, {
    relationName: 'monetization_aiOptFactors',
  }),
  integrations_printPartners: many(spaces_integrations_print_partners, {
    relationName: 'integrations_printPartners',
  }),
  integrations_socialBots_platforms: many(spaces_integrations_social_bots_platforms, {
    relationName: 'integrations_socialBots_platforms',
  }),
  theme_logo: one(media, {
    fields: [spaces.theme_logo],
    references: [media.id],
    relationName: 'theme_logo',
  }),
  theme_banner: one(media, {
    fields: [spaces.theme_banner],
    references: [media.id],
    relationName: 'theme_banner',
  }),
  _texts: many(spaces_texts, {
    relationName: '_texts',
  }),
}))
export const relations_web_chat_sessions_rels = relations(web_chat_sessions_rels, ({ one }) => ({
  parent: one(web_chat_sessions, {
    fields: [web_chat_sessions_rels.parent],
    references: [web_chat_sessions.id],
    relationName: '_rels',
  }),
  messagesID: one(messages, {
    fields: [web_chat_sessions_rels.messagesID],
    references: [messages.id],
    relationName: 'messages',
  }),
}))
export const relations_web_chat_sessions = relations(web_chat_sessions, ({ one, many }) => ({
  space: one(spaces, {
    fields: [web_chat_sessions.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  customer: one(contacts, {
    fields: [web_chat_sessions.customer],
    references: [contacts.id],
    relationName: 'customer',
  }),
  assignedAgent: one(users, {
    fields: [web_chat_sessions.assignedAgent],
    references: [users.id],
    relationName: 'assignedAgent',
  }),
  tenant: one(tenants, {
    fields: [web_chat_sessions.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  _rels: many(web_chat_sessions_rels, {
    relationName: '_rels',
  }),
}))
export const relations_channel_management_rels = relations(channel_management_rels, ({ one }) => ({
  parent: one(channel_management, {
    fields: [channel_management_rels.parent],
    references: [channel_management.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [channel_management_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_channel_management = relations(channel_management, ({ one, many }) => ({
  space: one(spaces, {
    fields: [channel_management.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  _rels: many(channel_management_rels, {
    relationName: '_rels',
  }),
}))
export const relations_social_media_bots = relations(social_media_bots, ({ one }) => ({
  tenant: one(tenants, {
    fields: [social_media_bots.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  space: one(spaces, {
    fields: [social_media_bots.space],
    references: [spaces.id],
    relationName: 'space',
  }),
}))
export const relations_linked_accounts = relations(linked_accounts, ({ one }) => ({
  user: one(users, {
    fields: [linked_accounts.user],
    references: [users.id],
    relationName: 'user',
  }),
  tenant: one(tenants, {
    fields: [linked_accounts.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
}))
export const relations_invoices_itemized_list = relations(invoices_itemized_list, ({ one }) => ({
  _parentID: one(invoices, {
    fields: [invoices_itemized_list._parentID],
    references: [invoices.id],
    relationName: 'itemizedList',
  }),
}))
export const relations_invoices_payment_methods = relations(
  invoices_payment_methods,
  ({ one }) => ({
    parent: one(invoices, {
      fields: [invoices_payment_methods.parent],
      references: [invoices.id],
      relationName: 'paymentMethods',
    }),
  }),
)
export const relations_invoices = relations(invoices, ({ one, many }) => ({
  itemizedList: many(invoices_itemized_list, {
    relationName: 'itemizedList',
  }),
  paymentMethods: many(invoices_payment_methods, {
    relationName: 'paymentMethods',
  }),
  tenant: one(tenants, {
    fields: [invoices.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
}))
export const relations_documents_signers = relations(documents_signers, ({ one }) => ({
  _parentID: one(documents, {
    fields: [documents_signers._parentID],
    references: [documents.id],
    relationName: 'signers',
  }),
}))
export const relations_documents = relations(documents, ({ one, many }) => ({
  signers: many(documents_signers, {
    relationName: 'signers',
  }),
  tenant: one(tenants, {
    fields: [documents.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
}))
export const relations_donations = relations(donations, ({ one }) => ({
  tenant: one(tenants, {
    fields: [donations.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  space: one(spaces, {
    fields: [donations.space],
    references: [spaces.id],
    relationName: 'space',
  }),
}))
export const relations_products_hero_links = relations(products_hero_links, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_hero_links._parentID],
    references: [products.id],
    relationName: 'hero_links',
  }),
}))
export const relations_products_gallery = relations(products_gallery, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_gallery._parentID],
    references: [products.id],
    relationName: 'gallery',
  }),
  image: one(media, {
    fields: [products_gallery.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_products_blocks_cta_links = relations(
  products_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(products_blocks_cta, {
      fields: [products_blocks_cta_links._parentID],
      references: [products_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations_products_blocks_cta = relations(products_blocks_cta, ({ one, many }) => ({
  _parentID: one(products, {
    fields: [products_blocks_cta._parentID],
    references: [products.id],
    relationName: '_blocks_cta',
  }),
  links: many(products_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_products_blocks_content_columns = relations(
  products_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(products_blocks_content, {
      fields: [products_blocks_content_columns._parentID],
      references: [products_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_products_blocks_content = relations(
  products_blocks_content,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_blocks_content._parentID],
      references: [products.id],
      relationName: '_blocks_content',
    }),
    columns: many(products_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations_products_blocks_media_block = relations(
  products_blocks_media_block,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_blocks_media_block._parentID],
      references: [products.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [products_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_products_blocks_archive = relations(products_blocks_archive, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_blocks_archive._parentID],
    references: [products.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_products_blocks_form_block = relations(
  products_blocks_form_block,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_blocks_form_block._parentID],
      references: [products.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [products_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations_products_digital_assets = relations(products_digital_assets, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_digital_assets._parentID],
    references: [products.id],
    relationName: 'digitalAssets',
  }),
  file: one(media, {
    fields: [products_digital_assets.file],
    references: [media.id],
    relationName: 'file',
  }),
}))
export const relations_products_tags = relations(products_tags, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_tags._parentID],
    references: [products.id],
    relationName: 'tags',
  }),
}))
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [products_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [products_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [products_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [products_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_products = relations(products, ({ one, many }) => ({
  hero_links: many(products_hero_links, {
    relationName: 'hero_links',
  }),
  hero_media: one(media, {
    fields: [products.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  gallery: many(products_gallery, {
    relationName: 'gallery',
  }),
  _blocks_cta: many(products_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(products_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(products_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(products_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(products_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  digitalAssets: many(products_digital_assets, {
    relationName: 'digitalAssets',
  }),
  tags: many(products_tags, {
    relationName: 'tags',
  }),
  meta_image: one(media, {
    fields: [products.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  tenant: one(tenants, {
    fields: [products.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  _rels: many(products_rels, {
    relationName: '_rels',
  }),
}))
export const relations__products_v_version_hero_links = relations(
  _products_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_hero_links._parentID],
      references: [_products_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__products_v_version_gallery = relations(
  _products_v_version_gallery,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_gallery._parentID],
      references: [_products_v.id],
      relationName: 'version_gallery',
    }),
    image: one(media, {
      fields: [_products_v_version_gallery.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__products_v_blocks_cta_links = relations(
  _products_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_products_v_blocks_cta, {
      fields: [_products_v_blocks_cta_links._parentID],
      references: [_products_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__products_v_blocks_cta = relations(
  _products_v_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_cta._parentID],
      references: [_products_v.id],
      relationName: '_blocks_cta',
    }),
    links: many(_products_v_blocks_cta_links, {
      relationName: 'links',
    }),
  }),
)
export const relations__products_v_blocks_content_columns = relations(
  _products_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_products_v_blocks_content, {
      fields: [_products_v_blocks_content_columns._parentID],
      references: [_products_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__products_v_blocks_content = relations(
  _products_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_content._parentID],
      references: [_products_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_products_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__products_v_blocks_media_block = relations(
  _products_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_media_block._parentID],
      references: [_products_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_products_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__products_v_blocks_archive = relations(
  _products_v_blocks_archive,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_archive._parentID],
      references: [_products_v.id],
      relationName: '_blocks_archive',
    }),
  }),
)
export const relations__products_v_blocks_form_block = relations(
  _products_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_form_block._parentID],
      references: [_products_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_products_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__products_v_version_digital_assets = relations(
  _products_v_version_digital_assets,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_digital_assets._parentID],
      references: [_products_v.id],
      relationName: 'version_digitalAssets',
    }),
    file: one(media, {
      fields: [_products_v_version_digital_assets.file],
      references: [media.id],
      relationName: 'file',
    }),
  }),
)
export const relations__products_v_version_tags = relations(
  _products_v_version_tags,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_tags._parentID],
      references: [_products_v.id],
      relationName: 'version_tags',
    }),
  }),
)
export const relations__products_v_rels = relations(_products_v_rels, ({ one }) => ({
  parent: one(_products_v, {
    fields: [_products_v_rels.parent],
    references: [_products_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_products_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_products_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [_products_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [_products_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__products_v = relations(_products_v, ({ one, many }) => ({
  parent: one(products, {
    fields: [_products_v.parent],
    references: [products.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_products_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_media: one(media, {
    fields: [_products_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  version_gallery: many(_products_v_version_gallery, {
    relationName: 'version_gallery',
  }),
  _blocks_cta: many(_products_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_products_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_products_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_products_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_products_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  version_digitalAssets: many(_products_v_version_digital_assets, {
    relationName: 'version_digitalAssets',
  }),
  version_tags: many(_products_v_version_tags, {
    relationName: 'version_tags',
  }),
  version_meta_image: one(media, {
    fields: [_products_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_tenant: one(tenants, {
    fields: [_products_v.version_tenant],
    references: [tenants.id],
    relationName: 'version_tenant',
  }),
  _rels: many(_products_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_orders_line_items = relations(orders_line_items, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_line_items._parentID],
    references: [orders.id],
    relationName: 'lineItems',
  }),
  product: one(products, {
    fields: [orders_line_items.product],
    references: [products.id],
    relationName: 'product',
  }),
}))
export const relations_orders = relations(orders, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [orders.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  customer: one(users, {
    fields: [orders.customer],
    references: [users.id],
    relationName: 'customer',
  }),
  lineItems: many(orders_line_items, {
    relationName: 'lineItems',
  }),
}))
export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: 'hero_links',
  }),
}))
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [pages_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [_pages_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_organizations_members = relations(organizations_members, ({ one }) => ({
  _parentID: one(organizations, {
    fields: [organizations_members._parentID],
    references: [organizations.id],
    relationName: 'members',
  }),
  user: one(users, {
    fields: [organizations_members.user],
    references: [users.id],
    relationName: 'user',
  }),
}))
export const relations_organizations_billing_settings_sharing_discounts = relations(
  organizations_billing_settings_sharing_discounts,
  ({ one }) => ({
    _parentID: one(organizations, {
      fields: [organizations_billing_settings_sharing_discounts._parentID],
      references: [organizations.id],
      relationName: 'billingSettings_sharing_discounts',
    }),
  }),
)
export const relations_organizations_ops_settings_hours_schedule = relations(
  organizations_ops_settings_hours_schedule,
  ({ one }) => ({
    _parentID: one(organizations, {
      fields: [organizations_ops_settings_hours_schedule._parentID],
      references: [organizations.id],
      relationName: 'opsSettings_hours_schedule',
    }),
  }),
)
export const relations_organizations_integration_websites = relations(
  organizations_integration_websites,
  ({ one }) => ({
    _parentID: one(organizations, {
      fields: [organizations_integration_websites._parentID],
      references: [organizations.id],
      relationName: 'integration_websites',
    }),
  }),
)
export const relations_organizations_analytics_recipients = relations(
  organizations_analytics_recipients,
  ({ one }) => ({
    _parentID: one(organizations, {
      fields: [organizations_analytics_recipients._parentID],
      references: [organizations.id],
      relationName: 'analytics_recipients',
    }),
  }),
)
export const relations_organizations = relations(organizations, ({ one, many }) => ({
  logo: one(media, {
    fields: [organizations.logo],
    references: [media.id],
    relationName: 'logo',
  }),
  members: many(organizations_members, {
    relationName: 'members',
  }),
  billingSettings_sharing_discounts: many(organizations_billing_settings_sharing_discounts, {
    relationName: 'billingSettings_sharing_discounts',
  }),
  opsSettings_hours_schedule: many(organizations_ops_settings_hours_schedule, {
    relationName: 'opsSettings_hours_schedule',
  }),
  integration_websites: many(organizations_integration_websites, {
    relationName: 'integration_websites',
  }),
  analytics_recipients: many(organizations_analytics_recipients, {
    relationName: 'analytics_recipients',
  }),
}))
export const relations_venues_business_hours_schedule = relations(
  venues_business_hours_schedule,
  ({ one }) => ({
    _parentID: one(venues, {
      fields: [venues_business_hours_schedule._parentID],
      references: [venues.id],
      relationName: 'businessHours_schedule',
    }),
  }),
)
export const relations_venues_business_hours_special_hours = relations(
  venues_business_hours_special_hours,
  ({ one }) => ({
    _parentID: one(venues, {
      fields: [venues_business_hours_special_hours._parentID],
      references: [venues.id],
      relationName: 'businessHours_specialHours',
    }),
  }),
)
export const relations_venues_staff_specialties = relations(
  venues_staff_specialties,
  ({ one }) => ({
    _parentID: one(venues_staff, {
      fields: [venues_staff_specialties._parentID],
      references: [venues_staff.id],
      relationName: 'specialties',
    }),
  }),
)
export const relations_venues_staff_schedule_availability = relations(
  venues_staff_schedule_availability,
  ({ one }) => ({
    _parentID: one(venues_staff, {
      fields: [venues_staff_schedule_availability._parentID],
      references: [venues_staff.id],
      relationName: 'schedule_availability',
    }),
  }),
)
export const relations_venues_staff = relations(venues_staff, ({ one, many }) => ({
  _parentID: one(venues, {
    fields: [venues_staff._parentID],
    references: [venues.id],
    relationName: 'staff',
  }),
  user: one(users, {
    fields: [venues_staff.user],
    references: [users.id],
    relationName: 'user',
  }),
  specialties: many(venues_staff_specialties, {
    relationName: 'specialties',
  }),
  schedule_availability: many(venues_staff_schedule_availability, {
    relationName: 'schedule_availability',
  }),
}))
export const relations_venues_services = relations(venues_services, ({ one }) => ({
  _parentID: one(venues, {
    fields: [venues_services._parentID],
    references: [venues.id],
    relationName: 'services',
  }),
}))
export const relations_venues_bay_management_bays = relations(
  venues_bay_management_bays,
  ({ one }) => ({
    _parentID: one(venues, {
      fields: [venues_bay_management_bays._parentID],
      references: [venues.id],
      relationName: 'bayManagement_bays',
    }),
  }),
)
export const relations_venues_integrations_payment_methods = relations(
  venues_integrations_payment_methods,
  ({ one }) => ({
    _parentID: one(venues, {
      fields: [venues_integrations_payment_methods._parentID],
      references: [venues.id],
      relationName: 'integrations_payment_methods',
    }),
  }),
)
export const relations_venues_guardian_angel_custom_services = relations(
  venues_guardian_angel_custom_services,
  ({ one }) => ({
    _parentID: one(venues, {
      fields: [venues_guardian_angel_custom_services._parentID],
      references: [venues.id],
      relationName: 'guardianAngel_custom_services',
    }),
  }),
)
export const relations_venues = relations(venues, ({ one, many }) => ({
  organization: one(organizations, {
    fields: [venues.organization],
    references: [organizations.id],
    relationName: 'organization',
  }),
  businessHours_schedule: many(venues_business_hours_schedule, {
    relationName: 'businessHours_schedule',
  }),
  businessHours_specialHours: many(venues_business_hours_special_hours, {
    relationName: 'businessHours_specialHours',
  }),
  staff: many(venues_staff, {
    relationName: 'staff',
  }),
  services: many(venues_services, {
    relationName: 'services',
  }),
  bayManagement_bays: many(venues_bay_management_bays, {
    relationName: 'bayManagement_bays',
  }),
  integrations_payment_methods: many(venues_integrations_payment_methods, {
    relationName: 'integrations_payment_methods',
  }),
  guardianAngel_assignedAngel: one(business_agents, {
    fields: [venues.guardianAngel_assignedAngel],
    references: [business_agents.id],
    relationName: 'guardianAngel_assignedAngel',
  }),
  guardianAngel_custom_services: many(venues_guardian_angel_custom_services, {
    relationName: 'guardianAngel_custom_services',
  }),
}))
export const relations_business_agents_business_knowledge_services = relations(
  business_agents_business_knowledge_services,
  ({ one }) => ({
    _parentID: one(business_agents, {
      fields: [business_agents_business_knowledge_services._parentID],
      references: [business_agents.id],
      relationName: 'businessKnowledge_services',
    }),
  }),
)
export const relations_business_agents_business_knowledge_customer_stories = relations(
  business_agents_business_knowledge_customer_stories,
  ({ one }) => ({
    _parentID: one(business_agents, {
      fields: [business_agents_business_knowledge_customer_stories._parentID],
      references: [business_agents.id],
      relationName: 'businessKnowledge_customerStories',
    }),
  }),
)
export const relations_business_agents_business_knowledge_frequent_questions = relations(
  business_agents_business_knowledge_frequent_questions,
  ({ one }) => ({
    _parentID: one(business_agents, {
      fields: [business_agents_business_knowledge_frequent_questions._parentID],
      references: [business_agents.id],
      relationName: 'businessKnowledge_frequentQuestions',
    }),
  }),
)
export const relations_business_agents_ops_hours_schedule = relations(
  business_agents_ops_hours_schedule,
  ({ one }) => ({
    _parentID: one(business_agents, {
      fields: [business_agents_ops_hours_schedule._parentID],
      references: [business_agents.id],
      relationName: 'ops_hours_schedule',
    }),
  }),
)
export const relations_business_agents_ops_handoff_triggers = relations(
  business_agents_ops_handoff_triggers,
  ({ one }) => ({
    _parentID: one(business_agents, {
      fields: [business_agents_ops_handoff_triggers._parentID],
      references: [business_agents.id],
      relationName: 'ops_handoffTriggers',
    }),
  }),
)
export const relations_business_agents_humanitarian_legal_databases = relations(
  business_agents_humanitarian_legal_databases,
  ({ one }) => ({
    parent: one(business_agents, {
      fields: [business_agents_humanitarian_legal_databases.parent],
      references: [business_agents.id],
      relationName: 'humanitarian_legal_databases',
    }),
  }),
)
export const relations_business_agents_humanitarian_news_curation_content_filters = relations(
  business_agents_humanitarian_news_curation_content_filters,
  ({ one }) => ({
    parent: one(business_agents, {
      fields: [business_agents_humanitarian_news_curation_content_filters.parent],
      references: [business_agents.id],
      relationName: 'humanitarian_newsCuration_contentFilters',
    }),
  }),
)
export const relations_business_agents_humanitarian_resources_vendors = relations(
  business_agents_humanitarian_resources_vendors,
  ({ one }) => ({
    _parentID: one(business_agents, {
      fields: [business_agents_humanitarian_resources_vendors._parentID],
      references: [business_agents.id],
      relationName: 'humanitarian_resources_vendors',
    }),
  }),
)
export const relations_business_agents_humanitarian_avatar_scope = relations(
  business_agents_humanitarian_avatar_scope,
  ({ one }) => ({
    parent: one(business_agents, {
      fields: [business_agents_humanitarian_avatar_scope.parent],
      references: [business_agents.id],
      relationName: 'humanitarian_avatar_scope',
    }),
  }),
)
export const relations_business_agents_vapi_integration_allowed_actions = relations(
  business_agents_vapi_integration_allowed_actions,
  ({ one }) => ({
    parent: one(business_agents, {
      fields: [business_agents_vapi_integration_allowed_actions.parent],
      references: [business_agents.id],
      relationName: 'vapiIntegration_allowedActions',
    }),
  }),
)
export const relations_business_agents = relations(business_agents, ({ one, many }) => ({
  avatar: one(media, {
    fields: [business_agents.avatar],
    references: [media.id],
    relationName: 'avatar',
  }),
  tenant: one(tenants, {
    fields: [business_agents.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  space: one(spaces, {
    fields: [business_agents.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  humanPartner: one(users, {
    fields: [business_agents.humanPartner],
    references: [users.id],
    relationName: 'humanPartner',
  }),
  businessKnowledge_services: many(business_agents_business_knowledge_services, {
    relationName: 'businessKnowledge_services',
  }),
  businessKnowledge_customerStories: many(business_agents_business_knowledge_customer_stories, {
    relationName: 'businessKnowledge_customerStories',
  }),
  businessKnowledge_frequentQuestions: many(business_agents_business_knowledge_frequent_questions, {
    relationName: 'businessKnowledge_frequentQuestions',
  }),
  ops_hours_schedule: many(business_agents_ops_hours_schedule, {
    relationName: 'ops_hours_schedule',
  }),
  ops_handoffTriggers: many(business_agents_ops_handoff_triggers, {
    relationName: 'ops_handoffTriggers',
  }),
  humanitarian_legal_databases: many(business_agents_humanitarian_legal_databases, {
    relationName: 'humanitarian_legal_databases',
  }),
  humanitarian_newsCuration_contentFilters: many(
    business_agents_humanitarian_news_curation_content_filters,
    {
      relationName: 'humanitarian_newsCuration_contentFilters',
    },
  ),
  humanitarian_resources_vendors: many(business_agents_humanitarian_resources_vendors, {
    relationName: 'humanitarian_resources_vendors',
  }),
  humanitarian_avatar_scope: many(business_agents_humanitarian_avatar_scope, {
    relationName: 'humanitarian_avatar_scope',
  }),
  vapiIntegration_allowedActions: many(business_agents_vapi_integration_allowed_actions, {
    relationName: 'vapiIntegration_allowedActions',
  }),
}))
export const relations_humanitarian_agents_legal_advocacy_legal_databases = relations(
  humanitarian_agents_legal_advocacy_legal_databases,
  ({ one }) => ({
    parent: one(humanitarian_agents, {
      fields: [humanitarian_agents_legal_advocacy_legal_databases.parent],
      references: [humanitarian_agents.id],
      relationName: 'legalAdvocacy_legalDatabases',
    }),
  }),
)
export const relations_humanitarian_agents = relations(humanitarian_agents, ({ many }) => ({
  legalAdvocacy_legalDatabases: many(humanitarian_agents_legal_advocacy_legal_databases, {
    relationName: 'legalAdvocacy_legalDatabases',
  }),
}))
export const relations_ai_generation_queue_source_data_content_themes = relations(
  ai_generation_queue_source_data_content_themes,
  ({ one }) => ({
    _parentID: one(ai_generation_queue, {
      fields: [ai_generation_queue_source_data_content_themes._parentID],
      references: [ai_generation_queue.id],
      relationName: 'sourceData_contentThemes',
    }),
  }),
)
export const relations_ai_generation_queue_parameters_color_scheme = relations(
  ai_generation_queue_parameters_color_scheme,
  ({ one }) => ({
    _parentID: one(ai_generation_queue, {
      fields: [ai_generation_queue_parameters_color_scheme._parentID],
      references: [ai_generation_queue.id],
      relationName: 'parameters_colorScheme',
    }),
  }),
)
export const relations_ai_generation_queue_parameters_text_elements = relations(
  ai_generation_queue_parameters_text_elements,
  ({ one }) => ({
    _parentID: one(ai_generation_queue, {
      fields: [ai_generation_queue_parameters_text_elements._parentID],
      references: [ai_generation_queue.id],
      relationName: 'parameters_textElements',
    }),
  }),
)
export const relations_ai_generation_queue_rels = relations(
  ai_generation_queue_rels,
  ({ one }) => ({
    parent: one(ai_generation_queue, {
      fields: [ai_generation_queue_rels.parent],
      references: [ai_generation_queue.id],
      relationName: '_rels',
    }),
    postsID: one(posts, {
      fields: [ai_generation_queue_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    pagesID: one(pages, {
      fields: [ai_generation_queue_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    mediaID: one(media, {
      fields: [ai_generation_queue_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_ai_generation_queue = relations(ai_generation_queue, ({ one, many }) => ({
  space: one(spaces, {
    fields: [ai_generation_queue.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  sourceData_contentThemes: many(ai_generation_queue_source_data_content_themes, {
    relationName: 'sourceData_contentThemes',
  }),
  parameters_colorScheme: many(ai_generation_queue_parameters_color_scheme, {
    relationName: 'parameters_colorScheme',
  }),
  parameters_textElements: many(ai_generation_queue_parameters_text_elements, {
    relationName: 'parameters_textElements',
  }),
  tenant: one(tenants, {
    fields: [ai_generation_queue.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  _rels: many(ai_generation_queue_rels, {
    relationName: '_rels',
  }),
}))
export const relations_job_queue = relations(job_queue, ({ one }) => ({
  tenant: one(tenants, {
    fields: [job_queue.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
}))
export const relations_channels_feed_configuration_filters_file_types = relations(
  channels_feed_configuration_filters_file_types,
  ({ one }) => ({
    _parentID: one(channels, {
      fields: [channels_feed_configuration_filters_file_types._parentID],
      references: [channels.id],
      relationName: 'feedConfiguration_filters_fileTypes',
    }),
  }),
)
export const relations_channels_feed_configuration_filters_keywords = relations(
  channels_feed_configuration_filters_keywords,
  ({ one }) => ({
    _parentID: one(channels, {
      fields: [channels_feed_configuration_filters_keywords._parentID],
      references: [channels.id],
      relationName: 'feedConfiguration_filters_keywords',
    }),
  }),
)
export const relations_channels_economics_model_volume_discounts = relations(
  channels_economics_model_volume_discounts,
  ({ one }) => ({
    _parentID: one(channels, {
      fields: [channels_economics_model_volume_discounts._parentID],
      references: [channels.id],
      relationName: 'economics_model_volumeDiscounts',
    }),
  }),
)
export const relations_channels_processing_rules_custom_prompts = relations(
  channels_processing_rules_custom_prompts,
  ({ one }) => ({
    _parentID: one(channels, {
      fields: [channels_processing_rules_custom_prompts._parentID],
      references: [channels.id],
      relationName: 'processingRules_customPrompts',
    }),
  }),
)
export const relations_channels = relations(channels, ({ many }) => ({
  feedConfiguration_filters_fileTypes: many(channels_feed_configuration_filters_file_types, {
    relationName: 'feedConfiguration_filters_fileTypes',
  }),
  feedConfiguration_filters_keywords: many(channels_feed_configuration_filters_keywords, {
    relationName: 'feedConfiguration_filters_keywords',
  }),
  economics_model_volumeDiscounts: many(channels_economics_model_volume_discounts, {
    relationName: 'economics_model_volumeDiscounts',
  }),
  processingRules_customPrompts: many(channels_processing_rules_custom_prompts, {
    relationName: 'processingRules_customPrompts',
  }),
}))
export const relations_phyles_charter_specializations = relations(
  phyles_charter_specializations,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_charter_specializations._parentID],
      references: [phyles.id],
      relationName: 'charter_specializations',
    }),
  }),
)
export const relations_phyles_charter_core_values = relations(
  phyles_charter_core_values,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_charter_core_values._parentID],
      references: [phyles.id],
      relationName: 'charter_coreValues',
    }),
  }),
)
export const relations_phyles_governance_leadership_structure = relations(
  phyles_governance_leadership_structure,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_governance_leadership_structure._parentID],
      references: [phyles.id],
      relationName: 'governance_leadershipStructure',
    }),
  }),
)
export const relations_phyles_membership_criteria_admission_requirements = relations(
  phyles_membership_criteria_admission_requirements,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_membership_criteria_admission_requirements._parentID],
      references: [phyles.id],
      relationName: 'membershipCriteria_admissionRequirements',
    }),
  }),
)
export const relations_phyles_membership_criteria_skill_requirements = relations(
  phyles_membership_criteria_skill_requirements,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_membership_criteria_skill_requirements._parentID],
      references: [phyles.id],
      relationName: 'membershipCriteria_skillRequirements',
    }),
  }),
)
export const relations_phyles_services_offered_services = relations(
  phyles_services_offered_services,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_services_offered_services._parentID],
      references: [phyles.id],
      relationName: 'services_offeredServices',
    }),
  }),
)
export const relations_phyles_services_service_guarantees = relations(
  phyles_services_service_guarantees,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_services_service_guarantees._parentID],
      references: [phyles.id],
      relationName: 'services_serviceGuarantees',
    }),
  }),
)
export const relations_phyles_inter_phyle_relations_alliances = relations(
  phyles_inter_phyle_relations_alliances,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_inter_phyle_relations_alliances._parentID],
      references: [phyles.id],
      relationName: 'interPhyleRelations_alliances',
    }),
  }),
)
export const relations_phyles_inter_phyle_relations_competitors = relations(
  phyles_inter_phyle_relations_competitors,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_inter_phyle_relations_competitors._parentID],
      references: [phyles.id],
      relationName: 'interPhyleRelations_competitors',
    }),
  }),
)
export const relations_phyles_cultural_aspects_traditions = relations(
  phyles_cultural_aspects_traditions,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_cultural_aspects_traditions._parentID],
      references: [phyles.id],
      relationName: 'culturalAspects_traditions',
    }),
  }),
)
export const relations_phyles_cultural_aspects_celebrations = relations(
  phyles_cultural_aspects_celebrations,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_cultural_aspects_celebrations._parentID],
      references: [phyles.id],
      relationName: 'culturalAspects_celebrations',
    }),
  }),
)
export const relations_phyles_cultural_aspects_symbolism_colors = relations(
  phyles_cultural_aspects_symbolism_colors,
  ({ one }) => ({
    _parentID: one(phyles, {
      fields: [phyles_cultural_aspects_symbolism_colors._parentID],
      references: [phyles.id],
      relationName: 'culturalAspects_symbolism_colors',
    }),
  }),
)
export const relations_phyles = relations(phyles, ({ many }) => ({
  charter_specializations: many(phyles_charter_specializations, {
    relationName: 'charter_specializations',
  }),
  charter_coreValues: many(phyles_charter_core_values, {
    relationName: 'charter_coreValues',
  }),
  governance_leadershipStructure: many(phyles_governance_leadership_structure, {
    relationName: 'governance_leadershipStructure',
  }),
  membershipCriteria_admissionRequirements: many(
    phyles_membership_criteria_admission_requirements,
    {
      relationName: 'membershipCriteria_admissionRequirements',
    },
  ),
  membershipCriteria_skillRequirements: many(phyles_membership_criteria_skill_requirements, {
    relationName: 'membershipCriteria_skillRequirements',
  }),
  services_offeredServices: many(phyles_services_offered_services, {
    relationName: 'services_offeredServices',
  }),
  services_serviceGuarantees: many(phyles_services_service_guarantees, {
    relationName: 'services_serviceGuarantees',
  }),
  interPhyleRelations_alliances: many(phyles_inter_phyle_relations_alliances, {
    relationName: 'interPhyleRelations_alliances',
  }),
  interPhyleRelations_competitors: many(phyles_inter_phyle_relations_competitors, {
    relationName: 'interPhyleRelations_competitors',
  }),
  culturalAspects_traditions: many(phyles_cultural_aspects_traditions, {
    relationName: 'culturalAspects_traditions',
  }),
  culturalAspects_celebrations: many(phyles_cultural_aspects_celebrations, {
    relationName: 'culturalAspects_celebrations',
  }),
  culturalAspects_symbolism_colors: many(phyles_cultural_aspects_symbolism_colors, {
    relationName: 'culturalAspects_symbolism_colors',
  }),
}))
export const relations_agent_reputation_reputation_history = relations(
  agent_reputation_reputation_history,
  ({ one }) => ({
    _parentID: one(agent_reputation, {
      fields: [agent_reputation_reputation_history._parentID],
      references: [agent_reputation.id],
      relationName: 'reputationHistory',
    }),
  }),
)
export const relations_agent_reputation_achievements = relations(
  agent_reputation_achievements,
  ({ one }) => ({
    _parentID: one(agent_reputation, {
      fields: [agent_reputation_achievements._parentID],
      references: [agent_reputation.id],
      relationName: 'achievements',
    }),
  }),
)
export const relations_agent_reputation_specializations = relations(
  agent_reputation_specializations,
  ({ one }) => ({
    _parentID: one(agent_reputation, {
      fields: [agent_reputation_specializations._parentID],
      references: [agent_reputation.id],
      relationName: 'specializations',
    }),
  }),
)
export const relations_agent_reputation_social_network_mentor_of = relations(
  agent_reputation_social_network_mentor_of,
  ({ one }) => ({
    _parentID: one(agent_reputation, {
      fields: [agent_reputation_social_network_mentor_of._parentID],
      references: [agent_reputation.id],
      relationName: 'socialNetwork_mentorOf',
    }),
  }),
)
export const relations_agent_reputation_social_network_mentored_by = relations(
  agent_reputation_social_network_mentored_by,
  ({ one }) => ({
    _parentID: one(agent_reputation, {
      fields: [agent_reputation_social_network_mentored_by._parentID],
      references: [agent_reputation.id],
      relationName: 'socialNetwork_mentoredBy',
    }),
  }),
)
export const relations_agent_reputation_social_network_collaborators = relations(
  agent_reputation_social_network_collaborators,
  ({ one }) => ({
    _parentID: one(agent_reputation, {
      fields: [agent_reputation_social_network_collaborators._parentID],
      references: [agent_reputation.id],
      relationName: 'socialNetwork_collaborators',
    }),
  }),
)
export const relations_agent_reputation_social_network_endorsements = relations(
  agent_reputation_social_network_endorsements,
  ({ one }) => ({
    _parentID: one(agent_reputation, {
      fields: [agent_reputation_social_network_endorsements._parentID],
      references: [agent_reputation.id],
      relationName: 'socialNetwork_endorsements',
    }),
  }),
)
export const relations_agent_reputation = relations(agent_reputation, ({ many }) => ({
  reputationHistory: many(agent_reputation_reputation_history, {
    relationName: 'reputationHistory',
  }),
  achievements: many(agent_reputation_achievements, {
    relationName: 'achievements',
  }),
  specializations: many(agent_reputation_specializations, {
    relationName: 'specializations',
  }),
  socialNetwork_mentorOf: many(agent_reputation_social_network_mentor_of, {
    relationName: 'socialNetwork_mentorOf',
  }),
  socialNetwork_mentoredBy: many(agent_reputation_social_network_mentored_by, {
    relationName: 'socialNetwork_mentoredBy',
  }),
  socialNetwork_collaborators: many(agent_reputation_social_network_collaborators, {
    relationName: 'socialNetwork_collaborators',
  }),
  socialNetwork_endorsements: many(agent_reputation_social_network_endorsements, {
    relationName: 'socialNetwork_endorsements',
  }),
}))
export const relations_inventory_messages_photos = relations(
  inventory_messages_photos,
  ({ one }) => ({
    _parentID: one(inventory_messages, {
      fields: [inventory_messages_photos._parentID],
      references: [inventory_messages.id],
      relationName: 'photos',
    }),
  }),
)
export const relations_inventory_messages_tags = relations(inventory_messages_tags, ({ one }) => ({
  _parentID: one(inventory_messages, {
    fields: [inventory_messages_tags._parentID],
    references: [inventory_messages.id],
    relationName: 'tags',
  }),
}))
export const relations_inventory_messages = relations(inventory_messages, ({ many }) => ({
  photos: many(inventory_messages_photos, {
    relationName: 'photos',
  }),
  tags: many(inventory_messages_tags, {
    relationName: 'tags',
  }),
}))
export const relations_photo_analysis = relations(photo_analysis, () => ({}))
export const relations_mileage_logs_photos = relations(mileage_logs_photos, ({ one }) => ({
  _parentID: one(mileage_logs, {
    fields: [mileage_logs_photos._parentID],
    references: [mileage_logs.id],
    relationName: 'photos',
  }),
}))
export const relations_mileage_logs = relations(mileage_logs, ({ many }) => ({
  photos: many(mileage_logs_photos, {
    relationName: 'photos',
  }),
}))
export const relations_quote_requests = relations(quote_requests, () => ({}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    tenantsID: one(tenants, {
      fields: [payload_locked_documents_rels.tenantsID],
      references: [tenants.id],
      relationName: 'tenants',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    workflowsID: one(workflows, {
      fields: [payload_locked_documents_rels.workflowsID],
      references: [workflows.id],
      relationName: 'workflows',
    }),
    'tenant-membershipsID': one(tenant_memberships, {
      fields: [payload_locked_documents_rels['tenant-membershipsID']],
      references: [tenant_memberships.id],
      relationName: 'tenant-memberships',
    }),
    'space-membershipsID': one(space_memberships, {
      fields: [payload_locked_documents_rels['space-membershipsID']],
      references: [space_memberships.id],
      relationName: 'space-memberships',
    }),
    appointmentsID: one(appointments, {
      fields: [payload_locked_documents_rels.appointmentsID],
      references: [appointments.id],
      relationName: 'appointments',
    }),
    contactsID: one(contacts, {
      fields: [payload_locked_documents_rels.contactsID],
      references: [contacts.id],
      relationName: 'contacts',
    }),
    messagesID: one(messages, {
      fields: [payload_locked_documents_rels.messagesID],
      references: [messages.id],
      relationName: 'messages',
    }),
    spacesID: one(spaces, {
      fields: [payload_locked_documents_rels.spacesID],
      references: [spaces.id],
      relationName: 'spaces',
    }),
    'web-chat-sessionsID': one(web_chat_sessions, {
      fields: [payload_locked_documents_rels['web-chat-sessionsID']],
      references: [web_chat_sessions.id],
      relationName: 'web-chat-sessions',
    }),
    'channel-managementID': one(channel_management, {
      fields: [payload_locked_documents_rels['channel-managementID']],
      references: [channel_management.id],
      relationName: 'channel-management',
    }),
    'social-media-botsID': one(social_media_bots, {
      fields: [payload_locked_documents_rels['social-media-botsID']],
      references: [social_media_bots.id],
      relationName: 'social-media-bots',
    }),
    'linked-accountsID': one(linked_accounts, {
      fields: [payload_locked_documents_rels['linked-accountsID']],
      references: [linked_accounts.id],
      relationName: 'linked-accounts',
    }),
    invoicesID: one(invoices, {
      fields: [payload_locked_documents_rels.invoicesID],
      references: [invoices.id],
      relationName: 'invoices',
    }),
    documentsID: one(documents, {
      fields: [payload_locked_documents_rels.documentsID],
      references: [documents.id],
      relationName: 'documents',
    }),
    donationsID: one(donations, {
      fields: [payload_locked_documents_rels.donationsID],
      references: [donations.id],
      relationName: 'donations',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: 'orders',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    organizationsID: one(organizations, {
      fields: [payload_locked_documents_rels.organizationsID],
      references: [organizations.id],
      relationName: 'organizations',
    }),
    venuesID: one(venues, {
      fields: [payload_locked_documents_rels.venuesID],
      references: [venues.id],
      relationName: 'venues',
    }),
    'business-agentsID': one(business_agents, {
      fields: [payload_locked_documents_rels['business-agentsID']],
      references: [business_agents.id],
      relationName: 'business-agents',
    }),
    'humanitarian-agentsID': one(humanitarian_agents, {
      fields: [payload_locked_documents_rels['humanitarian-agentsID']],
      references: [humanitarian_agents.id],
      relationName: 'humanitarian-agents',
    }),
    'ai-generation-queueID': one(ai_generation_queue, {
      fields: [payload_locked_documents_rels['ai-generation-queueID']],
      references: [ai_generation_queue.id],
      relationName: 'ai-generation-queue',
    }),
    'job-queueID': one(job_queue, {
      fields: [payload_locked_documents_rels['job-queueID']],
      references: [job_queue.id],
      relationName: 'job-queue',
    }),
    channelsID: one(channels, {
      fields: [payload_locked_documents_rels.channelsID],
      references: [channels.id],
      relationName: 'channels',
    }),
    phylesID: one(phyles, {
      fields: [payload_locked_documents_rels.phylesID],
      references: [phyles.id],
      relationName: 'phyles',
    }),
    'agent-reputationID': one(agent_reputation, {
      fields: [payload_locked_documents_rels['agent-reputationID']],
      references: [agent_reputation.id],
      relationName: 'agent-reputation',
    }),
    'inventory-messagesID': one(inventory_messages, {
      fields: [payload_locked_documents_rels['inventory-messagesID']],
      references: [inventory_messages.id],
      relationName: 'inventory-messages',
    }),
    'photo-analysisID': one(photo_analysis, {
      fields: [payload_locked_documents_rels['photo-analysisID']],
      references: [photo_analysis.id],
      relationName: 'photo-analysis',
    }),
    'mileage-logsID': one(mileage_logs, {
      fields: [payload_locked_documents_rels['mileage-logsID']],
      references: [mileage_logs.id],
      relationName: 'mileage-logs',
    }),
    'quote-requestsID': one(quote_requests, {
      fields: [payload_locked_documents_rels['quote-requestsID']],
      references: [quote_requests.id],
      relationName: 'quote-requests',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [header_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [footer_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  enum_tenants_business_type: typeof enum_tenants_business_type
  enum_tenants_revenue_sharing_partnership_tier: typeof enum_tenants_revenue_sharing_partnership_tier
  enum_tenants_referral_program_referral_terms: typeof enum_tenants_referral_program_referral_terms
  enum_tenants_referral_program_referral_status: typeof enum_tenants_referral_program_referral_status
  enum_tenants_status: typeof enum_tenants_status
  enum_users_roles: typeof enum_users_roles
  enum_users_karma_contribution_types: typeof enum_users_karma_contribution_types
  enum_users_karma_recognitions_type: typeof enum_users_karma_recognitions_type
  enum_users_preferences_privacy_profile_visibility: typeof enum_users_preferences_privacy_profile_visibility
  enum_workflows_steps_type: typeof enum_workflows_steps_type
  enum_workflows_steps_target_collection: typeof enum_workflows_steps_target_collection
  enum_workflows_steps_automation: typeof enum_workflows_steps_automation
  enum_workflows_ethical_framework_value_alignment: typeof enum_workflows_ethical_framework_value_alignment
  enum_workflows_status: typeof enum_workflows_status
  enum_workflows_trigger_collection: typeof enum_workflows_trigger_collection
  enum_workflows_trigger_event: typeof enum_workflows_trigger_event
  enum_workflows_business_context_department: typeof enum_workflows_business_context_department
  enum_workflows_business_context_process: typeof enum_workflows_business_context_process
  enum_workflows_business_context_priority: typeof enum_workflows_business_context_priority
  enum_workflows_scheduling_timezone: typeof enum_workflows_scheduling_timezone
  enum_tenant_memberships_permissions: typeof enum_tenant_memberships_permissions
  enum_tenant_memberships_role: typeof enum_tenant_memberships_role
  enum_tenant_memberships_status: typeof enum_tenant_memberships_status
  enum_space_memberships_custom_permissions: typeof enum_space_memberships_custom_permissions
  enum_space_memberships_role: typeof enum_space_memberships_role
  enum_space_memberships_status: typeof enum_space_memberships_status
  enum_space_memberships_crm_data_customer_tier: typeof enum_space_memberships_crm_data_customer_tier
  enum_appointments_timezone: typeof enum_appointments_timezone
  enum_appointments_recurrence_type: typeof enum_appointments_recurrence_type
  enum_appointments_meeting_type: typeof enum_appointments_meeting_type
  enum_appointments_appointment_type: typeof enum_appointments_appointment_type
  enum_appointments_status: typeof enum_appointments_status
  enum_appointments_revenue_tracking_source: typeof enum_appointments_revenue_tracking_source
  enum_appointments_payment_currency: typeof enum_appointments_payment_currency
  enum_appointments_payment_payment_status: typeof enum_appointments_payment_payment_status
  enum_contacts_addresses_type: typeof enum_contacts_addresses_type
  enum_contacts_addresses_country: typeof enum_contacts_addresses_country
  enum_contacts_type: typeof enum_contacts_type
  enum_contacts_preferences_preferred_contact_time: typeof enum_contacts_preferences_preferred_contact_time
  enum_contacts_crm_status: typeof enum_contacts_crm_status
  enum_contacts_crm_source: typeof enum_contacts_crm_source
  enum_messages_message_type: typeof enum_messages_message_type
  enum_messages_priority: typeof enum_messages_priority
  enum_spaces_commerce_settings_payment_methods: typeof enum_spaces_commerce_settings_payment_methods
  enum_spaces_commerce_settings_shipping_zones: typeof enum_spaces_commerce_settings_shipping_zones
  enum_sub_tiers_content_access: typeof enum_sub_tiers_content_access
  enum_sub_tiers_currency: typeof enum_sub_tiers_currency
  enum_spaces_monetization_ai_opt_factors: typeof enum_spaces_monetization_ai_opt_factors
  enum_spaces_integrations_print_partners_product_catalog: typeof enum_spaces_integrations_print_partners_product_catalog
  enum_spaces_integrations_social_bots_platforms: typeof enum_spaces_integrations_social_bots_platforms
  enum_spaces_business_identity_type: typeof enum_spaces_business_identity_type
  enum_spaces_business_identity_industry: typeof enum_spaces_business_identity_industry
  enum_spaces_business_identity_company_size: typeof enum_spaces_business_identity_company_size
  enum_spaces_business_identity_target_market: typeof enum_spaces_business_identity_target_market
  rev_type: typeof rev_type
  enum_spaces_integrations_scheduling_time_slots: typeof enum_spaces_integrations_scheduling_time_slots
  enum_spaces_visibility: typeof enum_spaces_visibility
  enum_spaces_member_approval: typeof enum_spaces_member_approval
  enum_web_chat_sessions_status: typeof enum_web_chat_sessions_status
  enum_channel_management_channel_type: typeof enum_channel_management_channel_type
  enum_channel_management_status: typeof enum_channel_management_status
  enum_channel_management_category: typeof enum_channel_management_category
  enum_channel_management_color: typeof enum_channel_management_color
  enum_social_media_bots_status: typeof enum_social_media_bots_status
  enum_linked_accounts_provider: typeof enum_linked_accounts_provider
  enum_linked_accounts_status: typeof enum_linked_accounts_status
  enum_invoices_payment_methods: typeof enum_invoices_payment_methods
  enum_invoices_status: typeof enum_invoices_status
  enum_documents_signers_role: typeof enum_documents_signers_role
  enum_documents_signers_status: typeof enum_documents_signers_status
  enum_documents_signers_signature_type: typeof enum_documents_signers_signature_type
  enum_documents_type: typeof enum_documents_type
  enum_documents_status: typeof enum_documents_status
  enum_donations_cause: typeof enum_donations_cause
  enum_donations_payment_method: typeof enum_donations_payment_method
  enum_donations_status: typeof enum_donations_status
  enum_donations_recurring_frequency: typeof enum_donations_recurring_frequency
  enum_products_hero_links_link_type: typeof enum_products_hero_links_link_type
  enum_products_hero_links_link_appearance: typeof enum_products_hero_links_link_appearance
  enum_products_blocks_cta_links_link_type: typeof enum_products_blocks_cta_links_link_type
  enum_products_blocks_cta_links_link_appearance: typeof enum_products_blocks_cta_links_link_appearance
  enum_products_blocks_content_columns_size: typeof enum_products_blocks_content_columns_size
  enum_products_blocks_content_columns_link_type: typeof enum_products_blocks_content_columns_link_type
  enum_products_blocks_content_columns_link_appearance: typeof enum_products_blocks_content_columns_link_appearance
  enum_products_blocks_archive_populate_by: typeof enum_products_blocks_archive_populate_by
  enum_products_blocks_archive_relation_to: typeof enum_products_blocks_archive_relation_to
  enum_products_hero_type: typeof enum_products_hero_type
  enum_products_product_type: typeof enum_products_product_type
  enum_products_pricing_currency: typeof enum_products_pricing_currency
  enum_products_details_dimensions_unit: typeof enum_products_details_dimensions_unit
  enum_products_service_details_location: typeof enum_products_service_details_location
  enum_products_shipping_shipping_class: typeof enum_products_shipping_shipping_class
  enum_products_status: typeof enum_products_status
  enum__products_v_version_hero_links_link_type: typeof enum__products_v_version_hero_links_link_type
  enum__products_v_version_hero_links_link_appearance: typeof enum__products_v_version_hero_links_link_appearance
  enum__products_v_blocks_cta_links_link_type: typeof enum__products_v_blocks_cta_links_link_type
  enum__products_v_blocks_cta_links_link_appearance: typeof enum__products_v_blocks_cta_links_link_appearance
  enum__products_v_blocks_content_columns_size: typeof enum__products_v_blocks_content_columns_size
  enum__products_v_blocks_content_columns_link_type: typeof enum__products_v_blocks_content_columns_link_type
  enum__products_v_blocks_content_columns_link_appearance: typeof enum__products_v_blocks_content_columns_link_appearance
  enum__products_v_blocks_archive_populate_by: typeof enum__products_v_blocks_archive_populate_by
  enum__products_v_blocks_archive_relation_to: typeof enum__products_v_blocks_archive_relation_to
  enum__products_v_version_hero_type: typeof enum__products_v_version_hero_type
  enum__products_v_version_product_type: typeof enum__products_v_version_product_type
  enum__products_v_version_pricing_currency: typeof enum__products_v_version_pricing_currency
  enum__products_v_version_details_dimensions_unit: typeof enum__products_v_version_details_dimensions_unit
  enum__products_v_version_service_details_location: typeof enum__products_v_version_service_details_location
  enum__products_v_version_shipping_shipping_class: typeof enum__products_v_version_shipping_shipping_class
  enum__products_v_version_status: typeof enum__products_v_version_status
  enum_orders_status: typeof enum_orders_status
  enum_orders_payment_status: typeof enum_orders_payment_status
  enum_orders_payment_details_payment_method: typeof enum_orders_payment_details_payment_method
  enum_orders_fulfillment_method: typeof enum_orders_fulfillment_method
  enum_orders_fulfillment_status: typeof enum_orders_fulfillment_status
  enum_orders_fulfillment_carrier: typeof enum_orders_fulfillment_carrier
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_hero_type: typeof enum_pages_hero_type
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_organizations_members_role: typeof enum_organizations_members_role
  enum_organizations_members_access_level: typeof enum_organizations_members_access_level
  enum_organizations_ops_settings_hours_schedule_day_of_week: typeof enum_organizations_ops_settings_hours_schedule_day_of_week
  enum_organizations_integration_websites_purpose: typeof enum_organizations_integration_websites_purpose
  enum_organizations_organization_type: typeof enum_organizations_organization_type
  enum_organizations_crm_integration_crm_type: typeof enum_organizations_crm_integration_crm_type
  enum_organizations_crm_integration_sync_schedule: typeof enum_organizations_crm_integration_sync_schedule
  enum_organizations_crm_integration_sync_status: typeof enum_organizations_crm_integration_sync_status
  enum_organizations_analytics_frequency: typeof enum_organizations_analytics_frequency
  enum_organizations_status: typeof enum_organizations_status
  enum_venues_business_hours_schedule_day_of_week: typeof enum_venues_business_hours_schedule_day_of_week
  enum_venues_staff_schedule_availability_day_of_week: typeof enum_venues_staff_schedule_availability_day_of_week
  enum_venues_staff_role: typeof enum_venues_staff_role
  enum_venues_services_service_type: typeof enum_venues_services_service_type
  enum_venues_bay_management_bays_bay_type: typeof enum_venues_bay_management_bays_bay_type
  enum_venues_integrations_payment_methods_type: typeof enum_venues_integrations_payment_methods_type
  enum_venues_venue_type: typeof enum_venues_venue_type
  enum_venues_integrations_booking_system_booking_system_type: typeof enum_venues_integrations_booking_system_booking_system_type
  enum_venues_status: typeof enum_venues_status
  enum_business_agents_ops_hours_schedule_day: typeof enum_business_agents_ops_hours_schedule_day
  enum_business_agents_ops_handoff_triggers_trigger: typeof enum_business_agents_ops_handoff_triggers_trigger
  enum_business_agents_humanitarian_legal_databases: typeof enum_business_agents_humanitarian_legal_databases
  enum_business_agents_humanitarian_news_curation_content_filters: typeof enum_business_agents_humanitarian_news_curation_content_filters
  enum_business_agents_humanitarian_resources_vendors_type: typeof enum_business_agents_humanitarian_resources_vendors_type
  enum_business_agents_humanitarian_avatar_scope: typeof enum_business_agents_humanitarian_avatar_scope
  enum_business_agents_vapi_integration_allowed_actions: typeof enum_business_agents_vapi_integration_allowed_actions
  enum_business_agents_spirit_type: typeof enum_business_agents_spirit_type
  enum_business_agents_personality_communication_style: typeof enum_business_agents_personality_communication_style
  enum_business_agents_ai_style_formality: typeof enum_business_agents_ai_style_formality
  enum_business_agents_agent_type: typeof enum_business_agents_agent_type
  enum_business_agents_humanitarian_news_curation_positivity_bias: typeof enum_business_agents_humanitarian_news_curation_positivity_bias
  enum_business_agents_vapi_integration_voice_id: typeof enum_business_agents_vapi_integration_voice_id
  enum_business_agents_vapi_integration_status: typeof enum_business_agents_vapi_integration_status
  enum_humanitarian_agents_legal_advocacy_legal_databases: typeof enum_humanitarian_agents_legal_advocacy_legal_databases
  enum_humanitarian_agents_spirit_type: typeof enum_humanitarian_agents_spirit_type
  enum_humanitarian_agents_news_curation_hope_bias: typeof enum_humanitarian_agents_news_curation_hope_bias
  enum_ai_generation_queue_parameters_text_elements_emphasis: typeof enum_ai_generation_queue_parameters_text_elements_emphasis
  enum_ai_generation_queue_generation_type: typeof enum_ai_generation_queue_generation_type
  enum_ai_generation_queue_parameters_product_type: typeof enum_ai_generation_queue_parameters_product_type
  enum_ai_generation_queue_parameters_style_guide: typeof enum_ai_generation_queue_parameters_style_guide
  enum_ai_generation_queue_status: typeof enum_ai_generation_queue_status
  enum_ai_generation_queue_approval_status: typeof enum_ai_generation_queue_approval_status
  enum_job_queue_status: typeof enum_job_queue_status
  enum_channels_channel_type: typeof enum_channels_channel_type
  enum_channels_report_type: typeof enum_channels_report_type
  enum_channels_feed_configuration_feed_source: typeof enum_channels_feed_configuration_feed_source
  enum_channels_economics_phyle_affiliation: typeof enum_channels_economics_phyle_affiliation
  enum_channels_economics_model_sharing: typeof enum_channels_economics_model_sharing
  enum_channels_processing_rules_output_format: typeof enum_channels_processing_rules_output_format
  enum_channels_status: typeof enum_channels_status
  enum_phyles_membership_criteria_skill_requirements_level: typeof enum_phyles_membership_criteria_skill_requirements_level
  enum_phyles_inter_phyle_relations_alliances_alliance_type: typeof enum_phyles_inter_phyle_relations_alliances_alliance_type
  enum_phyles_phyle_type: typeof enum_phyles_phyle_type
  enum_phyles_economic_structure_taxation_model: typeof enum_phyles_economic_structure_taxation_model
  enum_phyles_economic_structure_wealth_distribution: typeof enum_phyles_economic_structure_wealth_distribution
  enum_phyles_governance_governance_model: typeof enum_phyles_governance_governance_model
  enum_phyles_status: typeof enum_phyles_status
  enum_agent_reputation_reputation_history_event_type: typeof enum_agent_reputation_reputation_history_event_type
  enum_agent_reputation_achievements_achievement: typeof enum_agent_reputation_achievements_achievement
  enum_agent_reputation_specializations_proficiency_level: typeof enum_agent_reputation_specializations_proficiency_level
  enum_agent_reputation_rank: typeof enum_agent_reputation_rank
  enum_agent_reputation_status: typeof enum_agent_reputation_status
  enum_inventory_messages_message_type: typeof enum_inventory_messages_message_type
  enum_inventory_messages_status: typeof enum_inventory_messages_status
  enum_inventory_messages_priority: typeof enum_inventory_messages_priority
  enum_photo_analysis_sequence_type: typeof enum_photo_analysis_sequence_type
  enum_mileage_logs_type: typeof enum_mileage_logs_type
  enum_quote_requests_service_type: typeof enum_quote_requests_service_type
  enum_quote_requests_status: typeof enum_quote_requests_status
  enum_quote_requests_priority: typeof enum_quote_requests_priority
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  tenants: typeof tenants
  users_roles: typeof users_roles
  users_karma_contribution_types: typeof users_karma_contribution_types
  users_karma_recognitions: typeof users_karma_recognitions
  users_sessions: typeof users_sessions
  users: typeof users
  workflows_steps: typeof workflows_steps
  workflows_ethical_framework_bias_checkpoints: typeof workflows_ethical_framework_bias_checkpoints
  workflows_ethical_framework_value_alignment: typeof workflows_ethical_framework_value_alignment
  workflows_change_log: typeof workflows_change_log
  workflows: typeof workflows
  workflows_rels: typeof workflows_rels
  tenant_memberships_permissions: typeof tenant_memberships_permissions
  tenant_memberships: typeof tenant_memberships
  space_memberships_custom_permissions: typeof space_memberships_custom_permissions
  space_memberships_crm_data_conversion_events: typeof space_memberships_crm_data_conversion_events
  space_memberships: typeof space_memberships
  space_memberships_texts: typeof space_memberships_texts
  appointments_reminders_sent: typeof appointments_reminders_sent
  appointments: typeof appointments
  appointments_rels: typeof appointments_rels
  contacts_addresses: typeof contacts_addresses
  contacts: typeof contacts
  contacts_texts: typeof contacts_texts
  messages: typeof messages
  messages_rels: typeof messages_rels
  spaces_commerce_settings_payment_methods: typeof spaces_commerce_settings_payment_methods
  spaces_commerce_settings_shipping_zones: typeof spaces_commerce_settings_shipping_zones
  sub_tiers_content_access: typeof sub_tiers_content_access
  sub_tiers: typeof sub_tiers
  spaces_monetization_ai_opt_factors: typeof spaces_monetization_ai_opt_factors
  spaces_integrations_print_partners_product_catalog: typeof spaces_integrations_print_partners_product_catalog
  spaces_integrations_print_partners: typeof spaces_integrations_print_partners
  spaces_integrations_social_bots_platforms: typeof spaces_integrations_social_bots_platforms
  spaces: typeof spaces
  spaces_texts: typeof spaces_texts
  web_chat_sessions: typeof web_chat_sessions
  web_chat_sessions_rels: typeof web_chat_sessions_rels
  channel_management: typeof channel_management
  channel_management_rels: typeof channel_management_rels
  social_media_bots: typeof social_media_bots
  linked_accounts: typeof linked_accounts
  invoices_itemized_list: typeof invoices_itemized_list
  invoices_payment_methods: typeof invoices_payment_methods
  invoices: typeof invoices
  documents_signers: typeof documents_signers
  documents: typeof documents
  donations: typeof donations
  products_hero_links: typeof products_hero_links
  products_gallery: typeof products_gallery
  products_blocks_cta_links: typeof products_blocks_cta_links
  products_blocks_cta: typeof products_blocks_cta
  products_blocks_content_columns: typeof products_blocks_content_columns
  products_blocks_content: typeof products_blocks_content
  products_blocks_media_block: typeof products_blocks_media_block
  products_blocks_archive: typeof products_blocks_archive
  products_blocks_form_block: typeof products_blocks_form_block
  products_digital_assets: typeof products_digital_assets
  products_tags: typeof products_tags
  products: typeof products
  products_rels: typeof products_rels
  _products_v_version_hero_links: typeof _products_v_version_hero_links
  _products_v_version_gallery: typeof _products_v_version_gallery
  _products_v_blocks_cta_links: typeof _products_v_blocks_cta_links
  _products_v_blocks_cta: typeof _products_v_blocks_cta
  _products_v_blocks_content_columns: typeof _products_v_blocks_content_columns
  _products_v_blocks_content: typeof _products_v_blocks_content
  _products_v_blocks_media_block: typeof _products_v_blocks_media_block
  _products_v_blocks_archive: typeof _products_v_blocks_archive
  _products_v_blocks_form_block: typeof _products_v_blocks_form_block
  _products_v_version_digital_assets: typeof _products_v_version_digital_assets
  _products_v_version_tags: typeof _products_v_version_tags
  _products_v: typeof _products_v
  _products_v_rels: typeof _products_v_rels
  orders_line_items: typeof orders_line_items
  orders: typeof orders
  pages_hero_links: typeof pages_hero_links
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  media: typeof media
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  organizations_members: typeof organizations_members
  organizations_billing_settings_sharing_discounts: typeof organizations_billing_settings_sharing_discounts
  organizations_ops_settings_hours_schedule: typeof organizations_ops_settings_hours_schedule
  organizations_integration_websites: typeof organizations_integration_websites
  organizations_analytics_recipients: typeof organizations_analytics_recipients
  organizations: typeof organizations
  venues_business_hours_schedule: typeof venues_business_hours_schedule
  venues_business_hours_special_hours: typeof venues_business_hours_special_hours
  venues_staff_specialties: typeof venues_staff_specialties
  venues_staff_schedule_availability: typeof venues_staff_schedule_availability
  venues_staff: typeof venues_staff
  venues_services: typeof venues_services
  venues_bay_management_bays: typeof venues_bay_management_bays
  venues_integrations_payment_methods: typeof venues_integrations_payment_methods
  venues_guardian_angel_custom_services: typeof venues_guardian_angel_custom_services
  venues: typeof venues
  business_agents_business_knowledge_services: typeof business_agents_business_knowledge_services
  business_agents_business_knowledge_customer_stories: typeof business_agents_business_knowledge_customer_stories
  business_agents_business_knowledge_frequent_questions: typeof business_agents_business_knowledge_frequent_questions
  business_agents_ops_hours_schedule: typeof business_agents_ops_hours_schedule
  business_agents_ops_handoff_triggers: typeof business_agents_ops_handoff_triggers
  business_agents_humanitarian_legal_databases: typeof business_agents_humanitarian_legal_databases
  business_agents_humanitarian_news_curation_content_filters: typeof business_agents_humanitarian_news_curation_content_filters
  business_agents_humanitarian_resources_vendors: typeof business_agents_humanitarian_resources_vendors
  business_agents_humanitarian_avatar_scope: typeof business_agents_humanitarian_avatar_scope
  business_agents_vapi_integration_allowed_actions: typeof business_agents_vapi_integration_allowed_actions
  business_agents: typeof business_agents
  humanitarian_agents_legal_advocacy_legal_databases: typeof humanitarian_agents_legal_advocacy_legal_databases
  humanitarian_agents: typeof humanitarian_agents
  ai_generation_queue_source_data_content_themes: typeof ai_generation_queue_source_data_content_themes
  ai_generation_queue_parameters_color_scheme: typeof ai_generation_queue_parameters_color_scheme
  ai_generation_queue_parameters_text_elements: typeof ai_generation_queue_parameters_text_elements
  ai_generation_queue: typeof ai_generation_queue
  ai_generation_queue_rels: typeof ai_generation_queue_rels
  job_queue: typeof job_queue
  channels_feed_configuration_filters_file_types: typeof channels_feed_configuration_filters_file_types
  channels_feed_configuration_filters_keywords: typeof channels_feed_configuration_filters_keywords
  channels_economics_model_volume_discounts: typeof channels_economics_model_volume_discounts
  channels_processing_rules_custom_prompts: typeof channels_processing_rules_custom_prompts
  channels: typeof channels
  phyles_charter_specializations: typeof phyles_charter_specializations
  phyles_charter_core_values: typeof phyles_charter_core_values
  phyles_governance_leadership_structure: typeof phyles_governance_leadership_structure
  phyles_membership_criteria_admission_requirements: typeof phyles_membership_criteria_admission_requirements
  phyles_membership_criteria_skill_requirements: typeof phyles_membership_criteria_skill_requirements
  phyles_services_offered_services: typeof phyles_services_offered_services
  phyles_services_service_guarantees: typeof phyles_services_service_guarantees
  phyles_inter_phyle_relations_alliances: typeof phyles_inter_phyle_relations_alliances
  phyles_inter_phyle_relations_competitors: typeof phyles_inter_phyle_relations_competitors
  phyles_cultural_aspects_traditions: typeof phyles_cultural_aspects_traditions
  phyles_cultural_aspects_celebrations: typeof phyles_cultural_aspects_celebrations
  phyles_cultural_aspects_symbolism_colors: typeof phyles_cultural_aspects_symbolism_colors
  phyles: typeof phyles
  agent_reputation_reputation_history: typeof agent_reputation_reputation_history
  agent_reputation_achievements: typeof agent_reputation_achievements
  agent_reputation_specializations: typeof agent_reputation_specializations
  agent_reputation_social_network_mentor_of: typeof agent_reputation_social_network_mentor_of
  agent_reputation_social_network_mentored_by: typeof agent_reputation_social_network_mentored_by
  agent_reputation_social_network_collaborators: typeof agent_reputation_social_network_collaborators
  agent_reputation_social_network_endorsements: typeof agent_reputation_social_network_endorsements
  agent_reputation: typeof agent_reputation
  inventory_messages_photos: typeof inventory_messages_photos
  inventory_messages_tags: typeof inventory_messages_tags
  inventory_messages: typeof inventory_messages
  photo_analysis: typeof photo_analysis
  mileage_logs_photos: typeof mileage_logs_photos
  mileage_logs: typeof mileage_logs
  quote_requests: typeof quote_requests
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_tenants: typeof relations_tenants
  relations_users_roles: typeof relations_users_roles
  relations_users_karma_contribution_types: typeof relations_users_karma_contribution_types
  relations_users_karma_recognitions: typeof relations_users_karma_recognitions
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_workflows_steps: typeof relations_workflows_steps
  relations_workflows_ethical_framework_bias_checkpoints: typeof relations_workflows_ethical_framework_bias_checkpoints
  relations_workflows_ethical_framework_value_alignment: typeof relations_workflows_ethical_framework_value_alignment
  relations_workflows_change_log: typeof relations_workflows_change_log
  relations_workflows_rels: typeof relations_workflows_rels
  relations_workflows: typeof relations_workflows
  relations_tenant_memberships_permissions: typeof relations_tenant_memberships_permissions
  relations_tenant_memberships: typeof relations_tenant_memberships
  relations_space_memberships_custom_permissions: typeof relations_space_memberships_custom_permissions
  relations_space_memberships_crm_data_conversion_events: typeof relations_space_memberships_crm_data_conversion_events
  relations_space_memberships_texts: typeof relations_space_memberships_texts
  relations_space_memberships: typeof relations_space_memberships
  relations_appointments_reminders_sent: typeof relations_appointments_reminders_sent
  relations_appointments_rels: typeof relations_appointments_rels
  relations_appointments: typeof relations_appointments
  relations_contacts_addresses: typeof relations_contacts_addresses
  relations_contacts_texts: typeof relations_contacts_texts
  relations_contacts: typeof relations_contacts
  relations_messages_rels: typeof relations_messages_rels
  relations_messages: typeof relations_messages
  relations_spaces_commerce_settings_payment_methods: typeof relations_spaces_commerce_settings_payment_methods
  relations_spaces_commerce_settings_shipping_zones: typeof relations_spaces_commerce_settings_shipping_zones
  relations_sub_tiers_content_access: typeof relations_sub_tiers_content_access
  relations_sub_tiers: typeof relations_sub_tiers
  relations_spaces_monetization_ai_opt_factors: typeof relations_spaces_monetization_ai_opt_factors
  relations_spaces_integrations_print_partners_product_catalog: typeof relations_spaces_integrations_print_partners_product_catalog
  relations_spaces_integrations_print_partners: typeof relations_spaces_integrations_print_partners
  relations_spaces_integrations_social_bots_platforms: typeof relations_spaces_integrations_social_bots_platforms
  relations_spaces_texts: typeof relations_spaces_texts
  relations_spaces: typeof relations_spaces
  relations_web_chat_sessions_rels: typeof relations_web_chat_sessions_rels
  relations_web_chat_sessions: typeof relations_web_chat_sessions
  relations_channel_management_rels: typeof relations_channel_management_rels
  relations_channel_management: typeof relations_channel_management
  relations_social_media_bots: typeof relations_social_media_bots
  relations_linked_accounts: typeof relations_linked_accounts
  relations_invoices_itemized_list: typeof relations_invoices_itemized_list
  relations_invoices_payment_methods: typeof relations_invoices_payment_methods
  relations_invoices: typeof relations_invoices
  relations_documents_signers: typeof relations_documents_signers
  relations_documents: typeof relations_documents
  relations_donations: typeof relations_donations
  relations_products_hero_links: typeof relations_products_hero_links
  relations_products_gallery: typeof relations_products_gallery
  relations_products_blocks_cta_links: typeof relations_products_blocks_cta_links
  relations_products_blocks_cta: typeof relations_products_blocks_cta
  relations_products_blocks_content_columns: typeof relations_products_blocks_content_columns
  relations_products_blocks_content: typeof relations_products_blocks_content
  relations_products_blocks_media_block: typeof relations_products_blocks_media_block
  relations_products_blocks_archive: typeof relations_products_blocks_archive
  relations_products_blocks_form_block: typeof relations_products_blocks_form_block
  relations_products_digital_assets: typeof relations_products_digital_assets
  relations_products_tags: typeof relations_products_tags
  relations_products_rels: typeof relations_products_rels
  relations_products: typeof relations_products
  relations__products_v_version_hero_links: typeof relations__products_v_version_hero_links
  relations__products_v_version_gallery: typeof relations__products_v_version_gallery
  relations__products_v_blocks_cta_links: typeof relations__products_v_blocks_cta_links
  relations__products_v_blocks_cta: typeof relations__products_v_blocks_cta
  relations__products_v_blocks_content_columns: typeof relations__products_v_blocks_content_columns
  relations__products_v_blocks_content: typeof relations__products_v_blocks_content
  relations__products_v_blocks_media_block: typeof relations__products_v_blocks_media_block
  relations__products_v_blocks_archive: typeof relations__products_v_blocks_archive
  relations__products_v_blocks_form_block: typeof relations__products_v_blocks_form_block
  relations__products_v_version_digital_assets: typeof relations__products_v_version_digital_assets
  relations__products_v_version_tags: typeof relations__products_v_version_tags
  relations__products_v_rels: typeof relations__products_v_rels
  relations__products_v: typeof relations__products_v
  relations_orders_line_items: typeof relations_orders_line_items
  relations_orders: typeof relations_orders
  relations_pages_hero_links: typeof relations_pages_hero_links
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_media: typeof relations_media
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories: typeof relations_categories
  relations_organizations_members: typeof relations_organizations_members
  relations_organizations_billing_settings_sharing_discounts: typeof relations_organizations_billing_settings_sharing_discounts
  relations_organizations_ops_settings_hours_schedule: typeof relations_organizations_ops_settings_hours_schedule
  relations_organizations_integration_websites: typeof relations_organizations_integration_websites
  relations_organizations_analytics_recipients: typeof relations_organizations_analytics_recipients
  relations_organizations: typeof relations_organizations
  relations_venues_business_hours_schedule: typeof relations_venues_business_hours_schedule
  relations_venues_business_hours_special_hours: typeof relations_venues_business_hours_special_hours
  relations_venues_staff_specialties: typeof relations_venues_staff_specialties
  relations_venues_staff_schedule_availability: typeof relations_venues_staff_schedule_availability
  relations_venues_staff: typeof relations_venues_staff
  relations_venues_services: typeof relations_venues_services
  relations_venues_bay_management_bays: typeof relations_venues_bay_management_bays
  relations_venues_integrations_payment_methods: typeof relations_venues_integrations_payment_methods
  relations_venues_guardian_angel_custom_services: typeof relations_venues_guardian_angel_custom_services
  relations_venues: typeof relations_venues
  relations_business_agents_business_knowledge_services: typeof relations_business_agents_business_knowledge_services
  relations_business_agents_business_knowledge_customer_stories: typeof relations_business_agents_business_knowledge_customer_stories
  relations_business_agents_business_knowledge_frequent_questions: typeof relations_business_agents_business_knowledge_frequent_questions
  relations_business_agents_ops_hours_schedule: typeof relations_business_agents_ops_hours_schedule
  relations_business_agents_ops_handoff_triggers: typeof relations_business_agents_ops_handoff_triggers
  relations_business_agents_humanitarian_legal_databases: typeof relations_business_agents_humanitarian_legal_databases
  relations_business_agents_humanitarian_news_curation_content_filters: typeof relations_business_agents_humanitarian_news_curation_content_filters
  relations_business_agents_humanitarian_resources_vendors: typeof relations_business_agents_humanitarian_resources_vendors
  relations_business_agents_humanitarian_avatar_scope: typeof relations_business_agents_humanitarian_avatar_scope
  relations_business_agents_vapi_integration_allowed_actions: typeof relations_business_agents_vapi_integration_allowed_actions
  relations_business_agents: typeof relations_business_agents
  relations_humanitarian_agents_legal_advocacy_legal_databases: typeof relations_humanitarian_agents_legal_advocacy_legal_databases
  relations_humanitarian_agents: typeof relations_humanitarian_agents
  relations_ai_generation_queue_source_data_content_themes: typeof relations_ai_generation_queue_source_data_content_themes
  relations_ai_generation_queue_parameters_color_scheme: typeof relations_ai_generation_queue_parameters_color_scheme
  relations_ai_generation_queue_parameters_text_elements: typeof relations_ai_generation_queue_parameters_text_elements
  relations_ai_generation_queue_rels: typeof relations_ai_generation_queue_rels
  relations_ai_generation_queue: typeof relations_ai_generation_queue
  relations_job_queue: typeof relations_job_queue
  relations_channels_feed_configuration_filters_file_types: typeof relations_channels_feed_configuration_filters_file_types
  relations_channels_feed_configuration_filters_keywords: typeof relations_channels_feed_configuration_filters_keywords
  relations_channels_economics_model_volume_discounts: typeof relations_channels_economics_model_volume_discounts
  relations_channels_processing_rules_custom_prompts: typeof relations_channels_processing_rules_custom_prompts
  relations_channels: typeof relations_channels
  relations_phyles_charter_specializations: typeof relations_phyles_charter_specializations
  relations_phyles_charter_core_values: typeof relations_phyles_charter_core_values
  relations_phyles_governance_leadership_structure: typeof relations_phyles_governance_leadership_structure
  relations_phyles_membership_criteria_admission_requirements: typeof relations_phyles_membership_criteria_admission_requirements
  relations_phyles_membership_criteria_skill_requirements: typeof relations_phyles_membership_criteria_skill_requirements
  relations_phyles_services_offered_services: typeof relations_phyles_services_offered_services
  relations_phyles_services_service_guarantees: typeof relations_phyles_services_service_guarantees
  relations_phyles_inter_phyle_relations_alliances: typeof relations_phyles_inter_phyle_relations_alliances
  relations_phyles_inter_phyle_relations_competitors: typeof relations_phyles_inter_phyle_relations_competitors
  relations_phyles_cultural_aspects_traditions: typeof relations_phyles_cultural_aspects_traditions
  relations_phyles_cultural_aspects_celebrations: typeof relations_phyles_cultural_aspects_celebrations
  relations_phyles_cultural_aspects_symbolism_colors: typeof relations_phyles_cultural_aspects_symbolism_colors
  relations_phyles: typeof relations_phyles
  relations_agent_reputation_reputation_history: typeof relations_agent_reputation_reputation_history
  relations_agent_reputation_achievements: typeof relations_agent_reputation_achievements
  relations_agent_reputation_specializations: typeof relations_agent_reputation_specializations
  relations_agent_reputation_social_network_mentor_of: typeof relations_agent_reputation_social_network_mentor_of
  relations_agent_reputation_social_network_mentored_by: typeof relations_agent_reputation_social_network_mentored_by
  relations_agent_reputation_social_network_collaborators: typeof relations_agent_reputation_social_network_collaborators
  relations_agent_reputation_social_network_endorsements: typeof relations_agent_reputation_social_network_endorsements
  relations_agent_reputation: typeof relations_agent_reputation
  relations_inventory_messages_photos: typeof relations_inventory_messages_photos
  relations_inventory_messages_tags: typeof relations_inventory_messages_tags
  relations_inventory_messages: typeof relations_inventory_messages
  relations_photo_analysis: typeof relations_photo_analysis
  relations_mileage_logs_photos: typeof relations_mileage_logs_photos
  relations_mileage_logs: typeof relations_mileage_logs
  relations_quote_requests: typeof relations_quote_requests
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
